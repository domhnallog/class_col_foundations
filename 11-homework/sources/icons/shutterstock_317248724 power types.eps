%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1507.i105.043.S.m006.c11.energy icon black.eps
%%Creator: Adobe Illustrator(R) 17.1
%%For: Agor
%%CreationDate: 7/26/2015
%%BoundingBox: 0 0 425 422
%%HiResBoundingBox: 0 0 424.4564 421.5400
%%CropBox: 0 0 424.4564 421.5400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 17.1.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 17.1.0 x273 R agm 4.7709 ct 5.3840%ADO_ContainsXMP: MainFirst
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.5-c014 79.151739, 2013/04/03-12:12:15        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">16</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-07-26T19:30:16+05:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-07-26T19:30:16+05:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-07-26T19:30:16+05:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXkf5w6Xpuv+dvK&#xA;ehalx+o/VtUubgO5jHIwKtueSlDtMo/aFemKsk/JK7+tflboEn8sMkP/ACJmeP8A40xVnGKuxV2K&#xA;uxV2KuxV2KuxVbNKsULytXjGpZqdaKK4qxey/Mjy9eeSJfOcS3H6IhWRnVkUTUif02onKnX/ACsV&#xA;T/SNTttV0my1S1DC2v4IrqAOKN6cyB15AE0NG3xVF4q7FXYq7FVC+v7GwtXu764itLWIVkuJ3WON&#xA;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&#xA;/9k=</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:07e00f8e-7fd0-5542-9103-229612981b52</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:07e00f8e-7fd0-5542-9103-229612981b52</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:aa5ec03d-55cb-e446-a725-d06ae6300478</stRef:instanceID>
            <stRef:documentID>xmp.did:aa5ec03d-55cb-e446-a725-d06ae6300478</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:73820da2-99af-2b47-8584-d287755088f4</stEvt:instanceID>
                  <stEvt:when>2015-05-14T18:17:16+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:07e00f8e-7fd0-5542-9103-229612981b52</stEvt:instanceID>
                  <stEvt:when>2015-07-26T19:30:16+05:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>450.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 11.00</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -421.54 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 421.54 li
424.456 421.54 li
424.456 0 li
cp
clp
382.493 123.736 mo
382.452 123.994 382.366 124.236 382.261 124.468 cv
410.194 120.87 li
410.027 119.272 li
381.921 121.529 li
381.939 121.552 381.962 121.569 381.979 121.593 cv
382.43 122.214 382.613 122.976 382.493 123.736 cv
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.235294 .235294 .231373 rgb
f
377.315 124.975 mo
377.302 124.957 377.295 124.938 377.283 124.92 cv
366.434 150.904 li
367.902 151.558 li
377.643 131.053 li
379.977 126.139 li
379.868 126.152 379.759 126.165 379.648 126.165 cv
378.726 126.165 377.854 125.72 377.315 124.975 cv
cp
f
377.956 120.951 mo
378.393 120.634 378.91 120.475 379.435 120.444 cv
362.304 97.9901 li
361.005 98.9334 li
377.013 122.147 li
377.211 121.686 377.521 121.267 377.956 120.951 cv
cp
f
378.125 124.389 mo
378.734 125.23 379.91 125.416 380.753 124.806 cv
381.593 124.196 381.78 123.02 381.169 122.179 cv
380.561 121.339 379.383 121.151 378.543 121.761 cv
377.7 122.372 377.515 123.548 378.125 124.389 cv
cp
f
405.034 143.822 mo
405.01 143.97 404.971 144.114 404.921 144.253 cv
424.456 141.737 li
424.338 140.6 li
404.674 142.178 li
404.993 142.664 405.126 143.242 405.034 143.822 cv
cp
f
402.817 145.785 mo
402.786 145.786 402.755 145.792 402.724 145.792 cv
402.019 145.792 401.358 145.462 400.917 144.918 cv
393.324 163.104 li
394.368 163.569 li
401.298 148.981 li
402.817 145.785 li
cp
f
401.352 141.56 mo
401.656 141.34 402.009 141.219 402.372 141.17 cv
390.386 125.459 li
389.461 126.13 li
400.662 142.371 li
400.827 142.056 401.055 141.776 401.352 141.56 cv
cp
f
403.807 142.668 mo
403.375 142.07 402.536 141.937 401.939 142.37 cv
401.339 142.805 401.207 143.642 401.641 144.24 cv
402.075 144.838 402.911 144.971 403.511 144.537 cv
404.108 144.103 404.242 143.266 403.807 142.668 cv
cp
f
357.019 156.497 mo
357.344 156.945 357.971 157.045 358.42 156.719 cv
358.868 156.394 358.968 155.767 358.642 155.318 cv
358.318 154.87 357.69 154.77 357.242 155.095 cv
356.793 155.421 356.694 156.049 357.019 156.497 cv
cp
f
359.744 156.472 mo
374.12 154.62 li
374.031 153.768 li
359.567 154.929 li
359.839 155.411 359.892 155.966 359.744 156.472 cv
cp
f
357.781 157.905 mo
357.24 157.891 356.735 157.651 356.37 157.258 cv
350.784 170.637 li
351.567 170.985 li
356.762 160.05 li
357.781 157.905 li
cp
f
356.655 154.286 mo
356.877 154.124 357.129 154.02 357.392 153.967 cv
348.582 142.419 li
347.889 142.922 li
356.122 154.86 li
356.258 154.638 356.438 154.443 356.655 154.286 cv
cp
f
375.958 184.724 mo
382.886 184.724 li
381.049 126.191 li
378.546 131.482 li
377.565 133.549 li
375.958 184.724 li
cp
f
374.108 188.101 mo
384.737 188.101 li
384.737 187.218 li
384.737 186.272 383.97 185.505 383.024 185.505 cv
382.886 185.505 li
375.958 185.505 li
375.82 185.505 li
374.874 185.505 374.108 186.272 374.108 187.218 cv
374.108 188.101 li
cp
f
385.891 188.976 mo
384.737 188.976 li
374.108 188.976 li
372.954 188.976 li
371.928 188.976 371.096 189.808 371.096 190.834 cv
371.096 194.839 li
375.82 194.839 li
383.024 194.839 li
387.748 194.839 li
387.748 190.834 li
387.748 189.808 386.917 188.976 385.891 188.976 cv
cp
f
400.099 187.196 mo
400.198 187.177 400.301 187.165 400.406 187.165 cv
404.722 187.165 li
404.828 187.165 404.93 187.177 405.03 187.196 cv
403.742 146.166 li
403.72 146.214 li
401.22 151.476 li
400.099 187.196 li
cp
f
398.783 189.569 mo
398.783 189.793 li
406.345 189.793 li
406.345 189.569 li
406.345 188.778 405.779 188.121 405.03 187.977 cv
404.93 187.958 404.828 187.946 404.722 187.946 cv
400.406 187.946 li
400.301 187.946 400.198 187.958 400.099 187.977 cv
399.35 188.121 398.783 188.778 398.783 189.569 cv
cp
f
406.967 190.668 mo
406.345 190.668 li
398.783 190.668 li
398.161 190.668 li
397.322 190.668 396.641 191.349 396.641 192.189 cv
396.641 194.839 li
400.406 194.839 li
404.722 194.839 li
408.488 194.839 li
408.488 192.189 li
408.488 191.349 407.807 190.668 406.967 190.668 cv
cp
f
356.684 162.547 mo
355.861 188.734 li
355.962 188.708 356.059 188.672 356.168 188.672 cv
359.253 188.672 li
359.362 188.672 359.459 188.708 359.56 188.734 cv
358.611 158.491 li
356.684 162.547 li
cp
f
359.253 189.453 mo
356.168 189.453 li
356.059 189.453 355.962 189.49 355.861 189.515 cv
355.301 189.656 354.877 190.14 354.877 190.745 cv
354.877 190.837 li
360.545 190.837 li
360.545 190.745 li
360.545 190.14 360.121 189.656 359.56 189.515 cv
359.459 189.49 359.362 189.453 359.253 189.453 cv
cp
f
360.954 191.712 mo
360.545 191.712 li
354.877 191.712 li
354.467 191.712 li
353.806 191.712 353.271 192.248 353.271 192.909 cv
353.271 194.839 li
356.168 194.839 li
359.253 194.839 li
362.151 194.839 li
362.151 192.909 li
362.151 192.248 361.615 191.712 360.954 191.712 cv
cp
f
63.6842 162.277 mo
63.6842 176.017 52.5456 187.156 38.8056 187.156 cv
25.0655 187.156 13.927 176.017 13.927 162.277 cv
13.927 155.263 16.834 148.932 21.5036 144.409 cv
5.20439 144.409 li
5.20439 146.768 li
16.4097 146.768 li
13.261 151.286 11.5683 156.642 11.5683 162.277 cv
11.5683 177.296 23.7869 189.515 38.8056 189.515 cv
53.8243 189.515 66.0428 177.296 66.0428 162.277 cv
66.0428 156.642 64.3501 151.286 61.2015 146.768 cv
72.4255 146.768 li
72.4255 144.409 li
56.1075 144.409 li
60.7771 148.932 63.6842 155.263 63.6842 162.277 cv
cp
f
5.20439 128.03 mo
5.20439 130.388 li
72.4255 130.388 li
72.4255 128.03 li
5.20439 128.03 li
cp
f
54.9137 145.485 mo
53.831 144.402 li
46.9441 152.224 li
47.6472 152.794 48.2885 153.436 48.8584 154.139 cv
49.1592 154.052 49.454 153.913 49.7127 153.686 cv
54.0708 149.849 li
54.2519 149.689 54.4175 149.518 54.5666 149.339 cv
54.8649 148.979 55.097 148.587 55.2547 148.188 cv
55.4913 147.589 55.5606 146.975 55.4345 146.436 cv
55.3504 146.077 55.1796 145.751 54.9137 145.485 cv
cp
f
40.8254 149.512 mo
41.7312 149.654 42.6048 149.887 43.438 150.207 cv
43.6571 149.981 43.8446 149.712 43.9556 149.383 cv
45.8113 143.881 li
46.4283 142.052 45.8124 140.07 44.3594 139.681 cv
43.2706 139.389 li
43.2706 139.389 43.2707 139.389 43.2707 139.389 cv
42.8804 139.284 li
40.8254 149.512 li
cp
f
46.3946 151.813 mo
46.6678 151.652 46.9233 151.447 47.1174 151.155 cv
50.3338 146.321 li
50.4675 146.12 50.5832 145.912 50.6808 145.7 cv
50.9706 145.07 51.0989 144.407 51.0652 143.802 cv
51.0649 143.796 51.0661 143.79 51.0658 143.784 cv
51.0285 143.174 50.8246 142.624 50.4501 142.229 cv
50.3252 142.097 50.1814 141.982 50.0186 141.888 cv
49.0424 141.324 li
48.6926 141.122 li
44.0641 150.462 li
44.8917 150.831 45.6697 151.287 46.3946 151.813 cv
cp
f
58.1474 149.25 mo
58.1474 149.25 li
57.9454 148.9 li
49.2618 154.678 li
49.7939 155.409 50.254 156.193 50.6255 157.029 cv
50.789 157.025 50.9546 157.005 51.12 156.962 cv
51.191 156.944 51.2609 156.918 51.3315 156.892 cv
51.4095 156.864 51.488 156.839 51.5647 156.801 cv
56.7674 154.223 li
58.4972 153.366 59.4631 151.529 58.711 150.226 cv
58.1474 149.25 li
cp
f
60.86 154.7 mo
60.86 154.7 60.86 154.7 60.86 154.7 cv
60.7555 154.31 li
50.8746 157.642 li
51.1958 158.478 51.4298 159.354 51.5722 160.263 cv
51.6308 160.278 51.6869 160.298 51.7474 160.308 cv
52.0022 160.349 52.2724 160.346 52.5472 160.29 cv
58.2399 159.146 li
60.1327 158.766 61.5411 157.242 61.1518 155.789 cv
60.86 154.7 li
cp
f
62.0697 160.666 mo
62.0697 160.262 li
51.673 160.923 li
51.7193 161.369 51.7445 161.82 51.7445 162.277 cv
51.7445 162.739 51.7183 163.194 51.6712 163.643 cv
51.9435 163.792 52.2525 163.893 52.5932 163.915 cv
58.388 164.283 li
60.3147 164.406 62.0697 163.298 62.0697 161.793 cv
62.0697 160.666 li
cp
f
51.5713 164.297 mo
51.4289 165.203 51.1956 166.077 50.8755 166.91 cv
51.1019 167.129 51.3708 167.316 51.6997 167.427 cv
57.2017 169.283 li
59.031 169.9 61.0129 169.284 61.4023 167.831 cv
61.694 166.742 li
61.694 166.742 61.694 166.742 61.694 166.742 cv
61.7985 166.352 li
51.5713 164.297 li
cp
f
58.8543 173.922 mo
58.9861 173.797 59.1008 173.653 59.1948 173.49 cv
59.7585 172.514 li
59.9604 172.164 li
50.6207 167.536 li
50.2516 168.364 49.7959 169.142 49.2691 169.867 cv
49.4313 170.14 49.6361 170.395 49.9274 170.589 cv
54.7616 173.806 li
55.1634 174.073 55.5944 174.268 56.0266 174.391 cv
56.4588 174.513 56.8922 174.562 57.2989 174.538 cv
57.9089 174.5 58.4588 174.296 58.8543 173.922 cv
cp
f
54.6468 178.906 mo
55.0061 178.822 55.332 178.651 55.5979 178.385 cv
56.395 177.588 li
56.6806 177.303 li
48.8584 170.416 li
48.2886 171.119 47.6473 171.76 46.9443 172.33 cv
47.0311 172.631 47.1694 172.926 47.3972 173.184 cv
51.2342 177.543 li
51.3937 177.724 51.5648 177.889 51.7443 178.038 cv
52.1034 178.337 52.4958 178.569 52.8951 178.726 cv
53.4939 178.963 54.1078 179.032 54.6468 178.906 cv
cp
f
46.4048 172.734 mo
45.6745 173.265 44.8904 173.725 44.0556 174.096 cv
44.0621 174.409 44.129 174.729 44.2815 175.036 cv
46.8598 180.239 li
47.717 181.969 49.5539 182.935 50.8567 182.183 cv
51.8329 181.619 li
51.8328 181.619 li
52.1827 181.417 li
46.4048 172.734 li
cp
f
43.4405 174.346 mo
42.6049 174.668 41.7286 174.902 40.82 175.044 cv
40.8053 175.103 40.7851 175.159 40.7753 175.219 cv
40.7361 175.461 40.7406 175.718 40.7881 175.979 cv
40.7906 175.992 40.7898 176.005 40.7926 176.019 cv
41.9364 181.712 li
42.3168 183.604 43.8411 185.013 45.2941 184.624 cv
46.383 184.332 li
46.3829 184.332 46.3829 184.332 46.3829 184.332 cv
46.7731 184.227 li
43.4405 174.346 li
cp
f
39.2894 185.542 mo
40.4167 185.542 li
40.8205 185.542 li
40.1594 175.145 li
39.7143 175.191 39.2629 175.216 38.8055 175.216 cv
38.3476 175.216 37.8957 175.191 37.4501 175.145 cv
37.3 175.418 37.19 175.723 37.1683 176.065 cv
36.7998 181.86 li
36.6773 183.786 37.7851 185.542 39.2894 185.542 cv
cp
f
33.2517 184.874 mo
34.7307 185.27 li
36.7857 175.043 li
35.8741 174.9 34.9949 174.665 34.157 174.341 cv
33.9408 174.567 33.7654 174.846 33.6556 175.172 cv
31.7998 180.673 li
31.1828 182.503 31.7987 184.485 33.2517 184.874 cv
cp
f
27.5925 182.667 mo
28.9185 183.432 li
33.547 174.092 li
32.7136 173.721 31.9306 173.261 31.2013 172.73 cv
30.9318 172.892 30.6856 173.111 30.4938 173.399 cv
27.2773 178.233 li
26.2078 179.841 26.2898 181.914 27.5925 182.667 cv
cp
f
30.667 172.33 mo
29.9634 171.76 29.3218 171.118 28.7516 170.415 cv
28.6954 170.431 28.6379 170.433 28.5825 170.454 cv
28.3412 170.546 28.1088 170.684 27.8984 170.869 cv
23.5403 174.706 li
22.0914 175.982 21.6338 178.006 22.6974 179.07 cv
23.4945 179.867 li
23.4944 179.867 23.4944 179.867 23.4943 179.867 cv
23.7801 180.152 li
30.667 172.33 li
cp
f
28.3493 169.877 mo
27.8193 169.149 27.3609 168.367 26.9902 167.535 cv
26.931 167.536 26.8743 167.523 26.8146 167.53 cv
26.5578 167.556 26.2975 167.629 26.0464 167.753 cv
20.8437 170.332 li
19.1139 171.189 18.148 173.026 18.9001 174.328 cv
19.4637 175.305 li
19.4637 175.305 19.4637 175.305 19.4637 175.305 cv
19.6657 175.654 li
28.3493 169.877 li
cp
f
16.7511 169.855 mo
16.7511 169.855 16.7511 169.855 16.7511 169.855 cv
16.8556 170.245 li
26.7365 166.912 li
26.4153 166.077 26.1813 165.2 26.0389 164.292 cv
25.7335 164.215 25.4039 164.196 25.0639 164.264 cv
19.3711 165.408 li
17.4784 165.789 16.07 167.313 16.4593 168.766 cv
16.7511 169.855 li
cp
f
15.5414 163.888 mo
15.5414 164.292 li
25.9381 163.631 li
25.8918 163.186 25.8666 162.735 25.8666 162.277 cv
25.8666 161.814 25.8932 161.357 25.9407 160.907 cv
25.7808 160.82 25.6085 160.748 25.423 160.702 cv
25.2931 160.67 25.1577 160.649 25.0178 160.64 cv
19.223 160.272 li
17.2964 160.149 15.5414 161.257 15.5414 162.761 cv
15.5414 163.888 li
cp
f
16.2088 156.723 mo
15.8125 158.202 li
26.0398 160.257 li
26.1831 159.346 26.4183 158.467 26.7414 157.629 cv
26.5162 157.413 26.237 157.237 25.9114 157.127 cv
20.4094 155.272 li
18.5801 154.655 16.5982 155.27 16.2088 156.723 cv
cp
f
18.4162 151.064 mo
17.6507 152.39 li
26.9904 157.019 li
27.3608 156.188 27.8185 155.407 28.3478 154.68 cv
28.3162 154.627 28.298 154.57 28.2615 154.519 cv
28.1104 154.31 27.917 154.121 27.6836 153.966 cv
22.8495 150.749 li
21.2422 149.68 19.1684 149.762 18.4162 151.064 cv
cp
f
22.0132 146.169 mo
21.216 146.966 li
20.9305 147.252 li
28.7526 154.139 li
29.3229 153.435 29.9648 152.794 30.6683 152.223 cv
30.6521 152.167 30.6498 152.11 30.6288 152.054 cv
30.537 151.813 30.3991 151.581 30.2139 151.37 cv
26.3769 147.012 li
25.1012 145.563 23.0768 145.106 22.0132 146.169 cv
cp
f
31.2062 151.821 mo
31.9342 151.291 32.7159 150.833 33.5476 150.462 cv
33.5465 150.403 33.5594 150.346 33.5533 150.286 cv
33.5322 150.08 33.4717 149.872 33.3875 149.667 cv
33.3671 149.617 33.3538 149.567 33.3296 149.518 cv
30.7513 144.315 li
29.8941 142.586 28.0572 141.62 26.7544 142.372 cv
25.7782 142.935 li
25.7782 142.935 25.7782 142.935 25.7783 142.935 cv
25.4284 143.137 li
31.2062 151.821 li
cp
f
34.1706 150.208 mo
35.0062 149.887 35.8825 149.653 36.7912 149.511 cv
36.8677 149.205 36.8869 148.876 36.8185 148.536 cv
35.6746 142.843 li
35.2943 140.95 33.77 139.542 32.317 139.931 cv
31.2281 140.223 li
31.2282 140.223 31.2282 140.223 31.2283 140.223 cv
30.838 140.327 li
34.1706 150.208 li
cp
f
38.8055 149.338 mo
39.2678 149.338 39.7238 149.365 40.1736 149.412 cv
40.261 149.252 40.3346 149.081 40.3806 148.895 cv
40.4128 148.765 40.4339 148.629 40.4428 148.49 cv
40.8113 142.695 li
40.9338 140.768 39.826 139.013 38.3217 139.013 cv
37.1944 139.013 li
36.7905 139.013 li
37.4516 149.41 li
37.8968 149.364 38.3481 149.338 38.8055 149.338 cv
cp
f
37.6278 171.629 mo
37.6278 170.978 38.1551 170.451 38.8055 170.451 cv
39.456 170.451 39.9833 170.978 39.9833 171.629 cv
39.9833 172.279 39.456 172.806 38.8055 172.806 cv
38.1551 172.806 37.6278 172.279 37.6278 171.629 cv
cp
32.3473 162.277 mo
32.3473 158.711 35.2388 155.819 38.8055 155.819 cv
42.3724 155.819 45.2638 158.711 45.2638 162.277 cv
45.2638 165.844 42.3724 168.736 38.8055 168.736 cv
35.2388 168.736 32.3473 165.844 32.3473 162.277 cv
cp
32.9406 169.687 mo
32.4806 170.147 31.7349 170.147 31.2749 169.687 cv
30.815 169.227 30.815 168.481 31.2749 168.022 cv
31.7349 167.562 32.4806 167.562 32.9406 168.022 cv
33.4005 168.481 33.4005 169.227 32.9406 169.687 cv
cp
29.3334 163.334 mo
28.683 163.334 28.1556 162.807 28.1556 162.157 cv
28.1556 161.506 28.683 160.979 29.3334 160.979 cv
29.9839 160.979 30.5112 161.506 30.5112 162.157 cv
30.5112 162.807 29.9839 163.334 29.3334 163.334 cv
cp
31.2749 154.626 mo
31.7349 154.166 32.4806 154.166 32.9406 154.626 cv
33.4005 155.086 33.4005 155.832 32.9406 156.292 cv
32.4806 156.752 31.7349 156.752 31.2749 156.292 cv
30.815 155.832 30.815 155.086 31.2749 154.626 cv
cp
38.8055 151.507 mo
39.456 151.507 39.9833 152.034 39.9833 152.684 cv
39.9833 153.335 39.456 153.862 38.8055 153.862 cv
38.1551 153.862 37.6278 153.335 37.6278 152.684 cv
37.6278 152.034 38.1551 151.507 38.8055 151.507 cv
cp
44.6705 154.626 mo
45.1305 154.166 45.8762 154.166 46.3362 154.626 cv
46.7961 155.086 46.7961 155.832 46.3362 156.292 cv
45.8762 156.752 45.1305 156.752 44.6705 156.292 cv
44.2106 155.832 44.2106 155.086 44.6705 154.626 cv
cp
48.2777 160.979 mo
48.9281 160.979 49.4554 161.506 49.4554 162.157 cv
49.4554 162.807 48.9281 163.334 48.2777 163.334 cv
47.6272 163.334 47.0999 162.807 47.0999 162.157 cv
47.0999 161.506 47.6272 160.979 48.2777 160.979 cv
cp
46.3362 169.687 mo
45.8762 170.147 45.1305 170.147 44.6705 169.687 cv
44.2106 169.227 44.2106 168.481 44.6705 168.022 cv
45.1305 167.562 45.8762 167.562 46.3362 168.022 cv
46.7961 168.481 46.7961 169.227 46.3362 169.687 cv
cp
50.5815 162.277 mo
50.5815 155.774 45.3092 150.501 38.8055 150.501 cv
32.3019 150.501 27.0296 155.774 27.0296 162.277 cv
27.0296 168.781 32.3019 174.053 38.8055 174.053 cv
45.3092 174.053 50.5815 168.781 50.5815 162.277 cv
cp
f
42.4502 162.277 mo
42.4502 160.264 40.8185 158.633 38.8055 158.633 cv
36.7926 158.633 35.1608 160.264 35.1608 162.277 cv
35.1608 164.29 36.7926 165.922 38.8055 165.922 cv
40.8185 165.922 42.4502 164.29 42.4502 162.277 cv
cp
f
47.7475 132.549 mo
46.9209 134.085 li
44.2917 133.329 41.5735 132.927 38.8056 132.927 cv
32.3545 132.927 26.2329 134.981 21.1025 138.866 cv
22.9131 141.257 li
27.5185 137.77 33.0137 135.927 38.8056 135.927 cv
41.073 135.927 43.3054 136.216 45.4708 136.781 cv
44.857 137.922 li
56.3266 140.628 li
47.7475 132.549 li
cp
f
161.655 63.7167 mo
161.655 65.9496 159.839 67.7661 157.606 67.7661 cv
121.372 67.7661 li
119.139 67.7661 117.323 65.9496 117.323 63.7167 cv
117.323 27.4828 li
117.323 25.2499 119.139 23.4335 121.372 23.4335 cv
157.606 23.4335 li
159.839 23.4335 161.655 25.2499 161.655 27.4828 cv
161.655 63.7167 li
cp
157.606 21.9335 mo
121.372 21.9335 li
118.312 21.9335 115.823 24.4228 115.823 27.4828 cv
115.823 63.7167 li
115.823 66.7768 118.312 69.2661 121.372 69.2661 cv
157.606 69.2661 li
160.666 69.2661 163.155 66.7768 163.155 63.7167 cv
163.155 27.4828 li
163.155 24.4228 160.666 21.9335 157.606 21.9335 cv
cp
f
154.39 59.2133 mo
154.39 59.9228 153.812 60.5004 153.103 60.5004 cv
125.875 60.5004 li
125.166 60.5004 124.588 59.9228 124.588 59.2133 cv
124.588 31.9858 li
124.588 31.2763 125.166 30.6987 125.875 30.6987 cv
153.103 30.6987 li
153.812 30.6987 154.39 31.2763 154.39 31.9858 cv
154.39 59.2133 li
cp
153.103 29.1987 mo
125.875 29.1987 li
124.338 29.1987 123.088 30.4492 123.088 31.9858 cv
123.088 59.2133 li
123.088 60.7499 124.338 62.0004 125.875 62.0004 cv
153.103 62.0004 li
154.64 62.0004 155.89 60.7499 155.89 59.2133 cv
155.89 31.9858 li
155.89 30.4492 154.64 29.1987 153.103 29.1987 cv
cp
f
133.851 43.5563 mo
132.722 43.5563 131.808 44.4712 131.808 45.5997 cv
131.808 46.7281 132.722 47.6429 133.851 47.6429 cv
134.979 47.6429 135.894 46.7281 135.894 45.5997 cv
135.894 44.4712 134.979 43.5563 133.851 43.5563 cv
cp
f
145.127 43.5563 mo
143.999 43.5563 143.084 44.4712 143.084 45.5997 cv
143.084 46.7281 143.999 47.6429 145.127 47.6429 cv
146.255 47.6429 147.17 46.7281 147.17 45.5997 cv
147.17 44.4712 146.255 43.5563 145.127 43.5563 cv
cp
f
138.734 44.3797 mo
140.709 46.3549 li
141.053 45.8004 140.987 45.0642 140.506 44.5829 cv
140.024 44.1017 139.288 44.0361 138.734 44.3797 cv
cp
f
140.244 46.8196 mo
138.269 44.8444 li
137.925 45.3989 137.991 46.1351 138.472 46.6164 cv
138.954 47.0977 139.69 47.1632 140.244 46.8196 cv
cp
f
139.489 56.3099 mo
133.583 56.3099 128.778 51.5054 128.778 45.5994 cv
128.778 39.6938 133.583 34.8893 139.489 34.8893 cv
145.395 34.8893 150.2 39.6938 150.2 45.5994 cv
150.2 51.5054 145.395 56.3099 139.489 56.3099 cv
cp
139.489 33.0731 mo
132.581 33.0731 126.962 38.6922 126.962 45.5994 cv
126.962 52.5067 132.581 58.1262 139.489 58.1262 cv
146.397 58.1262 152.016 52.5067 152.016 45.5994 cv
152.016 38.6922 146.397 33.0731 139.489 33.0731 cv
cp
f
140.432 35.9374 mo
140.121 35.9073 139.807 35.8896 139.489 35.8896 cv
139.171 35.8896 138.856 35.9073 138.546 35.9374 cv
138.546 38.9202 li
140.432 38.9202 li
140.432 35.9374 li
cp
f
138.546 55.2622 mo
138.856 55.2923 139.171 55.31 139.489 55.31 cv
139.807 55.31 140.121 55.2923 140.432 55.2622 cv
140.432 52.245 li
138.546 52.245 li
138.546 55.2622 li
cp
f
177.405 77.7542 mo
181.938 77.7542 li
181.938 57.5448 li
177.405 57.5448 li
177.405 77.7542 li
cp
f
184.835 29.8036 mo
184.835 29.3021 184.428 28.8956 183.927 28.8956 cv
175.451 28.8956 li
174.949 28.8956 174.542 29.3021 174.542 29.8036 cv
174.542 30.3052 174.949 30.7118 175.451 30.7118 cv
183.927 30.7118 li
184.428 30.7118 184.835 30.3052 184.835 29.8036 cv
cp
f
183.314 33.0389 mo
183.314 32.5374 182.907 32.1308 182.405 32.1308 cv
176.661 32.1308 li
176.16 32.1308 175.753 32.5374 175.753 33.0389 cv
175.753 33.5405 176.16 33.9471 176.661 33.9471 cv
182.405 33.9471 li
182.907 33.9471 183.314 33.5405 183.314 33.0389 cv
cp
f
177.847 35.366 mo
177.345 35.366 176.938 35.7726 176.938 36.2742 cv
176.938 36.7757 177.345 37.1823 177.847 37.1823 cv
181.497 37.1823 li
181.999 37.1823 182.405 36.7757 182.405 36.2742 cv
182.405 35.7726 181.999 35.366 181.497 35.366 cv
177.847 35.366 li
cp
f
167.929 19.2975 mo
167.929 21.8007 li
191.419 21.8007 li
191.419 19.2975 li
167.929 19.2975 li
cp
f
170.571 28.4464 mo
170.571 22.8007 li
169.071 22.8007 li
169.071 28.7349 li
174.673 42.7597 li
176.288 42.7597 li
170.571 28.4464 li
cp
f
188.777 28.4464 mo
183.06 42.7597 li
184.676 42.7597 li
190.277 28.7349 li
190.277 22.8007 li
188.777 22.8007 li
188.777 28.4464 li
cp
f
175.753 9.04828 mo
174.638 8.28137 173.5 8.10138 172.319 9.04828 cv
172.319 18.2978 li
175.753 18.2978 li
175.753 9.04828 li
cp
f
187.029 9.04828 mo
185.914 8.28137 184.776 8.10138 183.595 9.04828 cv
183.595 18.2978 li
187.029 18.2978 li
187.029 9.04828 li
cp
f
175.327 45.7438 mo
177.969 45.7438 li
178.287 45.7438 178.55 46.0071 178.55 46.325 cv
178.55 46.6519 178.287 46.9152 177.969 46.9152 cv
175.327 46.9152 li
175.327 48.0686 li
177.969 48.0686 li
178.287 48.0686 178.55 48.3319 178.55 48.6589 cv
178.55 48.9767 178.287 49.2401 177.969 49.2401 cv
175.327 49.2401 li
175.327 50.3934 li
177.969 50.3934 li
178.287 50.3934 178.55 50.6568 178.55 50.9838 cv
178.55 51.3107 178.287 51.574 177.969 51.574 cv
175.327 51.574 li
175.327 52.7274 li
177.969 52.7274 li
178.287 52.7274 178.55 52.9816 178.55 53.3086 cv
178.55 53.6355 178.287 53.8988 177.969 53.8988 cv
175.327 53.8988 li
175.327 54.2621 li
175.327 56.3962 177.061 56.369 179.195 56.369 cv
180.158 56.369 li
182.292 56.369 184.017 56.3962 184.017 54.2621 cv
184.017 53.8988 li
181.384 53.8988 li
181.057 53.8988 180.793 53.6355 180.793 53.3086 cv
180.793 52.9816 181.057 52.7274 181.384 52.7274 cv
184.017 52.7274 li
184.017 51.574 li
181.384 51.574 li
181.057 51.574 180.793 51.3107 180.793 50.9838 cv
180.793 50.6568 181.057 50.3934 181.384 50.3934 cv
184.017 50.3934 li
184.017 49.2401 li
181.384 49.2401 li
181.057 49.2401 180.793 48.9767 180.793 48.6589 cv
180.793 48.3319 181.057 48.0686 181.384 48.0686 cv
184.017 48.0686 li
184.017 46.9152 li
181.384 46.9152 li
181.057 46.9152 180.793 46.6519 180.793 46.325 cv
180.793 46.0071 181.057 45.7438 181.384 45.7438 cv
184.017 45.7438 li
184.017 44.0092 li
175.327 44.0092 li
175.327 45.7438 li
cp
f
292.97 180.292 mo
292.773 180.632 292.19 181.423 291.012 181.423 cv
236.618 181.423 li
235.441 181.423 234.857 180.632 234.661 180.293 cv
234.465 179.953 234.072 179.052 234.66 178.032 cv
261.858 130.925 li
262.446 129.906 263.422 129.795 263.815 129.795 cv
264.207 129.795 265.183 129.906 265.773 130.925 cv
292.97 178.032 li
293.559 179.052 293.166 179.952 292.97 180.292 cv
cp
296.929 175.746 mo
269.732 128.639 li
268.497 126.5 266.285 125.223 263.815 125.223 cv
261.344 125.223 259.133 126.5 257.898 128.639 cv
230.701 175.746 li
229.465 177.886 229.465 180.44 230.701 182.579 cv
231.936 184.718 234.148 185.995 236.618 185.995 cv
291.012 185.995 li
293.482 185.995 295.694 184.718 296.929 182.578 cv
298.164 180.439 298.164 177.885 296.929 175.746 cv
cp
f
261.493 143.542 mo
257.604 157.015 li
260.606 156.768 li
257.333 165.707 li
260.919 164.926 li
257.099 178.87 li
270.179 160.335 li
265.425 161.229 li
269.464 152.855 li
265.263 153.783 li
270.531 142.63 li
261.493 143.542 li
cp
f
11.6537 361.731 mo
11.8251 361.731 li
14.7695 361.731 li
14.8614 361.731 li
15.0421 361.731 15.2193 361.682 15.3744 361.589 cv
19.1596 359.326 li
19.4614 359.145 19.6462 358.82 19.6462 358.468 cv
19.6462 356.124 li
19.6462 355.572 19.1987 355.124 18.6467 355.124 cv
15.9311 355.124 li
11.8251 355.124 li
11.6537 355.124 li
11.1017 355.124 10.6543 355.572 10.6543 356.124 cv
10.6543 360.731 li
10.6543 361.283 11.1017 361.731 11.6537 361.731 cv
cp
f
19.1633 360.844 mo
19.3577 361.119 19.4621 361.447 19.4621 361.784 cv
19.4621 364.883 li
19.4621 365.731 18.7747 366.419 17.9267 366.419 cv
17.7328 366.419 li
16.8164 364.552 16.5512 363.009 16.9357 361.821 cv
15.8952 362.443 li
15.7789 363.586 16.0708 364.919 16.7525 366.419 cv
14.7695 366.419 li
14.7695 362.73 li
11.8251 362.73 li
11.8251 367.109 li
14.4704 367.109 li
14.7695 367.109 li
18.1567 367.109 li
19.3605 367.109 20.3363 366.133 20.3363 364.929 cv
20.3363 361.482 li
20.3363 361.067 20.2449 360.658 20.0686 360.282 cv
19.9278 359.983 li
19.8454 360.053 19.7676 360.128 19.6733 360.185 cv
18.987 360.595 li
19.1633 360.844 li
cp
f
14.7063 348.507 mo
14.7063 348.25 14.7745 347.996 14.9039 347.773 cv
18.9133 340.865 li
17.4807 340.034 li
13.4709 346.943 li
13.1952 347.418 13.0501 347.958 13.0501 348.507 cv
13.0501 352.055 li
14.7063 352.055 li
14.7063 348.507 li
cp
f
21.0302 381.658 mo
17.405 381.78 16.3096 388.008 15.8775 395.22 cv
15.5661 400.413 15.2133 406.299 13.4109 407.531 cv
11.7207 408.684 6.98222 406.86 4.06609 403.163 cv
2.13536 400.715 -1.42909 394.182 7.14507 386.412 cv
15.254 379.063 13.944 368.338 13.8857 367.891 cv
12.264 367.891 li
12.277 367.991 13.5069 378.412 6.03282 385.185 cv
-.633071 391.226 -1.85451 398.33 2.76567 404.189 cv
5.31175 407.417 9.20781 409.515 12.0731 409.515 cv
12.9494 409.515 13.7298 409.318 14.3453 408.898 cv
16.818 407.209 17.1642 401.434 17.5308 395.319 cv
17.8494 390.002 18.9119 383.363 21.0302 383.291 cv
21.0302 381.658 li
cp
f
15.9311 353.425 mo
15.9311 353.112 15.6778 352.859 15.3653 352.859 cv
12.3909 352.859 li
12.0784 352.859 11.8251 353.112 11.8251 353.425 cv
11.8251 354.101 li
15.9311 354.101 li
15.9311 353.425 li
cp
f
56.0599 353.525 mo
56.0599 354.934 li
56.0599 365.504 li
56.0599 366.771 li
56.0599 375.775 li
51.1797 375.775 li
26.8905 375.775 li
26.8905 350.826 li
26.8905 348.926 28.4358 347.381 30.3354 347.381 cv
51.1797 347.381 li
52.615 347.381 li
54.5146 347.381 56.0599 348.926 56.0599 350.826 cv
56.0599 353.525 li
cp
52.615 346.665 mo
51.1797 346.665 li
30.3354 346.665 li
28.0411 346.665 26.1747 348.531 26.1747 350.826 cv
26.1747 376.491 li
51.1797 376.491 li
56.7757 376.491 li
56.7757 366.771 li
56.7757 365.504 li
56.7757 354.934 li
56.7757 353.525 li
56.7757 350.826 li
56.7757 348.531 54.9093 346.665 52.615 346.665 cv
cp
f
39.8136 358.96 mo
36.1255 355.176 li
36.1261 355.175 li
34.8976 354.829 li
35.2121 356.066 li
35.2128 356.066 li
38.9009 359.85 li
38.1042 361.036 38.2168 362.657 39.2542 363.722 cv
40.4441 364.943 42.3985 364.968 43.6194 363.778 cv
44.8403 362.588 44.8654 360.633 43.6753 359.413 cv
42.638 358.348 41.0204 358.194 39.8136 358.96 cv
cp
f
51.6264 361.563 mo
51.6264 361.675 51.6133 361.784 51.6097 361.895 cv
53.366 361.895 li
53.3532 362.357 53.3053 362.811 53.241 363.259 cv
52.334 363.115 li
52.3185 363.225 52.3027 363.334 52.284 363.443 cv
53.1853 363.586 li
53.0978 364.095 52.9867 364.595 52.8365 365.08 cv
51.9702 364.798 li
51.9375 364.905 51.8949 365.006 51.8592 365.111 cv
52.7293 365.393 li
52.7165 365.431 52.7004 365.467 52.6873 365.504 cv
52.5339 365.938 52.3569 366.361 52.1562 366.771 cv
52.1499 366.784 52.1447 366.797 52.1384 366.81 cv
52.0617 366.771 li
51.3244 366.395 li
51.2756 366.495 51.232 366.597 51.1804 366.694 cv
51.3312 366.771 li
51.9955 367.109 li
51.7552 367.563 51.4789 367.994 51.1838 368.411 cv
51.1797 368.408 li
50.4496 367.878 li
50.3858 367.968 50.3174 368.055 50.2509 368.144 cv
50.9897 368.68 li
50.7156 369.046 50.4285 369.401 50.1147 369.733 cv
48.8766 368.495 li
48.7252 368.657 48.569 368.813 48.4073 368.964 cv
49.6453 370.202 li
49.3138 370.516 48.9585 370.803 48.593 371.077 cv
48.0561 370.339 li
47.9678 370.405 47.8811 370.473 47.7906 370.537 cv
48.3241 371.271 li
47.9069 371.566 47.4761 371.843 47.022 372.083 cv
46.6066 371.268 li
46.5091 371.32 46.4069 371.363 46.3077 371.412 cv
46.7224 372.226 li
46.2655 372.452 45.7939 372.651 45.3063 372.817 cv
45.0235 371.947 li
44.9187 371.983 44.8171 372.025 44.7107 372.058 cv
44.9922 372.924 li
44.5076 373.074 44.0069 373.186 43.498 373.273 cv
43.3552 372.372 li
43.2465 372.39 43.1368 372.406 43.027 372.422 cv
43.1706 373.329 li
42.7228 373.393 42.2696 373.441 41.8071 373.454 cv
41.8071 371.697 li
41.696 371.701 41.5873 371.714 41.4751 371.714 cv
41.3631 371.714 41.2544 371.701 41.1433 371.697 cv
41.1433 373.454 li
40.6807 373.441 40.2276 373.393 39.7798 373.329 cv
39.9234 372.422 li
39.8136 372.406 39.7039 372.39 39.5952 372.372 cv
39.4524 373.273 li
38.9435 373.186 38.4429 373.074 37.9582 372.924 cv
38.2396 372.058 li
38.1333 372.025 38.0317 371.983 37.9269 371.947 cv
37.6441 372.817 li
37.1565 372.651 36.6849 372.452 36.228 372.226 cv
36.6427 371.412 li
36.5435 371.363 36.4413 371.32 36.3438 371.268 cv
35.9285 372.083 li
35.4743 371.843 35.0434 371.566 34.6263 371.271 cv
35.1597 370.537 li
35.0693 370.473 34.9826 370.405 34.8943 370.339 cv
34.3574 371.077 li
33.992 370.803 33.6366 370.516 33.3052 370.203 cv
34.5433 368.964 li
34.3815 368.813 34.2253 368.657 34.0738 368.495 cv
32.8359 369.733 li
32.522 369.402 32.2349 369.046 31.9607 368.68 cv
32.6995 368.144 li
32.633 368.055 32.5646 367.968 32.5008 367.878 cv
31.7666 368.411 li
31.4715 367.994 31.1951 367.563 30.9549 367.109 cv
31.77 366.694 li
31.7184 366.597 31.6747 366.495 31.626 366.395 cv
30.8121 366.81 li
30.5863 366.353 30.3874 365.881 30.2211 365.393 cv
31.0912 365.111 li
31.0554 365.006 31.0129 364.905 30.9802 364.798 cv
30.1139 365.08 li
29.9637 364.595 29.8526 364.095 29.765 363.586 cv
30.6664 363.443 li
30.6476 363.334 30.6319 363.225 30.6163 363.115 cv
29.7093 363.259 li
29.6451 362.811 29.5972 362.357 29.5844 361.895 cv
31.3407 361.895 li
31.3371 361.784 31.324 361.675 31.324 361.563 cv
31.324 361.451 31.3371 361.342 31.3407 361.231 cv
29.5844 361.231 li
29.5972 360.768 29.6451 360.315 29.7093 359.867 cv
30.6163 360.011 li
30.6319 359.901 30.6476 359.791 30.6664 359.683 cv
29.765 359.54 li
29.8526 359.031 29.9637 358.53 30.1139 358.046 cv
30.9802 358.327 li
31.0129 358.221 31.0554 358.12 31.0912 358.015 cv
30.2211 357.732 li
30.3874 357.245 30.5863 356.773 30.8121 356.316 cv
31.626 356.73 li
31.6747 356.631 31.7182 356.529 31.7699 356.432 cv
30.9549 356.016 li
31.1951 355.562 31.4715 355.132 31.7666 354.715 cv
32.5008 355.248 li
32.5646 355.157 32.633 355.071 32.6995 354.982 cv
31.9607 354.445 li
32.2349 354.08 32.522 353.724 32.8359 353.393 cv
34.0738 354.631 li
34.2253 354.469 34.3815 354.313 34.5432 354.161 cv
33.3052 352.923 li
33.6366 352.61 33.9919 352.323 34.3574 352.048 cv
34.8942 352.787 li
34.9826 352.721 35.0693 352.653 35.1597 352.589 cv
34.6263 351.855 li
35.0434 351.559 35.4743 351.283 35.9285 351.043 cv
36.3437 351.858 li
36.4413 351.806 36.5434 351.763 36.6426 351.714 cv
36.228 350.9 li
36.6849 350.674 37.1564 350.475 37.644 350.309 cv
37.9268 351.179 li
38.0317 351.143 38.1333 351.101 38.2396 351.068 cv
37.9582 350.202 li
38.4428 350.051 38.9435 349.94 39.4524 349.853 cv
39.5951 350.754 li
39.7039 350.735 39.8136 350.72 39.9234 350.704 cv
39.7798 349.797 li
40.2276 349.733 40.6807 349.685 41.1433 349.672 cv
41.1433 351.428 li
41.2544 351.425 41.3631 351.412 41.4751 351.412 cv
41.5873 351.412 41.696 351.425 41.8071 351.428 cv
41.8071 349.672 li
42.2696 349.685 42.7228 349.733 43.1706 349.797 cv
43.027 350.704 li
43.1368 350.72 43.2465 350.735 43.3553 350.754 cv
43.498 349.853 li
44.0069 349.94 44.5076 350.051 44.9922 350.202 cv
44.7108 351.068 li
44.8171 351.101 44.9187 351.143 45.0236 351.179 cv
45.3063 350.309 li
45.7939 350.475 46.2655 350.674 46.7224 350.9 cv
46.3078 351.714 li
46.407 351.763 46.5091 351.806 46.6066 351.858 cv
47.022 351.043 li
47.4761 351.283 47.9069 351.559 48.3241 351.855 cv
47.7907 352.589 li
47.8811 352.653 47.9678 352.721 48.0562 352.787 cv
48.593 352.048 li
48.9585 352.323 49.3138 352.61 49.6453 352.923 cv
48.4073 354.161 li
48.569 354.313 48.7252 354.469 48.8766 354.631 cv
50.1147 353.393 li
50.4285 353.724 50.7156 354.08 50.9897 354.445 cv
50.2509 354.982 li
50.3174 355.071 50.3858 355.157 50.4496 355.248 cv
51.1838 354.715 li
51.2345 354.786 51.2809 354.861 51.3305 354.934 cv
51.5691 355.283 51.7966 355.64 51.9955 356.016 cv
51.1805 356.432 li
51.2322 356.529 51.2756 356.631 51.3244 356.73 cv
52.1384 356.316 li
52.3641 356.773 52.563 357.245 52.7293 357.732 cv
51.8592 358.015 li
51.8949 358.12 51.9375 358.221 51.9702 358.327 cv
52.8365 358.046 li
52.9867 358.53 53.0978 359.031 53.1853 359.54 cv
52.284 359.683 li
52.3027 359.791 52.3185 359.901 52.334 360.011 cv
53.241 359.867 li
53.3053 360.315 53.3532 360.768 53.366 361.231 cv
51.6097 361.231 li
51.6133 361.342 51.6264 361.451 51.6264 361.563 cv
cp
52.7314 366.81 mo
52.6546 366.771 li
52.7492 366.771 li
52.7429 366.784 52.7377 366.797 52.7314 366.81 cv
cp
53.9026 359.762 mo
53.918 359.76 li
53.8661 359.432 li
53.8523 359.434 li
53.759 358.89 53.6435 358.354 53.4824 357.836 cv
53.4827 357.836 li
53.4816 357.833 li
53.4805 357.829 53.4792 357.826 53.4781 357.822 cv
53.3802 357.521 li
53.3691 357.524 li
53.1915 357.003 52.9789 356.499 52.7371 356.011 cv
52.7518 356.003 li
52.6013 355.708 li
52.593 355.712 li
52.4523 355.446 52.2999 355.187 52.1404 354.934 cv
52.009 354.725 51.8735 354.518 51.7308 354.317 cv
51.7433 354.308 li
51.5482 354.04 li
51.532 354.051 li
50.8088 353.086 49.9526 352.229 48.9869 351.506 cv
48.9988 351.49 li
48.7305 351.295 li
48.7215 351.308 li
48.2759 350.992 47.8121 350.702 47.3263 350.445 cv
47.3304 350.437 li
47.0348 350.287 li
47.0275 350.301 li
46.5394 350.059 46.0355 349.847 45.5142 349.669 cv
45.5179 349.658 li
45.2159 349.56 li
45.2124 349.559 45.2089 349.558 45.2054 349.557 cv
45.2021 349.555 li
45.2021 349.556 li
44.6842 349.395 44.1476 349.279 43.6036 349.186 cv
43.6058 349.172 li
43.2778 349.12 li
43.2754 349.135 li
42.6858 349.05 42.0879 348.991 41.4751 348.991 cv
40.8624 348.991 40.2646 349.05 39.675 349.135 cv
39.6727 349.12 li
39.3446 349.172 li
39.3468 349.186 li
38.8028 349.279 38.2662 349.395 37.7483 349.556 cv
37.7483 349.555 li
37.745 349.557 li
37.7414 349.558 37.738 349.559 37.7345 349.56 cv
37.4325 349.658 li
37.4362 349.669 li
36.9149 349.847 36.411 350.059 35.9229 350.301 cv
35.9155 350.287 li
35.6199 350.437 li
35.6241 350.445 li
35.1384 350.702 34.6745 350.992 34.2289 351.308 cv
34.22 351.295 li
33.9516 351.49 li
33.9635 351.506 li
33.5251 351.835 33.1045 352.184 32.7129 352.566 cv
32.7034 352.556 li
32.4686 352.791 li
32.4782 352.801 li
32.0967 353.192 31.7467 353.613 31.4184 354.051 cv
31.4022 354.04 li
31.207 354.308 li
31.2197 354.317 li
30.9039 354.763 30.6139 355.226 30.3574 355.712 cv
30.3491 355.708 li
30.1987 356.003 li
30.2132 356.011 li
29.9715 356.499 29.759 357.003 29.5813 357.524 cv
29.5702 357.521 li
29.4722 357.822 li
29.4712 357.826 29.4699 357.829 29.4688 357.833 cv
29.4677 357.836 li
29.4679 357.836 li
29.3069 358.354 29.1915 358.89 29.0981 359.434 cv
29.0843 359.432 li
29.0324 359.76 li
29.0478 359.762 li
28.9626 360.352 28.9037 360.95 28.9037 361.563 cv
28.9037 362.176 28.9626 362.774 29.0478 363.363 cv
29.0324 363.366 li
29.0843 363.694 li
29.0981 363.692 li
29.1915 364.236 29.3069 364.772 29.4679 365.29 cv
29.4677 365.29 li
29.4688 365.293 li
29.4699 365.297 29.4712 365.3 29.4722 365.304 cv
29.5702 365.605 li
29.5813 365.601 li
29.759 366.123 29.9715 366.627 30.2132 367.115 cv
30.1987 367.123 li
30.3491 367.418 li
30.3574 367.414 li
30.6139 367.899 30.9039 368.363 31.2197 368.809 cv
31.207 368.818 li
31.4022 369.086 li
31.4184 369.074 li
31.7467 369.513 32.0967 369.934 32.4782 370.325 cv
32.4686 370.335 li
32.7034 370.569 li
32.7129 370.56 li
33.1045 370.941 33.5251 371.291 33.9635 371.62 cv
33.9516 371.636 li
34.22 371.83 li
34.2289 371.818 li
34.6745 372.134 35.1384 372.424 35.6241 372.681 cv
35.6199 372.689 li
35.9155 372.839 li
35.9229 372.825 li
36.411 373.066 36.9149 373.279 37.4362 373.456 cv
37.4325 373.468 li
37.7345 373.566 li
37.738 373.567 37.7414 373.568 37.745 373.569 cv
37.7483 373.57 li
37.7483 373.57 li
38.2662 373.731 38.8028 373.847 39.3468 373.94 cv
39.3446 373.953 li
39.6727 374.005 li
39.675 373.99 li
40.2107 374.068 40.7542 374.119 41.3092 374.126 cv
41.3092 374.134 li
41.6412 374.134 li
41.6412 374.126 li
42.1962 374.119 42.7397 374.068 43.2754 373.99 cv
43.2778 374.005 li
43.6058 373.953 li
43.6036 373.94 li
44.1476 373.847 44.6842 373.731 45.2021 373.57 cv
45.2021 373.57 li
45.2054 373.569 li
45.2089 373.568 45.2124 373.567 45.2159 373.566 cv
45.5179 373.468 li
45.5142 373.456 li
46.0355 373.279 46.5394 373.066 47.0275 372.825 cv
47.0348 372.839 li
47.3304 372.689 li
47.3263 372.681 li
47.8121 372.424 48.2759 372.134 48.7215 371.818 cv
48.7305 371.83 li
48.9988 371.636 li
48.9869 371.62 li
49.4253 371.291 49.8459 370.941 50.2375 370.56 cv
50.2471 370.569 li
50.4818 370.335 li
50.4722 370.325 li
50.7219 370.069 50.9541 369.797 51.1797 369.519 cv
51.2986 369.372 51.4186 369.226 51.532 369.074 cv
51.5482 369.086 li
51.7433 368.818 li
51.7308 368.809 li
52.0465 368.363 52.3364 367.899 52.593 367.414 cv
52.6013 367.418 li
52.7518 367.123 li
52.7371 367.115 li
52.793 367.002 52.8416 366.885 52.8943 366.771 cv
53.0695 366.39 53.2325 366.002 53.3691 365.601 cv
53.3802 365.605 li
53.413 365.504 li
53.4781 365.304 li
53.4792 365.3 53.4805 365.297 53.4816 365.293 cv
53.4827 365.29 li
53.4824 365.29 li
53.6435 364.772 53.759 364.236 53.8523 363.692 cv
53.8661 363.694 li
53.918 363.366 li
53.9026 363.363 li
53.9877 362.774 54.0466 362.176 54.0466 361.563 cv
54.0466 360.95 53.9877 360.352 53.9026 359.762 cv
cp
f
40.3323 392.662 mo
42.8578 392.662 li
41.595 388.33 li
40.3323 392.662 li
cp
f
57.4915 377.207 mo
25.4589 377.207 li
25.4589 350.826 li
25.4589 348.137 27.6464 345.949 30.3354 345.949 cv
52.615 345.949 li
55.3039 345.949 57.4915 348.137 57.4915 350.826 cv
57.4915 377.207 li
cp
50.9648 394.405 mo
50.8216 394.741 50.6219 395.021 50.365 395.244 cv
50.1081 395.468 49.803 395.634 49.4497 395.743 cv
49.0961 395.852 48.7128 395.907 48.3003 395.907 cv
47.8878 395.907 47.5111 395.859 47.1702 395.762 cv
46.8293 395.665 46.5346 395.543 46.2863 395.396 cv
46.0377 395.249 45.8462 395.088 45.7116 394.916 cv
45.577 394.743 45.5098 394.577 45.5098 394.417 cv
45.5098 394.341 45.5243 394.261 45.5539 394.177 cv
45.5832 394.093 45.6252 394.015 45.6802 393.943 cv
45.7347 393.872 45.798 393.813 45.8696 393.767 cv
45.941 393.72 46.0146 393.697 46.0904 393.697 cv
46.1999 393.697 46.3094 393.75 46.4189 393.855 cv
46.5281 393.961 46.6606 394.074 46.8165 394.196 cv
46.9722 394.318 47.1616 394.432 47.3848 394.537 cv
47.6078 394.642 47.8964 394.695 48.25 394.695 cv
48.7046 394.695 49.0834 394.586 49.3864 394.367 cv
49.6894 394.148 49.8409 393.811 49.8409 393.356 cv
49.8409 392.986 49.74 392.689 49.5378 392.466 cv
49.3358 392.243 49.0834 392.054 48.7803 391.898 cv
48.4773 391.742 48.1468 391.594 47.789 391.456 cv
47.4309 391.317 47.1006 391.148 46.7977 390.951 cv
46.4946 390.753 46.2422 390.498 46.0401 390.186 cv
45.838 389.875 45.737 389.467 45.737 388.962 cv
45.737 388.499 45.8252 388.112 46.0022 387.8 cv
46.1789 387.489 46.4082 387.238 46.6902 387.049 cv
46.9722 386.859 47.2859 386.727 47.6312 386.651 cv
47.9763 386.575 48.3172 386.537 48.654 386.537 cv
48.8561 386.537 49.0896 386.552 49.3547 386.582 cv
49.6202 386.611 49.8705 386.661 50.1063 386.733 cv
50.3419 386.805 50.542 386.897 50.7059 387.011 cv
50.8701 387.124 50.9524 387.269 50.9524 387.446 cv
50.9524 387.514 50.9417 387.588 50.9208 387.668 cv
50.8997 387.747 50.866 387.825 50.8198 387.901 cv
50.7734 387.977 50.7145 388.04 50.6428 388.09 cv
50.5712 388.141 50.4892 388.166 50.3966 388.166 cv
50.3122 388.166 50.2241 388.141 50.1315 388.09 cv
50.0386 388.04 49.9273 387.985 49.7968 387.926 cv
49.6663 387.868 49.5106 387.813 49.3295 387.762 cv
49.1484 387.711 48.9233 387.687 48.654 387.687 cv
48.1908 387.687 47.8121 387.777 47.5176 387.958 cv
47.2226 388.139 47.0755 388.431 47.0755 388.835 cv
47.0755 389.147 47.1764 389.393 47.3785 389.574 cv
47.5806 389.755 47.8331 389.915 48.1364 390.054 cv
48.4394 390.193 48.7696 390.33 49.1274 390.465 cv
49.4852 390.599 49.8158 390.778 50.1188 391.001 cv
50.4218 391.225 50.6745 391.51 50.8766 391.86 cv
51.0784 392.209 51.1797 392.662 51.1797 393.217 cv
51.1797 393.672 51.108 394.068 50.9648 394.405 cv
cp
44.8972 395.465 mo
44.8425 395.533 44.775 395.591 44.6951 395.642 cv
44.6152 395.692 44.5246 395.733 44.4238 395.762 cv
44.3229 395.791 44.2258 395.806 44.1332 395.806 cv
44.0237 395.806 43.929 395.785 43.849 395.743 cv
43.7691 395.701 43.7124 395.629 43.6786 395.528 cv
43.1611 393.735 li
40.0417 393.735 li
39.5242 395.528 li
39.4905 395.629 39.4336 395.701 39.3537 395.743 cv
39.2735 395.785 39.1747 395.806 39.0569 395.806 cv
38.964 395.806 38.8692 395.794 38.7728 395.768 cv
38.6758 395.743 38.5853 395.705 38.5012 395.654 cv
38.4172 395.604 38.3497 395.545 38.2991 395.478 cv
38.2488 395.411 38.2233 395.335 38.2233 395.25 cv
38.2233 395.2 38.2274 395.162 38.236 395.137 cv
40.7489 386.954 li
40.7995 386.802 40.9046 386.689 41.0647 386.613 cv
41.2245 386.537 41.4012 386.499 41.595 386.499 cv
41.7886 386.499 41.9676 386.537 42.1319 386.613 cv
42.2958 386.689 42.4032 386.802 42.4538 386.954 cv
44.954 395.137 li
44.9709 395.188 44.9795 395.225 44.9795 395.25 cv
44.9795 395.326 44.952 395.398 44.8972 395.465 cv
cp
33.4944 394.297 mo
33.751 394.562 34.1194 394.695 34.5991 394.695 cv
35.0705 394.695 35.4389 394.562 35.7041 394.297 cv
35.9695 394.032 36.1021 393.622 36.1021 393.066 cv
36.1021 392.03 li
34.8267 392.03 li
34.6835 392.03 34.5761 391.976 34.5044 391.866 cv
34.4328 391.757 34.3973 391.631 34.3973 391.487 cv
34.3973 391.361 34.4328 391.241 34.5044 391.128 cv
34.5761 391.014 34.6835 390.957 34.8267 390.957 cv
36.9985 390.957 li
37.1417 390.957 37.2512 391.003 37.327 391.096 cv
37.4027 391.188 37.4406 391.294 37.4406 391.412 cv
37.4406 393.066 li
37.4406 393.58 37.3669 394.015 37.2195 394.373 cv
37.0721 394.731 36.87 395.021 36.6134 395.244 cv
36.3566 395.468 36.0556 395.629 35.7106 395.73 cv
35.3653 395.831 34.9948 395.882 34.5991 395.882 cv
34.1952 395.882 33.8206 395.831 33.4756 395.73 cv
33.1302 395.629 32.8313 395.468 32.5789 395.244 cv
32.3262 395.021 32.1285 394.731 31.9853 394.373 cv
31.8421 394.015 31.7707 393.58 31.7707 393.066 cv
31.7707 389.391 li
31.7707 388.878 31.8441 388.442 31.9914 388.084 cv
32.1389 387.726 32.3389 387.436 32.5913 387.212 cv
32.844 386.99 33.1385 386.828 33.4756 386.727 cv
33.812 386.625 34.1742 386.575 34.5613 386.575 cv
34.9823 386.575 35.3697 386.63 35.7231 386.739 cv
36.0767 386.848 36.3797 387.004 36.6324 387.206 cv
36.8849 387.408 37.0826 387.655 37.2258 387.945 cv
37.3689 388.236 37.4406 388.558 37.4406 388.911 cv
37.4406 389.172 37.3838 389.345 37.2701 389.429 cv
37.1565 389.513 36.9902 389.555 36.7712 389.555 cv
36.5945 389.555 36.4407 389.524 36.3105 389.46 cv
36.1796 389.398 36.1105 389.282 36.1021 389.113 cv
36.0849 388.928 36.047 388.754 35.9885 388.589 cv
35.9293 388.425 35.8432 388.282 35.7296 388.16 cv
35.616 388.038 35.4686 387.941 35.2875 387.869 cv
35.1064 387.798 34.8771 387.762 34.5991 387.762 cv
34.1194 387.762 33.751 387.895 33.4944 388.16 cv
33.2373 388.425 33.1092 388.835 33.1092 389.391 cv
33.1092 393.066 li
33.1092 393.622 33.2373 394.032 33.4944 394.297 cv
cp
60.7348 351.17 mo
60.7348 346.633 57.0576 342.956 52.5209 342.955 cv
52.5205 342.955 52.5199 342.955 52.5199 342.955 cv
30.4309 342.955 li
25.8936 342.955 22.2154 346.633 22.2154 351.17 cv
22.2154 407.913 li
60.7348 407.913 li
60.7348 351.17 li
cp
f
60.2526 408.961 mo
22.6977 408.961 li
21.4529 408.961 20.4438 409.97 20.4438 411.215 cv
20.4438 412.943 li
62.5065 412.943 li
62.5065 411.215 li
62.5065 409.97 61.4974 408.961 60.2526 408.961 cv
cp
f
121.453 375.775 mo
116.92 374.339 113.453 367.935 113.453 360.47 cv
113.453 353.004 116.92 346.601 121.453 345.166 cv
121.453 375.775 li
cp
122.872 341.879 mo
115.908 342.257 110.453 350.422 110.453 360.47 cv
110.453 370.517 115.908 378.683 122.871 379.062 cv
122.899 379.063 122.926 379.064 122.953 379.064 cv
123.336 379.064 123.705 378.917 123.984 378.653 cv
124.283 378.369 124.453 377.976 124.453 377.564 cv
124.453 343.377 li
124.453 342.965 124.283 342.572 123.985 342.288 cv
123.686 342.005 123.274 341.863 122.872 341.879 cv
cp
f
111.729 371.253 mo
111.347 370.434 111.021 369.564 110.729 368.666 cv
110.729 396.291 li
109.395 396.291 li
109.395 416.346 li
110.729 416.346 li
111.729 416.346 li
113.062 416.346 li
113.062 396.291 li
111.729 396.291 li
111.729 371.253 li
cp
f
116.3 351.728 mo
120.147 354.741 li
114.664 357.436 li
114.529 358.423 114.453 359.437 114.453 360.47 cv
114.453 360.606 114.46 360.741 114.463 360.876 cv
114.479 361.769 114.547 362.648 114.664 363.505 cv
120.147 366.2 li
116.301 369.212 li
116.749 370.174 117.268 371.048 117.845 371.812 cv
120.453 369.771 li
120.453 366.35 li
120.453 363.008 li
115.29 360.47 li
120.453 357.932 li
120.453 354.591 li
120.453 351.17 li
117.844 349.128 li
117.267 349.892 116.749 350.766 116.3 351.728 cv
cp
f
141.711 384.276 mo
149.679 380.74 li
151.114 388.568 li
141.711 384.276 li
cp
153.748 402.926 mo
139.909 397.429 li
151.952 393.132 li
153.748 402.926 li
cp
135.099 408.703 mo
136.801 399.423 li
150.749 404.964 li
135.099 408.703 li
cp
139.185 386.42 mo
149.123 390.956 li
137.6 395.067 li
139.185 386.42 li
cp
141.13 375.816 mo
147.16 378.576 li
140.045 381.734 li
141.13 375.816 li
cp
142.437 368.694 mo
147.469 368.694 li
148.816 376.034 li
141.689 372.771 li
142.437 368.694 li
cp
139.937 365.694 mo
130.646 416.346 li
133.697 416.346 li
134.507 411.928 li
154.522 407.147 li
156.209 416.346 li
159.259 416.346 li
149.969 365.694 li
139.937 365.694 li
cp
f
144.951 358.845 mo
145.849 358.845 146.576 359.573 146.576 360.47 cv
146.576 361.368 145.849 362.095 144.951 362.095 cv
144.054 362.095 143.326 361.368 143.326 360.47 cv
143.326 359.573 144.054 358.845 144.951 358.845 cv
cp
141.188 364.705 mo
148.718 364.705 li
148.717 362.97 li
148.716 360.645 li
148.716 359.594 148.277 358.648 147.578 357.971 cv
146.907 357.321 145.996 356.918 144.989 356.918 cv
144.914 356.918 li
143.906 356.918 142.996 357.321 142.325 357.971 cv
141.625 358.648 141.187 359.594 141.187 360.645 cv
141.187 362.97 li
141.188 364.705 li
cp
f
140.187 360.644 mo
140.187 359.675 140.479 358.753 141.02 357.971 cv
125.453 357.971 li
125.453 362.97 li
140.187 362.97 li
140.187 360.644 li
cp
f
149.717 362.97 mo
178.914 362.97 li
180.295 362.97 181.414 361.851 181.414 360.47 cv
181.414 359.09 180.295 357.971 178.914 357.971 cv
148.882 357.971 li
149.424 358.753 149.716 359.675 149.716 360.644 cv
149.717 362.97 li
cp
f
170.24 389.221 mo
178.545 364.012 li
177.492 364.012 li
169.303 388.869 li
170.24 389.221 li
cp
f
167.491 382.303 mo
165.411 382.625 163.462 383.551 161.92 384.992 cv
158.658 393.567 li
158.847 395.601 159.64 397.53 160.906 399.123 cv
162.821 399.852 li
169.242 382.969 li
167.491 382.303 li
cp
f
181.629 396.291 mo
182.216 396.291 182.692 396.767 182.692 397.354 cv
182.692 397.94 182.216 398.416 181.629 398.416 cv
181.042 398.416 180.567 397.94 180.567 397.354 cv
180.567 396.767 181.042 396.291 181.629 396.291 cv
cp
184.053 398.251 mo
184.071 398.203 li
184.565 396.888 183.9 395.422 182.585 394.928 cv
167.867 389.398 li
166.04 394.2 li
180.778 399.737 li
182.093 400.232 183.559 399.566 184.053 398.251 cv
cp
f
188.567 405.321 mo
179.942 405.321 li
179.942 403.721 li
188.567 403.721 li
188.567 405.321 li
cp
188.567 408.809 mo
179.942 408.809 li
179.942 407.209 li
188.567 407.209 li
188.567 408.809 li
cp
188.567 412.297 mo
179.942 412.297 li
179.942 410.697 li
188.567 410.697 li
188.567 412.297 li
cp
189.416 391.126 mo
179.053 391.126 li
178.678 391.502 178.344 391.835 178.031 392.148 cv
182.937 393.991 li
183.823 394.324 184.526 394.982 184.917 395.845 cv
185.308 396.707 185.34 397.669 185.007 398.555 cv
184.473 399.977 183.14 400.9 181.672 400.9 cv
181.247 400.9 180.827 400.824 180.426 400.674 cv
175.234 398.723 li
175.234 416.513 li
193.234 416.513 li
193.234 394.945 li
191.743 393.454 190.907 392.618 189.416 391.126 cv
cp
f
54.6587 27.2883 mo
54.6587 26.4758 li
53.6587 26.4758 li
53.6587 27.2883 li
54.6587 27.2883 li
cp
f
51.6728 23.0045 mo
51.6728 23.4185 52.0088 23.7545 52.4228 23.7545 cv
55.8945 23.7545 li
56.3086 23.7545 56.6445 23.4185 56.6445 23.0045 cv
56.6445 22.5904 56.3086 22.2545 55.8945 22.2545 cv
52.4228 22.2545 li
52.0088 22.2545 51.6728 22.5904 51.6728 23.0045 cv
cp
f
56.6445 25.2305 mo
56.6445 24.8165 56.3086 24.4805 55.8945 24.4805 cv
52.4228 24.4805 li
52.0088 24.4805 51.6728 24.8165 51.6728 25.2305 cv
51.6728 25.6446 52.0088 25.9805 52.4228 25.9805 cv
55.8945 25.9805 li
56.3086 25.9805 56.6445 25.6446 56.6445 25.2305 cv
cp
f
22.0337 27.2883 mo
22.0337 26.4758 li
21.0337 26.4758 li
21.0337 27.2883 li
22.0337 27.2883 li
cp
f
19.7978 23.7545 mo
23.2695 23.7545 li
23.6836 23.7545 24.0195 23.4185 24.0195 23.0045 cv
24.0195 22.5904 23.6836 22.2545 23.2695 22.2545 cv
19.7978 22.2545 li
19.3838 22.2545 19.0478 22.5904 19.0478 23.0045 cv
19.0478 23.4185 19.3838 23.7545 19.7978 23.7545 cv
cp
f
19.7978 25.9805 mo
23.2695 25.9805 li
23.6836 25.9805 24.0195 25.6446 24.0195 25.2305 cv
24.0195 24.8165 23.6836 24.4805 23.2695 24.4805 cv
19.7978 24.4805 li
19.3838 24.4805 19.0478 24.8165 19.0478 25.2305 cv
19.0478 25.6446 19.3838 25.9805 19.7978 25.9805 cv
cp
f
13.4712 47.1008 mo
14.4712 47.1008 li
14.4712 46.2883 li
13.4712 46.2883 li
13.4712 47.1008 li
cp
f
15.707 42.067 mo
12.2353 42.067 li
11.8213 42.067 11.4853 42.4029 11.4853 42.817 cv
11.4853 43.231 11.8213 43.567 12.2353 43.567 cv
15.707 43.567 li
16.1211 43.567 16.457 43.231 16.457 42.817 cv
16.457 42.4029 16.1211 42.067 15.707 42.067 cv
cp
f
15.707 44.293 mo
12.2353 44.293 li
11.8213 44.293 11.4853 44.629 11.4853 45.043 cv
11.4853 45.4571 11.8213 45.793 12.2353 45.793 cv
15.707 45.793 li
16.1211 45.793 16.457 45.4571 16.457 45.043 cv
16.457 44.629 16.1211 44.293 15.707 44.293 cv
cp
f
61.5337 47.1008 mo
62.5337 47.1008 li
62.5337 46.2883 li
61.5337 46.2883 li
61.5337 47.1008 li
cp
f
59.5478 42.817 mo
59.5478 43.231 59.8838 43.567 60.2978 43.567 cv
63.7695 43.567 li
64.1836 43.567 64.5195 43.231 64.5195 42.817 cv
64.5195 42.4029 64.1836 42.067 63.7695 42.067 cv
60.2978 42.067 li
59.8838 42.067 59.5478 42.4029 59.5478 42.817 cv
cp
f
63.7695 44.293 mo
60.2978 44.293 li
59.8838 44.293 59.5478 44.629 59.5478 45.043 cv
59.5478 45.4571 59.8838 45.793 60.2978 45.793 cv
63.7695 45.793 li
64.1836 45.793 64.5195 45.4571 64.5195 45.043 cv
64.5195 44.629 64.1836 44.293 63.7695 44.293 cv
cp
f
29.9791 58.5288 mo
37.8052 50.08 li
45.655 58.5544 li
45.4446 57.3467 45.2342 56.139 45.03 54.9367 cv
39.1714 48.6118 li
43.2825 44.2173 li
43.1511 43.3777 43.022 42.5408 42.8939 41.7049 cv
37.8088 47.1406 li
37.8052 47.1367 li
37.8015 47.1406 li
32.6902 41.6773 li
32.5639 42.5187 32.4361 43.3575 32.3076 44.196 cv
36.4388 48.6118 li
30.5892 54.9271 li
30.3878 56.1326 30.1847 57.3332 29.9791 58.5288 cv
cp
f
32.7475 41.2914 mo
42.8299 41.2914 li
42.7278 40.6232 42.6275 39.9571 42.5275 39.2914 cv
33.0444 39.2914 li
32.9462 39.9589 32.8472 40.6255 32.7475 41.2914 cv
cp
f
46.7749 41.29 mo
46.3349 38.38 li
46.0349 36.32 45.7449 34.25 45.4549 32.18 cv
45.1649 30.02 li
44.7949 27.24 44.4349 24.46 44.095 21.66 cv
43.7049 18.37 li
43.5749 17.27 43.4349 16.17 43.3149 15.07 cv
43.0649 12.92 li
42.6449 9.08002 42.2449 5.22003 41.8849 1.35999 cv
41.7549 0 li
33.8549 0 li
33.7249 1.35999 li
33.3549 5.23999 32.965 9.09998 32.5449 12.96 cv
32.2949 15.07 li
32.1749 16.17 32.0349 17.27 31.905 18.37 cv
31.5149 21.66 li
31.1749 24.46 30.8149 27.24 30.4449 30.02 cv
30.155 32.18 li
29.8649 34.25 29.5749 36.32 29.2749 38.38 cv
28.8349 41.29 li
26.6149 56.01 23.9749 70.47 20.8949 84.55 cv
20.4349 86.65 19.965 88.75 19.4849 90.83 cv
22.5549 90.83 li
23.0349 88.75 23.4949 86.65 23.9549 84.55 cv
24.2449 83.22 24.5349 81.89 24.8149 80.55 cv
29.5449 57.63 33.7649 30.42 36.5849 3 cv
39.0249 3 li
39.3349 6.15002 39.6649 9.28998 39.9949 12.42 cv
40.3049 15.22 40.6349 18.03 40.9949 20.86 cv
41.155 22.13 41.3149 23.4 41.4849 24.67 cv
41.5049 24.88 41.5349 25.08 41.5649 25.29 cv
41.715 26.45 41.8649 27.61 42.0349 28.77 cv
42.155 29.75 42.2949 30.72 42.4349 31.7 cv
42.655 33.33 42.8949 34.95 43.1349 36.58 cv
43.345 38.07 43.5749 39.55 43.7949 41.04 cv
44.5049 45.69 45.2649 50.35 46.0549 55 cv
46.2549 56.18 46.4549 57.35 46.6649 58.52 cv
46.8349 59.5 47.0049 60.48 47.1749 61.45 cv
47.6749 64.22 48.1749 66.97 48.6949 69.72 cv
48.8349 70.51 48.9849 71.31 49.1449 72.1 cv
49.1849 72.33 49.2349 72.56 49.2749 72.79 cv
49.7749 75.39 50.2749 77.98 50.7949 80.55 cv
51.0749 81.89 51.3649 83.22 51.655 84.55 cv
52.1149 86.65 52.5749 88.75 53.0549 90.83 cv
56.1249 90.83 li
55.6449 88.75 55.1749 86.65 54.715 84.55 cv
51.6349 70.47 48.9949 56.01 46.7749 41.29 cv
cp
f
49.7049 19.66 mo
45.2349 19.66 li
47.6749 16.87 li
49.7049 19.66 li
cp
53.155 17.82 mo
53.155 19.66 li
52.1749 19.66 li
50.2449 17 li
53.155 17.82 li
cp
45.9549 15.8 mo
44.6049 17.34 li
44.7749 18.77 44.9449 20.21 45.1349 21.66 cv
55.155 21.66 li
55.155 16.3 li
44.1249 13.22 li
44.2049 13.93 44.2849 14.64 44.3749 15.36 cv
45.9549 15.8 li
cp
f
56.5349 39.29 mo
48.2949 39.29 li
53.095 34.81 li
56.5349 39.29 li
cp
60.9949 36.55 mo
60.9949 39.29 li
59.0549 39.29 li
55.845 35.1 li
60.9949 36.55 li
cp
46.5849 32.5 mo
51.2449 33.81 li
47.3049 37.48 li
47.4949 38.74 47.6849 40.01 47.8849 41.29 cv
62.9949 41.29 li
62.9949 35.04 li
46.2849 30.34 li
46.3849 31.06 46.4849 31.78 46.5849 32.5 cv
cp
f
19.0749 39.29 mo
22.5149 34.81 li
27.3149 39.29 li
19.0749 39.29 li
cp
14.6149 39.29 mo
14.6149 36.55 li
19.7649 35.1 li
16.5549 39.29 li
14.6149 39.29 li
cp
28.2649 37.44 mo
24.3649 33.81 li
28.965 32.51 li
29.0749 31.79 29.1749 31.07 29.2649 30.35 cv
12.6149 35.04 li
12.6149 41.29 li
27.6949 41.29 li
27.8949 40.01 28.0849 38.73 28.2649 37.44 cv
cp
f
25.905 19.66 mo
27.9349 16.87 li
30.3749 19.66 li
25.905 19.66 li
cp
23.4349 19.66 mo
22.4549 19.66 li
22.4549 17.82 li
25.3649 17 li
23.4349 19.66 li
cp
30.9549 17.28 mo
29.655 15.8 li
31.1749 15.38 li
31.2649 14.68 31.3549 13.98 31.4349 13.27 cv
20.4549 16.3 li
20.4549 21.66 li
30.4149 21.66 li
30.6049 20.2 30.7849 18.74 30.9549 17.28 cv
cp
f
26.2442 78.5497 mo
26.177 78.8814 26.1112 80.0623 26.0437 80.3925 cv
49.5727 80.3925 li
49.5062 80.0588 49.4426 78.8834 49.3765 78.5497 cv
26.2442 78.5497 li
cp
f
33.2182 38.1201 mo
37.7774 30.8994 li
37.8052 30.9462 li
37.8329 30.8994 li
42.3419 38.0411 li
42.0998 36.411 41.8643 34.7892 41.6352 33.1757 cv
38.9771 28.9655 li
40.6643 26.114 li
40.5215 25.0331 40.3847 23.9608 40.2482 22.8891 cv
37.8052 27.0185 li
35.3075 22.7974 li
35.1709 23.8718 35.0303 24.9453 34.8896 26.0191 cv
36.6331 28.9656 li
33.9093 33.2794 li
33.6833 34.8962 33.4528 36.5101 33.2182 38.1201 cv
cp
f
29.9526 60.9208 mo
45.6573 60.9208 li
37.8052 66.7919 li
29.9526 60.9208 li
cp
26.4061 77.7418 mo
37.8028 69.2873 li
37.8052 69.289 li
37.8075 69.2873 li
49.2204 77.7542 li
49.029 76.7823 48.8366 75.81 48.6488 74.8398 cv
39.4792 68.0372 li
46.4155 62.8508 li
46.18 61.5383 45.9466 60.2277 45.7183 58.9208 cv
29.9113 58.9208 li
29.6832 60.2437 29.4531 61.5607 29.2201 62.8699 cv
36.131 68.0373 li
26.9893 74.819 li
26.7966 75.8015 26.6012 76.7711 26.4061 77.7418 cv
cp
f
36.5436 12.5679 mo
36.4676 13.2305 36.3912 13.8929 36.3135 14.5561 cv
39.2403 14.5561 li
39.1648 13.8972 39.0866 13.2339 39.0137 12.5794 cv
36.5436 12.5679 li
cp
f
35.4328 21.7949 mo
40.107 21.7949 li
40.017 21.0794 39.933 20.3731 39.8459 19.662 cv
35.6992 19.662 li
35.6115 20.373 35.5223 21.0839 35.4328 21.7949 cv
cp
f
253.491 27.8444 mo
252.811 30.4454 252.277 33.2851 251.912 36.3069 cv
252.465 35.9193 253.029 35.5344 253.603 35.1529 cv
253.96 32.696 254.427 30.3566 255 28.1934 cv
254.49 28.0645 253.99 27.9529 253.491 27.8444 cv
cp
f
269.009 30.8663 mo
268.412 31.111 267.813 31.3697 267.212 31.6354 cv
269.012 32.4955 270.813 33.4409 272.594 34.4692 cv
276.644 36.8077 280.314 39.4146 283.464 42.098 cv
283.464 42.098 li
284.3 42.8102 285.099 43.5279 285.859 44.2475 cv
285.859 44.2463 li
286.191 44.5609 286.515 44.8757 286.831 45.1906 cv
287.196 44.8149 287.549 44.4383 287.892 44.061 cv
287.249 43.4258 286.563 42.7924 285.859 42.1605 cv
285.859 42.1545 li
285.764 42.0695 285.676 41.9839 285.58 41.8991 cv
285.58 41.9136 li
282.142 38.8675 278.017 35.8861 273.336 33.1836 cv
271.904 32.3569 270.458 31.5878 269.009 30.8663 cv
cp
f
262.967 61.9813 mo
256.966 64.396 251.195 65.7538 246.539 65.7538 cv
243.421 65.7538 239.351 65.1436 237.673 62.2358 cv
235.699 58.8159 237.869 53.3972 242.796 47.737 cv
242.429 47.3604 242.073 46.9824 241.726 46.6038 cv
236.259 52.8352 234.028 58.8911 236.387 62.9778 cv
237.996 65.7646 241.507 67.2379 246.539 67.2379 cv
251.697 67.2379 258.147 65.6489 264.775 62.8398 cv
264.172 62.5631 263.57 62.2769 262.967 61.9813 cv
cp
f
278.522 27.8324 mo
278.026 27.9406 277.523 28.0596 277.014 28.1879 cv
277.59 30.3597 278.059 32.7092 278.416 35.177 cv
278.988 35.5577 279.553 35.9407 280.107 36.3306 cv
279.741 33.2953 279.205 30.4434 278.522 27.8324 cv
cp
f
280.518 50.7814 mo
280.612 49.1817 280.664 47.5458 280.664 45.876 cv
280.664 44.2166 280.616 42.5887 280.522 40.9987 cv
280.004 40.5956 279.467 40.2061 278.933 39.814 cv
279.089 41.7862 279.18 43.809 279.18 45.876 cv
279.18 47.9486 279.095 49.9813 278.938 51.9592 cv
279.473 51.5693 280.003 51.1788 280.518 50.7814 cv
cp
f
278.518 63.9189 mo
279.2 61.3082 279.738 58.4592 280.103 55.4238 cv
279.551 55.8137 278.992 56.1998 278.423 56.5804 cv
278.066 59.0512 277.587 61.39 277.011 63.5635 cv
277.518 63.6918 278.021 63.8108 278.518 63.9189 cv
cp
f
266.008 78.5952 mo
262.057 78.5952 258.447 74.0012 256.009 66.8964 cv
255.499 67.0271 254.994 67.1458 254.493 67.2581 cv
257.156 75.1146 261.287 80.0793 266.008 80.0793 cv
270.73 80.0793 274.86 75.1154 277.522 67.2577 cv
277.019 67.145 276.513 67.0258 276.001 66.8945 cv
273.563 73.9971 269.958 78.5952 266.008 78.5952 cv
cp
f
251.494 40.9973 mo
251.401 42.5877 251.352 44.2161 251.352 45.876 cv
251.352 47.5446 251.401 49.1814 251.496 50.7796 cv
252.013 51.1794 252.547 51.5724 253.085 51.9645 cv
252.928 49.984 252.836 47.9523 252.836 45.876 cv
252.836 43.8044 252.927 41.7772 253.084 39.8008 cv
252.544 40.1958 252.014 40.5938 251.494 40.9973 cv
cp
f
253.601 56.586 mo
253.028 56.2029 252.465 55.8141 251.91 55.4216 cv
252.275 58.4568 252.811 61.3088 253.494 63.9198 cv
253.991 63.8116 254.494 63.6927 255.002 63.5643 cv
254.427 61.3957 253.959 59.0499 253.601 56.586 cv
cp
f
263.801 53.1548 mo
260.78 52.0099 258.634 49.1912 258.634 45.8761 cv
258.634 42.5609 260.78 39.7422 263.801 38.5973 cv
261.843 40.2668 260.572 42.9015 260.572 45.8761 cv
260.572 48.8506 261.843 51.4854 263.801 53.1548 cv
cp
257.66 45.8761 mo
257.66 50.4868 261.398 54.2244 266.008 54.2244 cv
270.619 54.2244 274.357 50.4868 274.357 45.8761 cv
274.357 41.2654 270.619 37.5278 266.008 37.5278 cv
261.398 37.5278 257.66 41.2654 257.66 45.8761 cv
cp
f
257.232 15.6224 mo
256.493 16.2527 256.013 17.2474 256.013 18.3705 cv
256.013 19.4935 256.493 20.4882 257.232 21.1185 cv
256.092 20.6863 255.281 19.6221 255.281 18.3705 cv
255.281 17.1188 256.092 16.0546 257.232 15.6224 cv
cp
258.066 21.5224 mo
259.806 21.5224 261.218 20.1112 261.218 18.3705 cv
261.218 16.6297 259.806 15.2186 258.066 15.2186 cv
256.325 15.2186 254.914 16.6297 254.914 18.3705 cv
254.914 20.1112 256.325 21.5224 258.066 21.5224 cv
cp
f
293.934 34.0359 mo
292.561 33.516 291.587 32.236 291.587 30.7306 cv
291.587 29.2251 292.561 27.9451 293.934 27.4252 cv
293.044 28.1833 292.467 29.3798 292.467 30.7306 cv
292.467 32.0814 293.044 33.2778 293.934 34.0359 cv
cp
294.936 26.9396 mo
292.842 26.9396 291.145 28.6368 291.145 30.7306 cv
291.145 32.8243 292.842 34.5216 294.936 34.5216 cv
297.029 34.5216 298.727 32.8243 298.727 30.7306 cv
298.727 28.6368 297.029 26.9396 294.936 26.9396 cv
cp
f
246.834 51.7609 mo
245.839 51.3839 245.132 50.4556 245.132 49.3638 cv
245.132 48.272 245.839 47.3437 246.834 46.9667 cv
246.189 47.5165 245.771 48.3842 245.771 49.3638 cv
245.771 50.3434 246.189 51.2111 246.834 51.7609 cv
cp
244.812 49.3638 mo
244.812 50.8822 246.043 52.1132 247.561 52.1132 cv
249.08 52.1132 250.31 50.8822 250.31 49.3638 cv
250.31 47.8454 249.08 46.6144 247.561 46.6144 cv
246.043 46.6144 244.812 47.8454 244.812 49.3638 cv
cp
f
256.96 22.3539 mo
256.449 22.2117 255.98 21.9789 255.568 21.6661 cv
255.187 22.5628 254.827 23.5091 254.49 24.5023 cv
254.988 24.6136 255.495 24.7463 256.002 24.8758 cv
256.304 23.9952 256.624 23.1536 256.96 22.3539 cv
cp
f
266.008 13.157 mo
269.959 13.157 273.569 17.751 276.007 24.8557 cv
276.518 24.7249 277.022 24.6062 277.523 24.4939 cv
274.86 16.6375 270.73 11.6729 266.008 11.6729 cv
263.821 11.6729 261.763 12.7495 259.917 14.6741 cv
260.374 14.9044 260.782 15.2111 261.124 15.5862 cv
262.643 14.0252 264.293 13.157 266.008 13.157 cv
cp
f
244.131 44.0538 mo
244.475 44.433 244.82 44.8121 245.186 45.1896 cv
248.955 41.4401 253.828 37.6993 259.422 34.4692 cv
261.219 33.4321 263.036 32.4797 264.851 31.6138 cv
264.821 31.5995 li
266.021 31.0685 li
266.925 30.6561 267.826 30.2687 268.723 29.9025 cv
269.049 29.769 li
269.051 29.77 li
275.052 27.3558 280.822 25.9984 285.477 25.9984 cv
287.467 25.9984 289.839 26.2549 291.736 27.191 cv
292.153 26.8131 292.63 26.5024 293.161 26.2893 cv
291.286 25.1243 288.698 24.5142 285.477 24.5142 cv
278.1 24.5142 268.082 27.7554 258.68 33.1836 cv
252.907 36.5169 247.96 40.2729 244.131 44.0538 cv
cp
f
292.007 43.0172 mo
294.101 40.2813 295.477 37.6942 296.125 35.3539 cv
295.743 35.4526 295.349 35.5214 294.936 35.5214 cv
294.795 35.5214 294.662 35.4918 294.524 35.4798 cv
293.873 37.5048 292.636 39.7535 290.829 42.1153 cv
290.343 42.7493 289.82 43.3836 289.27 44.0167 cv
289.277 44.0234 li
288.632 44.7333 li
288.283 45.1186 287.921 45.5034 287.549 45.8867 cv
287.5 45.9371 li
287.4 46.0408 287.301 46.1444 287.199 46.2479 cv
286.844 46.6132 li
286.832 46.6016 li
282.99 50.415 278.107 54.1003 272.594 57.283 cv
270.811 58.3126 269.007 59.259 267.205 60.1199 cv
267.807 60.3865 268.408 60.6419 269.006 60.8874 cv
270.456 60.1655 271.903 59.3958 273.336 58.5685 cv
281.159 54.0519 287.79 48.5291 292.007 43.0172 cv
cp
f
241.41 44.7264 mo
241.511 44.8454 241.599 44.9647 241.702 45.0836 cv
241.705 45.0806 241.708 45.0777 241.711 45.0748 cv
242.48 45.9491 243.301 46.8207 244.175 47.6859 cv
244.175 47.6862 244.174 47.6864 244.174 47.6867 cv
244.183 47.6959 244.193 47.705 244.203 47.7142 cv
244.205 47.7161 244.206 47.7178 244.208 47.7197 cv
244.208 47.7196 244.208 47.7195 244.208 47.7195 cv
244.236 47.6635 244.267 47.61 244.297 47.5557 cv
244.389 47.3903 244.49 47.2331 244.605 47.0842 cv
244.606 47.0831 244.607 47.0821 244.608 47.081 cv
244.761 46.8835 244.932 46.704 245.121 46.5406 cv
244.113 45.5375 243.178 44.5261 242.32 43.5125 cv
242.213 43.3854 242.103 43.2583 241.998 43.1311 cv
241.719 42.7926 241.447 42.454 241.188 42.1153 cv
237.28 37.0081 235.999 32.4162 237.673 29.5167 cv
239.351 26.6089 243.421 25.9984 246.54 25.9984 cv
247.052 25.9984 247.583 26.0214 248.122 26.0539 cv
248.307 26.0653 248.496 26.0806 248.684 26.0958 cv
249.049 26.1249 249.42 26.1625 249.796 26.2057 cv
250.012 26.2308 250.227 26.2529 250.447 26.2825 cv
254.261 26.7946 258.549 27.9932 262.965 29.7701 cv
263.567 29.4748 264.169 29.1871 264.771 28.9107 cv
260.318 27.0236 255.956 25.7036 252.001 25.03 cv
252.001 25.0214 li
251.738 24.9766 251.481 24.9417 251.221 24.9025 cv
250.888 24.8525 250.558 24.8047 250.231 24.7646 cv
249.759 24.7058 249.294 24.6577 248.836 24.6196 cv
248.642 24.6038 248.45 24.5898 248.259 24.5779 cv
247.673 24.5403 247.096 24.5142 246.54 24.5142 cv
241.507 24.5142 237.996 25.9875 236.387 28.7747 cv
234.37 32.2698 235.656 37.3277 240.009 43.0172 cv
240.446 43.5876 240.92 44.1574 241.41 44.7264 cv
cp
f
296.505 58.3582 mo
296.491 58.2158 296.473 58.0724 296.453 57.9279 cv
296.428 57.7527 296.4 57.5765 296.366 57.3984 cv
296.34 57.265 296.311 57.1302 296.28 56.9953 cv
296.237 56.8029 296.192 56.6099 296.138 56.4144 cv
296.105 56.2954 296.068 56.1751 296.031 56.0551 cv
295.966 55.84 295.9 55.6247 295.824 55.4064 cv
295.792 55.3163 295.755 55.2248 295.721 55.1342 cv
295.628 54.8835 295.533 54.6326 295.425 54.3781 cv
295.417 54.3591 295.407 54.3398 295.399 54.3207 cv
294.713 52.7203 293.73 51.0478 292.484 49.3408 cv
292.453 49.2991 292.424 49.2578 292.393 49.216 cv
292.173 48.9175 291.943 48.6179 291.707 48.3175 cv
291.674 48.275 291.643 48.2327 291.61 48.1901 cv
291.61 48.1934 li
291.191 47.6654 290.758 47.1359 290.291 46.6041 cv
289.945 46.9809 289.58 47.3557 289.214 47.7305 cv
289.751 48.3462 290.248 48.9581 290.717 49.5659 cv
290.873 49.7684 291.025 49.9701 291.174 50.1714 cv
291.269 50.3 291.362 50.4283 291.454 50.5563 cv
291.594 50.7514 291.73 50.946 291.863 51.1397 cv
291.953 51.2723 292.041 51.4044 292.128 51.5363 cv
292.252 51.7247 292.376 51.913 292.493 52.0999 cv
292.578 52.2359 292.658 52.3708 292.739 52.5059 cv
292.848 52.687 292.958 52.8683 293.059 53.0476 cv
293.139 53.1883 293.211 53.3271 293.287 53.4666 cv
293.379 53.6387 293.475 53.8116 293.561 53.9819 cv
293.641 54.1403 293.711 54.2958 293.785 54.4525 cv
293.905 54.7076 294.018 54.9604 294.121 55.2108 cv
294.198 55.3954 294.277 55.5809 294.344 55.7627 cv
294.394 55.8957 294.434 56.0255 294.478 56.1569 cv
294.533 56.3198 294.59 56.4831 294.637 56.6434 cv
294.676 56.7744 294.707 56.9025 294.741 57.0317 cv
294.782 57.189 294.823 57.3463 294.856 57.5009 cv
294.883 57.6269 294.904 57.7507 294.926 57.8748 cv
294.953 58.0279 294.978 58.1802 294.997 58.3303 cv
295.012 58.4507 295.023 58.5698 295.033 58.6882 cv
295.046 58.8376 295.054 58.9852 295.058 59.1313 cv
295.061 59.245 295.063 59.358 295.061 59.4696 cv
295.058 59.6165 295.049 59.7606 295.037 59.9036 cv
295.029 60.0087 295.021 60.1142 295.007 60.2172 cv
294.988 60.3635 294.96 60.5059 294.931 60.6478 cv
294.911 60.7418 294.895 60.8372 294.871 60.9293 cv
294.831 61.0826 294.78 61.2308 294.727 61.3784 cv
294.701 61.4529 294.68 61.5298 294.65 61.6027 cv
294.562 61.8203 294.461 62.032 294.343 62.2358 cv
292.665 65.1436 288.596 65.7538 285.477 65.7538 cv
284.82 65.7538 284.134 65.7195 283.434 65.6663 cv
283.203 65.6487 282.963 65.6199 282.727 65.5965 cv
282.249 65.5493 281.765 65.4933 281.27 65.423 cv
280.982 65.382 280.692 65.3362 280.399 65.2875 cv
279.934 65.2104 279.462 65.1212 278.986 65.0251 cv
278.677 64.9625 278.369 64.9029 278.055 64.8323 cv
277.541 64.7173 277.018 64.5846 276.493 64.4489 cv
276.215 64.3768 275.942 64.3149 275.661 64.2371 cv
274.911 64.0297 274.15 63.7986 273.382 63.5514 cv
272.998 63.4277 272.609 63.2889 272.222 63.1555 cv
271.786 63.0054 271.35 62.8546 270.91 62.6925 cv
270.495 62.5395 270.078 62.3782 269.66 62.2147 cv
268.053 61.5859 266.431 60.8945 264.804 60.1168 cv
263.975 59.7204 263.146 59.3013 262.318 58.869 cv
262.165 58.7894 262.013 58.7087 261.861 58.6279 cv
261.046 58.1951 260.231 57.7502 259.422 57.283 cv
258.667 56.8467 257.925 56.3997 257.195 55.9451 cv
257.058 55.86 256.926 55.7723 256.79 55.6868 cv
256.177 55.2999 255.57 54.9092 254.977 54.511 cv
254.879 54.4453 254.783 54.3782 254.685 54.312 cv
254.051 53.8823 253.426 53.4477 252.816 53.0068 cv
252.757 52.9644 252.699 52.9216 252.64 52.8792 cv
252.017 52.4266 251.407 51.9684 250.81 51.506 cv
250.771 51.4752 250.733 51.4438 250.694 51.413 cv
250.693 51.4142 250.692 51.4156 250.692 51.4169 cv
250.416 51.8361 250.061 52.198 249.645 52.4776 cv
249.645 52.4778 249.644 52.4782 249.644 52.4785 cv
249.669 52.4978 249.695 52.5165 249.72 52.5358 cv
250.361 53.0372 251.018 53.5324 251.69 54.0219 cv
251.737 54.0561 251.784 54.0901 251.831 54.1243 cv
252.471 54.5878 253.123 55.045 253.788 55.4961 cv
253.889 55.5647 253.989 55.6337 254.09 55.702 cv
254.701 56.1121 255.323 56.5155 255.954 56.9136 cv
256.099 57.0055 256.242 57.0992 256.388 57.1906 cv
257.14 57.6585 257.903 58.1196 258.68 58.5685 cv
259.379 58.9718 260.081 59.3589 260.785 59.7375 cv
260.842 59.7681 260.899 59.7975 260.956 59.8279 cv
261.638 60.1927 262.322 60.5446 263.007 60.8856 cv
263.007 60.8857 263.007 60.8858 263.007 60.8859 cv
264.43 61.5943 265.852 62.23 267.269 62.8302 cv
267.261 62.8338 267.253 62.8378 267.245 62.8414 cv
267.667 63.0202 268.086 63.1795 268.506 63.3483 cv
268.768 63.4537 269.03 63.5627 269.291 63.6641 cv
270.114 63.9835 270.931 64.2828 271.743 64.5621 cv
271.847 64.5978 271.953 64.6392 272.057 64.6744 cv
272.974 64.9846 273.88 65.2658 274.776 65.5224 cv
275.004 65.588 275.227 65.6415 275.454 65.7036 cv
276.107 65.8817 276.755 66.0491 277.393 66.197 cv
277.693 66.2668 277.988 66.3279 278.285 66.3908 cv
278.847 66.5099 279.402 66.6172 279.949 66.7114 cv
280.248 66.7628 280.546 66.8129 280.84 66.8568 cv
281.399 66.9402 281.946 67.0049 282.487 67.0604 cv
282.735 67.0859 282.988 67.1185 283.233 67.1379 cv
284.003 67.1992 284.755 67.2379 285.477 67.2379 cv
290.51 67.2379 294.02 65.7646 295.629 62.9778 cv
295.77 62.7329 295.893 62.48 296.002 62.2213 cv
296.039 62.132 296.066 62.0385 296.1 61.9476 cv
296.164 61.7757 296.227 61.6038 296.277 61.4265 cv
296.31 61.3116 296.332 61.1927 296.359 61.0756 cv
296.395 60.9171 296.432 60.7588 296.458 60.5963 cv
296.479 60.4647 296.491 60.33 296.505 60.1959 cv
296.522 60.0428 296.537 59.8895 296.545 59.7333 cv
296.552 59.5875 296.553 59.4395 296.552 59.291 cv
296.552 59.1425 296.55 58.9936 296.542 58.8427 cv
296.534 58.6826 296.521 58.521 296.505 58.3582 cv
cp
f
373.478 61.2675 mo
373.478 71.58 li
378.855 71.58 li
378.855 61.2675 li
373.478 61.2675 li
cp
f
343.393 55.8173 mo
353.938 24.5156 li
410.708 24.5156 li
400.164 55.8173 li
343.393 55.8173 li
cp
412.796 23.0156 mo
352.86 23.0156 li
341.305 57.3173 li
401.242 57.3173 li
412.796 23.0156 li
cp
f
367.208 25.8372 mo
354.772 25.8372 li
351.889 34.3969 li
364.324 34.3969 li
367.208 25.8372 li
cp
f
378.249 34.3969 mo
381.133 25.8372 li
368.697 25.8372 li
365.814 34.3969 li
378.249 34.3969 li
cp
f
392.174 34.3969 mo
395.057 25.8372 li
382.622 25.8372 li
379.739 34.3969 li
392.174 34.3969 li
cp
f
396.547 25.8372 mo
393.664 34.3969 li
406.099 34.3969 li
408.983 25.8372 li
396.547 25.8372 li
cp
f
363.822 35.8868 mo
351.387 35.8868 li
348.504 44.4465 li
360.939 44.4465 li
363.822 35.8868 li
cp
f
362.429 44.4465 mo
374.864 44.4465 li
377.747 35.8868 li
365.312 35.8868 li
362.429 44.4465 li
cp
f
391.672 35.8868 mo
379.237 35.8868 li
376.354 44.4465 li
388.789 44.4465 li
391.672 35.8868 li
cp
f
390.279 44.4465 mo
402.714 44.4465 li
405.597 35.8868 li
393.162 35.8868 li
390.279 44.4465 li
cp
f
348.002 45.9363 mo
345.118 54.4961 li
357.553 54.4961 li
360.437 45.9363 li
348.002 45.9363 li
cp
f
361.927 45.9363 mo
359.043 54.4961 li
371.478 54.4961 li
374.362 45.9363 li
361.927 45.9363 li
cp
f
375.852 45.9363 mo
372.968 54.4961 li
385.403 54.4961 li
388.287 45.9363 li
375.852 45.9363 li
cp
f
386.893 54.4961 mo
399.328 54.4961 li
402.212 45.9363 li
389.777 45.9363 li
386.893 54.4961 li
cp
f
365.535 75.0696 mo
365.535 76.5439 li
386.797 76.5439 li
386.797 75.0696 li
386.797 73.6211 385.623 72.4468 384.174 72.4468 cv
368.158 72.4468 li
366.71 72.4468 365.535 73.6211 365.535 75.0696 cv
cp
f
395.876 77.3564 mo
356.457 77.3564 li
354.819 77.3564 353.492 78.6835 353.492 80.3206 cv
353.492 84.4333 li
398.84 84.4333 li
398.84 80.3206 li
398.84 78.6835 397.513 77.3564 395.876 77.3564 cv
cp
f
413.365 23.8906 mo
401.837 58.1506 li
341.305 58.1506 li
342.959 60.4966 li
402.803 60.4966 li
403.461 60.4966 li
403.57 60.1651 li
414.884 25.955 li
413.365 23.8906 li
cp
f
157.167 124.811 mo
157.167 123.303 155.944 122.08 154.435 122.08 cv
147.084 122.08 li
145.575 122.08 144.352 123.303 144.352 124.811 cv
144.352 126.655 li
157.167 126.655 li
157.167 124.811 li
cp
f
149.528 131.758 mo
149.528 134.734 li
146.552 134.734 li
146.552 137.197 li
149.528 137.197 li
149.528 140.173 li
151.991 140.173 li
151.991 137.197 li
154.967 137.197 li
154.967 134.734 li
151.991 134.734 li
151.991 131.758 li
149.528 131.758 li
cp
f
146.552 181.4 mo
149.528 181.4 li
151.991 181.4 li
154.967 181.4 li
154.967 183.864 li
151.991 183.864 li
149.528 183.864 li
146.552 183.864 li
146.552 181.4 li
cp
146.552 166.697 mo
155.44 166.697 li
155.44 167.954 li
146.552 167.954 li
146.552 166.697 li
cp
146.552 163.001 mo
161.44 163.001 li
161.44 164.258 li
146.552 164.258 li
146.552 163.001 li
cp
146.552 159.305 mo
151.94 159.305 li
151.94 160.562 li
146.552 160.562 li
146.552 159.305 li
cp
146.552 155.609 mo
161.44 155.609 li
161.44 156.867 li
146.552 156.867 li
146.552 155.609 li
cp
161.44 160.562 mo
153.996 160.562 li
153.996 159.305 li
161.44 159.305 li
161.44 160.562 li
cp
132.975 187.285 mo
132.975 189.105 134.45 190.58 136.27 190.58 cv
165.249 190.58 li
167.069 190.58 168.544 189.105 168.544 187.285 cv
168.544 148.9 li
132.975 148.9 li
132.975 187.285 li
cp
f
165.307 128.03 mo
136.212 128.03 li
134.424 128.03 132.975 129.479 132.975 131.267 cv
132.975 141.58 li
132.975 143.08 li
132.975 147.788 li
134.475 147.788 li
134.475 143.08 li
134.475 141.58 li
134.475 140.173 li
134.475 131.267 li
134.475 130.309 135.254 129.53 136.212 129.53 cv
165.307 129.53 li
166.265 129.53 167.044 130.309 167.044 131.267 cv
167.044 140.173 li
167.044 141.58 li
167.044 143.08 li
167.044 147.788 li
168.544 147.788 li
168.544 143.08 li
168.544 141.58 li
168.544 131.267 li
168.544 129.479 167.095 128.03 165.307 128.03 cv
cp
f
36.6989 312.279 mo
38.3246 312.274 39.6761 311.795 40.0394 311.152 cv
33.3584 311.152 li
33.7217 311.795 35.0732 312.274 36.6989 312.279 cv
cp
f
22.3555 235.804 mo
40.23 231.009 li
40.4448 230.951 40.665 230.922 40.8848 230.922 cv
42.0205 230.922 43.019 231.688 43.3135 232.786 cv
43.4873 233.435 43.3984 234.114 43.0625 234.696 cv
42.7265 235.278 42.1841 235.694 41.5351 235.868 cv
23.6616 240.664 li
22.3042 241.023 20.9287 240.194 20.5771 238.886 cv
20.2178 237.546 21.0156 236.163 22.3555 235.804 cv
cp
23.0054 242.251 mo
23.352 242.251 23.7021 242.205 24.0483 242.113 cv
41.9238 237.317 li
42.9595 237.039 43.8257 236.375 44.3618 235.445 cv
44.8979 234.517 45.04 233.434 44.7622 232.397 cv
44.2925 230.645 42.6982 229.422 40.8848 229.422 cv
40.5342 229.422 40.1841 229.469 39.8423 229.56 cv
21.9668 234.354 li
19.8276 234.93 18.5547 237.137 19.1284 239.274 cv
19.5986 241.027 21.1924 242.251 23.0054 242.251 cv
cp
f
20.8149 246.403 mo
21.1445 245.817 21.6826 245.395 22.3301 245.215 cv
51.1499 237.156 li
51.3725 237.094 51.6015 237.061 51.8301 237.061 cv
52.9521 237.061 53.9477 237.818 54.2505 238.901 cv
54.4316 239.549 54.3496 240.228 54.02 240.813 cv
53.6904 241.399 53.1523 241.821 52.5049 242.002 cv
23.686 250.06 li
22.3662 250.431 20.9487 249.618 20.5845 248.315 cv
20.4033 247.668 20.4853 246.988 20.8149 246.403 cv
cp
23.0058 251.654 mo
23.3701 251.654 23.7344 251.604 24.0893 251.506 cv
52.9087 243.447 li
53.9419 243.158 54.8008 242.484 55.3271 241.55 cv
55.8535 240.615 55.9839 239.53 55.6948 238.497 cv
55.2114 236.768 53.6221 235.561 51.8301 235.561 cv
51.4648 235.561 51.1001 235.612 50.7456 235.711 cv
21.9263 243.769 li
20.8931 244.059 20.0342 244.732 19.5078 245.667 cv
18.9814 246.602 18.8511 247.686 19.1401 248.72 cv
19.623 250.447 21.2124 251.654 23.0058 251.654 cv
cp
f
20.5918 257.745 mo
20.4038 257.099 20.4785 256.419 20.8022 255.829 cv
21.126 255.24 21.6597 254.812 22.3052 254.625 cv
50.6509 246.383 li
50.8813 246.316 51.1181 246.282 51.355 246.282 cv
52.4658 246.282 53.4585 247.028 53.769 248.097 cv
53.957 248.743 53.8818 249.423 53.5586 250.012 cv
53.2348 250.601 52.7012 251.028 52.0556 251.216 cv
23.709 259.458 li
22.4116 259.835 20.9687 259.04 20.5918 257.745 cv
cp
24.1289 260.897 mo
52.4741 252.656 li
53.5044 252.356 54.3564 251.674 54.873 250.733 cv
55.3896 249.794 55.5093 248.709 55.2095 247.679 cv
54.7139 245.974 53.1289 244.782 51.355 244.782 cv
50.9761 244.782 50.5981 244.836 50.2319 244.943 cv
21.8867 253.185 li
20.8564 253.484 20.0044 254.167 19.4878 255.107 cv
18.9712 256.048 18.8515 257.133 19.1514 258.164 cv
19.6474 259.868 21.2324 261.059 23.0058 261.059 cv
23.3862 261.059 23.7641 261.005 24.1289 260.897 cv
cp
f
27.4162 297.054 mo
45.9816 297.054 li
45.9816 294.303 li
27.4162 294.303 li
27.4162 297.054 li
cp
f
27.1045 266.457 mo
27.1045 263.404 li
27.0649 263.164 li
26.9364 262.784 26.3351 262.096 25.5309 261.531 cv
24.4082 261.857 li
24.1075 261.946 23.7958 261.995 23.4811 262.025 cv
24.394 262.578 li
25.0698 262.989 25.48 263.451 25.6045 263.599 cv
25.6045 266.457 li
27.1045 266.457 li
cp
f
30.9864 259.945 mo
31.647 260.904 32.1372 262.065 32.1372 263.404 cv
32.1372 266.457 li
33.6372 266.457 li
33.6372 263.404 li
33.6372 261.903 33.1551 260.603 32.4833 259.51 cv
30.9864 259.945 li
cp
f
55.2754 255.981 mo
54.5542 254.773 53.2319 254.023 51.8237 254.023 cv
51.102 254.023 50.3911 254.22 49.7681 254.592 cv
45.8022 256.961 li
44.6108 257.684 40.7236 260.372 40.7236 264.654 cv
40.7236 266.457 li
42.2236 266.457 li
42.2236 264.654 li
42.2236 261.156 45.5576 258.863 46.5757 258.246 cv
50.5371 255.88 li
50.9277 255.646 51.3725 255.523 51.8237 255.523 cv
52.7197 255.523 53.5288 255.982 53.9878 256.751 cv
54.332 257.327 54.4316 258.004 54.2671 258.655 cv
54.103 259.308 53.6943 259.856 53.1177 260.201 cv
49.1694 262.559 li
48.2324 263.127 47.417 263.981 47.2724 264.545 cv
47.249 264.638 li
47.2523 266.457 li
48.7523 266.457 li
48.7495 264.9 li
48.8843 264.698 49.2861 264.242 49.9429 263.843 cv
53.8862 261.488 li
54.8076 260.938 55.4595 260.062 55.7217 259.022 cv
55.9839 257.982 55.8257 256.902 55.2754 255.981 cv
cp
f
31.9161 310.284 mo
41.4817 310.284 li
43.4129 308.387 li
29.9848 308.387 li
31.9161 310.284 li
cp
f
43.0156 297.574 mo
30.2634 298.536 li
29.8285 298.568 29.5026 298.948 29.5354 299.382 cv
29.5682 299.817 29.9473 300.143 30.3822 300.11 cv
43.1344 299.149 li
43.5693 299.116 43.8952 298.737 43.8624 298.302 cv
43.8296 297.867 43.4505 297.541 43.0156 297.574 cv
cp
f
43.0156 300.115 mo
30.2634 301.077 li
29.8285 301.11 29.5026 301.489 29.5354 301.924 cv
29.5682 302.358 29.9473 302.684 30.3822 302.652 cv
43.1344 301.69 li
43.5693 301.657 43.8952 301.278 43.8624 300.843 cv
43.8296 300.408 43.4505 300.082 43.0156 300.115 cv
cp
f
43.0156 302.656 mo
30.2634 303.618 li
29.8285 303.651 29.5026 304.03 29.5354 304.465 cv
29.5682 304.9 29.9473 305.226 30.3822 305.193 cv
43.1344 304.231 li
43.5693 304.198 43.8952 303.819 43.8624 303.384 cv
43.8296 302.949 43.4505 302.623 43.0156 302.656 cv
cp
f
43.0156 305.197 mo
30.2634 306.159 li
29.8285 306.192 29.5026 306.571 29.5354 307.006 cv
29.5682 307.441 29.9473 307.767 30.3822 307.734 cv
43.1344 306.772 li
43.5693 306.739 43.8952 306.36 43.8624 305.925 cv
43.8296 305.491 43.4505 305.165 43.0156 305.197 cv
cp
f
20.2511 282.338 mo
53.1467 282.338 li
53.1467 271.927 li
20.2511 271.927 li
20.2511 282.338 li
cp
f
51.1701 270.928 mo
51.1701 267.457 li
22.2277 267.457 li
22.2277 270.928 li
23.7277 270.928 li
23.7277 268.957 li
49.6701 268.957 li
49.6701 270.928 li
51.1701 270.928 li
cp
f
44.4889 293.391 mo
46.5458 293.391 li
49.4138 290.267 51.5434 286.947 52.5889 283.339 cv
51.0225 283.339 li
49.9547 286.709 47.8065 290.02 44.4889 293.391 cv
cp
f
22.3753 283.339 mo
20.8089 283.339 li
21.8544 286.947 23.984 290.267 26.852 293.391 cv
28.9089 293.391 li
25.5913 290.02 23.4431 286.709 22.3753 283.339 cv
cp
f
149.013 257.512 mo
149.433 257.512 149.756 257.296 149.756 256.624 cv
149.756 256.158 li
149.756 255.402 149.433 255.198 149.013 255.198 cv
148.593 255.198 148.269 255.402 148.269 256.158 cv
148.269 256.624 li
148.269 257.296 148.581 257.512 149.013 257.512 cv
cp
f
149.013 261.386 mo
149.433 261.386 149.745 261.182 149.756 260.439 cv
149.756 259.66 li
149.756 258.999 149.48 258.711 149.013 258.711 cv
148.545 258.711 148.269 258.999 148.269 259.66 cv
148.269 260.439 li
148.269 261.182 148.593 261.386 149.013 261.386 cv
cp
f
153.765 261.386 mo
154.185 261.386 154.448 261.159 154.448 260.559 cv
154.448 256.025 li
154.448 255.425 154.185 255.198 153.765 255.198 cv
153.345 255.198 153.081 255.425 153.081 256.025 cv
153.081 260.559 li
153.081 261.159 153.345 261.386 153.765 261.386 cv
cp
f
159.668 262.49 mo
158.357 262.49 li
157.493 256.893 li
158.381 256.893 li
159.053 261.458 li
159.724 256.893 li
160.532 256.893 li
159.668 262.49 li
cp
159.538 284.22 mo
159.538 285.354 158.619 286.273 157.486 286.273 cv
142.09 286.273 li
140.956 286.273 140.037 285.354 140.037 284.22 cv
140.037 268.825 li
140.037 267.691 140.956 266.772 142.09 266.772 cv
157.486 266.772 li
158.619 266.772 159.538 267.691 159.538 268.825 cv
159.538 284.22 li
cp
142.294 259.779 mo
143.541 259.779 li
143.541 260.559 li
143.541 261.159 143.805 261.386 144.225 261.386 cv
144.645 261.386 144.909 261.182 144.909 260.439 cv
144.909 259.779 li
144.909 258.999 144.645 258.711 144.045 258.711 cv
143.601 258.711 li
143.601 257.512 li
144.117 257.512 li
144.609 257.512 144.909 257.296 144.909 256.624 cv
144.909 256.158 li
144.909 255.402 144.645 255.198 144.225 255.198 cv
143.805 255.198 143.541 255.425 143.541 256.025 cv
143.541 256.565 li
142.294 256.565 li
142.294 256.109 li
142.294 254.766 142.966 253.998 144.261 253.998 cv
145.556 253.998 146.228 254.766 146.228 256.109 cv
146.228 256.325 li
146.228 257.225 145.94 257.789 145.304 258.052 cv
145.964 258.34 146.228 258.963 146.228 259.815 cv
146.228 260.475 li
146.228 261.818 145.556 262.585 144.261 262.585 cv
142.966 262.585 142.294 261.818 142.294 260.475 cv
142.294 259.779 li
cp
146.95 259.815 mo
146.95 259.011 147.19 258.388 147.766 258.064 cv
147.214 257.764 146.95 257.201 146.95 256.373 cv
146.95 256.109 li
146.95 254.766 147.682 253.998 149.013 253.998 cv
150.344 253.998 151.076 254.766 151.076 256.109 cv
151.076 256.373 li
151.076 257.201 150.8 257.764 150.26 258.064 cv
150.836 258.388 151.076 259.011 151.076 259.815 cv
151.076 260.475 li
151.076 261.818 150.344 262.585 149.013 262.585 cv
147.682 262.585 146.95 261.818 146.95 260.475 cv
146.95 259.815 li
cp
151.762 256.109 mo
151.762 254.766 152.47 253.998 153.765 253.998 cv
155.06 253.998 155.768 254.766 155.768 256.109 cv
155.768 260.475 li
155.768 261.818 155.06 262.585 153.765 262.585 cv
152.47 262.585 151.762 261.818 151.762 260.475 cv
151.762 256.109 li
cp
164.097 249.13 mo
135.479 249.13 li
133.264 249.13 131.469 251.024 131.469 253.36 cv
131.469 286.731 li
131.469 289.068 133.264 290.961 135.479 290.961 cv
164.097 290.961 li
166.311 290.961 168.106 289.068 168.106 286.731 cv
168.106 253.36 li
168.106 251.024 166.311 249.13 164.097 249.13 cv
cp
f
149.865 269.518 mo
147.521 274.73 li
148.747 274.803 li
146.912 278.222 li
148.404 278.113 li
146.06 283.52 li
152.404 276.793 li
150.435 276.88 li
152.546 273.734 li
150.798 273.867 li
153.565 269.669 li
149.865 269.518 li
cp
f
170.21 225.823 mo
169.101 226.805 168.382 228.355 168.382 230.104 cv
168.382 231.854 169.101 233.404 170.21 234.386 cv
168.499 233.712 167.284 232.054 167.284 230.104 cv
167.284 228.154 168.499 226.496 170.21 225.823 cv
cp
171.793 235.354 mo
174.693 235.354 177.043 233.004 177.043 230.104 cv
177.043 227.205 174.693 224.854 171.793 224.854 cv
168.894 224.854 166.543 227.205 166.543 230.104 cv
166.543 233.004 168.894 235.354 171.793 235.354 cv
cp
f
173.377 262.063 mo
173.377 236.143 li
172.87 236.276 172.341 236.354 171.793 236.354 cv
171.246 236.354 170.717 236.276 170.21 236.143 cv
170.21 262.063 li
170.21 262.753 170.919 263.313 171.793 263.313 cv
172.668 263.313 173.377 262.753 173.377 262.063 cv
cp
f
176.629 260.126 mo
176.6 260.126 li
176.6 277.979 li
176.629 277.979 li
178.201 277.979 179.475 276.705 179.475 275.133 cv
179.475 262.972 li
179.475 261.4 178.201 260.126 176.629 260.126 cv
cp
f
172.002 296.608 mo
171.242 296.608 170.627 295.993 170.627 295.233 cv
170.627 294.474 171.242 293.858 172.002 293.858 cv
172.761 293.858 173.377 294.474 173.377 295.233 cv
173.377 295.993 172.761 296.608 172.002 296.608 cv
cp
127.163 246.421 mo
126.404 246.421 125.788 245.805 125.788 245.046 cv
125.788 244.286 126.404 243.671 127.163 243.671 cv
127.922 243.671 128.538 244.286 128.538 245.046 cv
128.538 245.805 127.922 246.421 127.163 246.421 cv
cp
127.163 296.608 mo
126.404 296.608 125.788 295.993 125.788 295.233 cv
125.788 294.474 126.404 293.858 127.163 293.858 cv
127.922 293.858 128.538 294.474 128.538 295.233 cv
128.538 295.993 127.922 296.608 127.163 296.608 cv
cp
169.106 278.979 mo
169.106 286.731 li
169.106 289.615 166.859 291.962 164.097 291.962 cv
135.479 291.962 li
132.716 291.962 130.469 289.615 130.469 286.731 cv
130.469 253.359 li
130.469 250.476 132.716 248.13 135.479 248.13 cv
164.097 248.13 li
166.655 248.13 168.747 250.149 169.046 252.736 cv
169.11 252.736 li
169.11 241.045 li
127.485 241.045 li
125.098 241.045 123.163 242.98 123.163 245.367 cv
123.163 294.724 li
123.163 297.111 125.098 299.046 127.485 299.046 cv
172.09 299.046 li
174.477 299.046 176.412 297.111 176.412 294.724 cv
176.412 278.979 li
175.6 278.979 li
169.106 278.979 li
cp
f
174.477 241.767 mo
174.477 259.126 li
175.6 259.126 li
176.412 259.126 li
176.412 245.367 li
176.412 243.863 175.643 242.541 174.477 241.767 cv
cp
f
169.106 262.018 mo
169.106 277.979 li
175.502 277.979 li
175.502 260.126 li
174.377 260.126 li
174.377 262.062 li
174.377 263.303 173.218 264.312 171.793 264.312 cv
170.369 264.312 169.21 263.303 169.21 262.062 cv
169.21 262.018 li
169.106 262.018 li
cp
f
248.169 262.729 mo
278.373 262.729 li
278.373 260.896 li
248.169 260.896 li
248.169 262.729 li
cp
f
274.159 265.41 mo
273.851 265.41 273.6 265.159 273.6 264.85 cv
273.6 264.541 273.851 264.291 274.159 264.291 cv
274.468 264.291 274.719 264.541 274.719 264.85 cv
274.719 265.159 274.468 265.41 274.159 265.41 cv
cp
274.159 274.506 mo
273.851 274.506 273.6 274.256 273.6 273.947 cv
273.6 273.638 273.851 273.387 274.159 273.387 cv
274.468 273.387 274.719 273.638 274.719 273.947 cv
274.719 274.256 274.468 274.506 274.159 274.506 cv
cp
274.159 283.299 mo
273.851 283.299 273.6 283.048 273.6 282.739 cv
273.6 282.43 273.851 282.18 274.159 282.18 cv
274.468 282.18 274.719 282.43 274.719 282.739 cv
274.719 283.048 274.468 283.299 274.159 283.299 cv
cp
272.053 275.711 mo
254.49 275.711 li
254.49 264.785 li
272.053 264.785 li
272.053 275.711 li
cp
263.271 283.299 mo
262.962 283.299 262.712 283.048 262.712 282.739 cv
262.712 282.43 262.962 282.18 263.271 282.18 cv
263.58 282.18 263.831 282.43 263.831 282.739 cv
263.831 283.048 263.58 283.299 263.271 283.299 cv
cp
252.295 265.41 mo
251.986 265.41 251.736 265.159 251.736 264.85 cv
251.736 264.541 251.986 264.291 252.295 264.291 cv
252.604 264.291 252.855 264.541 252.855 264.85 cv
252.855 265.159 252.604 265.41 252.295 265.41 cv
cp
252.295 274.506 mo
251.986 274.506 251.736 274.256 251.736 273.947 cv
251.736 273.638 251.986 273.387 252.295 273.387 cv
252.604 273.387 252.855 273.638 252.855 273.947 cv
252.855 274.256 252.604 274.506 252.295 274.506 cv
cp
252.295 283.299 mo
251.986 283.299 251.736 283.048 251.736 282.739 cv
251.736 282.43 251.986 282.18 252.295 282.18 cv
252.604 282.18 252.855 282.43 252.855 282.739 cv
252.855 283.048 252.604 283.299 252.295 283.299 cv
cp
275.509 263.44 mo
251.034 263.44 li
251.034 284.149 li
275.509 284.149 li
275.509 263.44 li
cp
f
270.924 274.771 mo
269.972 274.771 li
269.972 265.725 li
270.924 265.725 li
270.924 274.771 li
cp
269.329 274.771 mo
268.377 274.771 li
268.377 265.725 li
269.329 265.725 li
269.329 274.771 li
cp
267.734 274.771 mo
266.782 274.771 li
266.782 265.725 li
267.734 265.725 li
267.734 274.771 li
cp
266.14 274.771 mo
265.187 274.771 li
265.187 265.725 li
266.14 265.725 li
266.14 274.771 li
cp
264.545 274.771 mo
263.593 274.771 li
263.593 265.725 li
264.545 265.725 li
264.545 274.771 li
cp
262.95 274.771 mo
261.998 274.771 li
261.998 265.725 li
262.95 265.725 li
262.95 274.771 li
cp
261.355 274.771 mo
260.403 274.771 li
260.403 265.725 li
261.355 265.725 li
261.355 274.771 li
cp
259.76 274.771 mo
258.808 274.771 li
258.808 265.725 li
259.76 265.725 li
259.76 274.771 li
cp
258.165 274.771 mo
257.213 274.771 li
257.213 265.725 li
258.165 265.725 li
258.165 274.771 li
cp
256.57 274.771 mo
255.618 274.771 li
255.618 265.725 li
256.57 265.725 li
256.57 274.771 li
cp
271.519 265.249 mo
255.023 265.249 li
255.023 275.247 li
271.519 275.247 li
271.519 265.249 li
cp
f
252.448 255.51 mo
252.448 255.784 li
252.448 256.122 252.723 256.397 253.061 256.397 cv
255.918 256.397 li
256.256 256.397 256.531 256.122 256.531 255.784 cv
256.531 255.51 li
256.531 255.171 256.256 254.897 255.918 254.897 cv
253.061 254.897 li
252.723 254.897 252.448 255.171 252.448 255.51 cv
cp
f
252.448 257.712 mo
252.448 258.05 252.723 258.325 253.061 258.325 cv
255.918 258.325 li
256.256 258.325 256.531 258.05 256.531 257.712 cv
256.531 257.438 li
256.531 257.1 256.256 256.825 255.918 256.825 cv
253.061 256.825 li
252.723 256.825 252.448 257.1 252.448 257.438 cv
252.448 257.712 li
cp
f
252.448 259.64 mo
252.448 259.979 252.723 260.253 253.061 260.253 cv
255.918 260.253 li
256.256 260.253 256.531 259.979 256.531 259.64 cv
256.531 259.366 li
256.531 259.028 256.256 258.753 255.918 258.753 cv
253.061 258.753 li
252.723 258.753 252.448 259.028 252.448 259.366 cv
252.448 259.64 li
cp
f
253.918 253.455 mo
253.918 254.361 li
255.061 254.361 li
255.061 253.455 li
253.918 253.455 li
cp
f
261.23 255.51 mo
261.23 255.784 li
261.23 256.122 261.504 256.397 261.843 256.397 cv
264.699 256.397 li
265.038 256.397 265.312 256.122 265.312 255.784 cv
265.312 255.51 li
265.312 255.171 265.038 254.897 264.699 254.897 cv
261.843 254.897 li
261.504 254.897 261.23 255.171 261.23 255.51 cv
cp
f
261.23 257.712 mo
261.23 258.05 261.504 258.325 261.843 258.325 cv
264.699 258.325 li
265.038 258.325 265.312 258.05 265.312 257.712 cv
265.312 257.438 li
265.312 257.1 265.038 256.825 264.699 256.825 cv
261.843 256.825 li
261.504 256.825 261.23 257.1 261.23 257.438 cv
261.23 257.712 li
cp
f
261.23 259.64 mo
261.23 259.979 261.504 260.253 261.843 260.253 cv
264.699 260.253 li
265.038 260.253 265.312 259.979 265.312 259.64 cv
265.312 259.366 li
265.312 259.028 265.038 258.753 264.699 258.753 cv
261.843 258.753 li
261.504 258.753 261.23 259.028 261.23 259.366 cv
261.23 259.64 li
cp
f
262.7 253.455 mo
262.7 254.361 li
263.842 254.361 li
263.842 253.455 li
262.7 253.455 li
cp
f
270.625 256.397 mo
273.481 256.397 li
273.82 256.397 274.094 256.122 274.094 255.784 cv
274.094 255.51 li
274.094 255.171 273.82 254.897 273.481 254.897 cv
270.625 254.897 li
270.286 254.897 270.012 255.171 270.012 255.51 cv
270.012 255.784 li
270.012 256.122 270.286 256.397 270.625 256.397 cv
cp
f
270.625 258.325 mo
273.481 258.325 li
273.82 258.325 274.094 258.05 274.094 257.712 cv
274.094 257.438 li
274.094 257.1 273.82 256.825 273.481 256.825 cv
270.625 256.825 li
270.286 256.825 270.012 257.1 270.012 257.438 cv
270.012 257.712 li
270.012 258.05 270.286 258.325 270.625 258.325 cv
cp
f
270.625 260.253 mo
273.481 260.253 li
273.82 260.253 274.094 259.979 274.094 259.64 cv
274.094 259.366 li
274.094 259.028 273.82 258.753 273.481 258.753 cv
270.625 258.753 li
270.286 258.753 270.012 259.028 270.012 259.366 cv
270.012 259.64 li
270.012 259.979 270.286 260.253 270.625 260.253 cv
cp
f
272.624 253.455 mo
271.482 253.455 li
271.482 254.361 li
272.624 254.361 li
272.624 253.455 li
cp
f
244.583 234.535 mo
246.301 234.535 247.693 233.143 247.693 231.425 cv
247.693 229.707 246.301 228.314 244.583 228.314 cv
242.865 228.314 241.472 229.707 241.472 231.425 cv
241.472 233.143 242.865 234.535 244.583 234.535 cv
cp
f
263.205 234.535 mo
264.923 234.535 266.315 233.143 266.315 231.425 cv
266.315 229.707 264.923 228.314 263.205 228.314 cv
261.487 228.314 260.094 229.707 260.094 231.425 cv
260.094 233.143 261.487 234.535 263.205 234.535 cv
cp
f
281.96 229.064 mo
283.261 229.064 284.321 230.123 284.321 231.425 cv
284.321 232.726 283.261 233.785 281.96 233.785 cv
280.658 233.785 279.599 232.726 279.599 231.425 cv
279.599 230.123 280.658 229.064 281.96 229.064 cv
cp
281.96 235.285 mo
284.089 235.285 285.821 233.554 285.821 231.425 cv
285.821 229.296 284.089 227.564 281.96 227.564 cv
279.831 227.564 278.099 229.296 278.099 231.425 cv
278.099 233.554 279.831 235.285 281.96 235.285 cv
cp
f
300.649 253.224 mo
302.367 253.224 303.759 251.831 303.759 250.113 cv
303.759 248.395 302.367 247.003 300.649 247.003 cv
298.931 247.003 297.538 248.395 297.538 250.113 cv
297.538 251.831 298.931 253.224 300.649 253.224 cv
cp
f
300.649 266.441 mo
301.951 266.441 303.009 267.501 303.009 268.803 cv
303.009 270.104 301.951 271.163 300.649 271.163 cv
299.347 271.163 298.288 270.104 298.288 268.803 cv
298.288 267.501 299.347 266.441 300.649 266.441 cv
cp
300.649 272.663 mo
302.778 272.663 304.509 270.932 304.509 268.803 cv
304.509 266.674 302.778 264.941 300.649 264.941 cv
298.52 264.941 296.788 266.674 296.788 268.803 cv
296.788 270.932 298.52 272.663 300.649 272.663 cv
cp
f
300.649 284.38 mo
298.931 284.38 297.538 285.773 297.538 287.491 cv
297.538 289.209 298.931 290.601 300.649 290.601 cv
302.367 290.601 303.759 289.209 303.759 287.491 cv
303.759 285.773 302.367 284.38 300.649 284.38 cv
cp
f
281.96 308.54 mo
280.658 308.54 279.599 307.481 279.599 306.18 cv
279.599 304.878 280.658 303.819 281.96 303.819 cv
283.261 303.819 284.321 304.878 284.321 306.18 cv
284.321 307.481 283.261 308.54 281.96 308.54 cv
cp
281.96 302.319 mo
279.831 302.319 278.099 304.051 278.099 306.18 cv
278.099 308.308 279.831 310.04 281.96 310.04 cv
284.089 310.04 285.821 308.308 285.821 306.18 cv
285.821 304.051 284.089 302.319 281.96 302.319 cv
cp
f
263.355 303.069 mo
261.637 303.069 260.245 304.462 260.245 306.18 cv
260.245 307.898 261.637 309.29 263.355 309.29 cv
265.073 309.29 266.466 307.898 266.466 306.18 cv
266.466 304.462 265.073 303.069 263.355 303.069 cv
cp
f
244.583 308.54 mo
243.281 308.54 242.222 307.481 242.222 306.18 cv
242.222 304.878 243.281 303.819 244.583 303.819 cv
245.884 303.819 246.943 304.878 246.943 306.18 cv
246.943 307.481 245.884 308.54 244.583 308.54 cv
cp
244.583 302.319 mo
242.454 302.319 240.722 304.051 240.722 306.18 cv
240.722 308.308 242.454 310.04 244.583 310.04 cv
246.712 310.04 248.443 308.308 248.443 306.18 cv
248.443 304.051 246.712 302.319 244.583 302.319 cv
cp
f
225.894 289.851 mo
224.592 289.851 223.533 288.793 223.533 287.491 cv
223.533 286.189 224.592 285.131 225.894 285.131 cv
227.196 285.131 228.255 286.189 228.255 287.491 cv
228.255 288.793 227.196 289.851 225.894 289.851 cv
cp
225.894 283.631 mo
223.765 283.631 222.033 285.362 222.033 287.491 cv
222.033 289.62 223.765 291.351 225.894 291.351 cv
228.023 291.351 229.755 289.62 229.755 287.491 cv
229.755 285.362 228.023 283.631 225.894 283.631 cv
cp
f
225.894 271.913 mo
227.612 271.913 229.005 270.52 229.005 268.802 cv
229.005 267.084 227.612 265.692 225.894 265.692 cv
224.176 265.692 222.783 267.084 222.783 268.802 cv
222.783 270.52 224.176 271.913 225.894 271.913 cv
cp
f
262.426 250.959 mo
262.426 252.455 li
264.117 252.455 li
264.117 250.113 li
264.117 235.425 li
263.822 235.492 263.519 235.535 263.205 235.535 cv
262.938 235.535 262.678 235.505 262.426 235.456 cv
262.426 249.268 li
245.428 249.268 li
245.428 235.446 li
245.155 235.503 244.873 235.535 244.583 235.535 cv
244.293 235.535 244.01 235.503 243.737 235.446 cv
243.737 249.268 li
230.732 249.268 li
230.732 250.959 li
244.583 250.959 li
262.426 250.959 li
cp
f
296.627 249.268 mo
282.806 249.268 li
282.806 236.186 li
281.115 236.186 li
281.115 250.113 li
281.115 267.956 li
276.508 267.956 li
276.508 269.647 li
281.96 269.647 li
295.815 269.647 li
295.815 267.956 li
282.806 267.956 li
282.806 250.959 li
296.627 250.959 li
296.57 250.686 296.538 250.403 296.538 250.113 cv
296.538 249.823 296.57 249.541 296.627 249.268 cv
cp
f
281.96 286.645 mo
264.117 286.645 li
264.117 285.149 li
262.426 285.149 li
262.426 287.491 li
262.426 302.185 li
262.726 302.115 263.034 302.069 263.355 302.069 cv
263.616 302.069 263.869 302.1 264.117 302.146 cv
264.117 288.336 li
281.115 288.336 li
281.115 301.477 li
282.806 301.477 li
282.806 288.336 li
296.627 288.336 li
296.57 288.063 296.538 287.781 296.538 287.491 cv
296.538 287.201 296.57 286.919 296.627 286.645 cv
281.96 286.645 li
cp
f
229.915 267.956 mo
229.972 268.23 230.005 268.512 230.005 268.803 cv
230.005 269.092 229.973 269.374 229.916 269.647 cv
243.737 269.647 li
243.737 286.645 li
230.732 286.645 li
230.732 288.336 li
243.737 288.336 li
243.737 301.352 li
245.428 301.352 li
245.428 287.491 li
245.428 269.647 li
250.034 269.647 li
250.034 267.956 li
244.583 267.956 li
229.915 267.956 li
cp
f
225.894 252.474 mo
224.592 252.474 223.533 251.415 223.533 250.113 cv
223.533 248.811 224.592 247.753 225.894 247.753 cv
227.196 247.753 228.255 248.811 228.255 250.113 cv
228.255 251.415 227.196 252.474 225.894 252.474 cv
cp
225.894 246.253 mo
223.765 246.253 222.033 247.984 222.033 250.113 cv
222.033 252.242 223.765 253.974 225.894 253.974 cv
228.023 253.974 229.755 252.242 229.755 250.113 cv
229.755 247.984 228.023 246.253 225.894 246.253 cv
cp
f
233.406 360.256 mo
265.882 360.256 li
266.509 360.256 267.017 359.747 267.017 359.12 cv
267.017 358.493 266.509 357.985 265.882 357.985 cv
233.406 357.985 li
232.779 357.985 232.271 358.493 232.271 359.12 cv
232.271 359.747 232.779 360.256 233.406 360.256 cv
cp
f
247.872 386.859 mo
247.872 387.838 248.665 388.631 249.644 388.631 cv
250.623 388.631 251.417 387.838 251.417 386.859 cv
251.417 385.88 250.623 385.087 249.644 385.087 cv
248.665 385.087 247.872 385.88 247.872 386.859 cv
cp
f
248.466 384.818 mo
245.55 379.768 li
242.926 381.283 241.46 384.032 241.457 386.859 cv
247.284 386.859 li
247.284 385.987 247.761 385.226 248.466 384.818 cv
cp
f
252.004 386.859 mo
257.832 386.859 li
257.833 385.467 257.481 384.057 256.736 382.765 cv
255.99 381.473 254.944 380.463 253.738 379.769 cv
250.823 384.818 li
251.528 385.226 252.004 385.987 252.004 386.859 cv
cp
f
249.644 389.219 mo
249.215 389.219 248.813 389.102 248.466 388.9 cv
245.551 393.949 li
248 395.361 251.114 395.466 253.738 393.95 cv
250.823 388.9 li
250.475 389.102 250.074 389.219 249.644 389.219 cv
cp
f
258.726 386.859 mo
258.726 391.866 254.651 395.94 249.644 395.94 cv
244.636 395.94 240.562 391.866 240.562 386.859 cv
240.562 381.851 244.636 377.777 249.644 377.777 cv
254.651 377.777 258.726 381.851 258.726 386.859 cv
cp
239.397 386.859 mo
239.397 392.509 243.994 397.106 249.644 397.106 cv
255.294 397.106 259.891 392.509 259.891 386.859 cv
259.891 381.208 255.294 376.611 249.644 376.611 cv
243.994 376.611 239.397 381.208 239.397 386.859 cv
cp
f
251.773 356.286 mo
252.312 356.286 252.787 356.025 253.09 355.626 cv
253.611 356.033 254.258 356.286 254.971 356.286 cv
256.008 356.286 256.921 355.768 257.476 354.981 cv
258.41 355.783 259.608 356.286 260.936 356.286 cv
262.913 356.286 264.619 355.198 265.54 353.599 cv
266.233 354.027 267.043 354.286 267.918 354.286 cv
269.984 354.286 271.709 352.899 272.263 351.012 cv
272.681 351.188 273.141 351.286 273.623 351.286 cv
274.81 351.286 275.854 350.694 276.489 349.793 cv
276.882 350.097 277.37 350.286 277.906 350.286 cv
279.19 350.286 280.23 349.245 280.23 347.962 cv
280.23 346.678 279.19 345.637 277.906 345.637 cv
277.439 345.637 277.007 345.778 276.642 346.014 cv
276.033 344.973 274.916 344.266 273.623 344.266 cv
272.31 344.266 271.179 344.996 270.577 346.063 cv
269.828 345.52 268.914 345.191 267.918 345.191 cv
266.48 345.191 265.213 345.871 264.38 346.914 cv
263.448 346.119 262.256 345.621 260.936 345.621 cv
258.237 345.621 256.03 347.634 255.676 350.235 cv
255.449 350.182 255.214 350.146 254.971 350.146 cv
253.354 350.146 252.044 351.4 251.924 352.986 cv
251.874 352.981 251.825 352.97 251.773 352.97 cv
250.857 352.97 250.115 353.713 250.115 354.628 cv
250.115 355.544 250.857 356.286 251.773 356.286 cv
cp
f
264.771 343.849 mo
265.642 343.849 266.349 343.142 266.349 342.271 cv
266.349 341.399 265.642 340.692 264.771 340.692 cv
263.899 340.692 263.193 341.399 263.193 342.271 cv
263.193 343.142 263.899 343.849 264.771 343.849 cv
cp
f
269.505 344.266 mo
270.085 344.266 270.555 343.796 270.555 343.216 cv
270.555 342.637 270.085 342.167 269.505 342.167 cv
268.925 342.167 268.455 342.637 268.455 343.216 cv
268.455 343.796 268.925 344.266 269.505 344.266 cv
cp
f
278.183 352.97 mo
278.183 352.391 277.713 351.92 277.133 351.92 cv
276.553 351.92 276.083 352.391 276.083 352.97 cv
276.083 353.55 276.553 354.02 277.133 354.02 cv
277.713 354.02 278.183 353.55 278.183 352.97 cv
cp
f
277.344 342.753 mo
278.571 342.753 279.565 341.759 279.565 340.533 cv
279.565 339.307 278.571 338.312 277.344 338.312 cv
276.118 338.312 275.124 339.307 275.124 340.533 cv
275.124 341.759 276.118 342.753 277.344 342.753 cv
cp
f
277.033 367.99 mo
276.985 367.987 276.94 367.976 276.891 367.976 cv
275.886 367.976 275.061 368.716 274.913 369.68 cv
274.872 369.675 274.835 369.655 274.792 369.655 cv
274.147 369.655 273.623 370.179 273.623 370.825 cv
273.623 371.47 274.147 371.994 274.792 371.994 cv
275.15 371.994 275.458 371.825 275.673 371.572 cv
276.012 371.833 276.431 371.994 276.891 371.994 cv
277.542 371.994 278.115 371.679 278.482 371.2 cv
279.117 371.69 279.904 371.994 280.769 371.994 cv
282.118 371.994 283.293 371.277 283.956 370.209 cv
284.399 370.44 284.895 370.583 285.429 370.583 cv
286.843 370.583 288.03 369.663 288.457 368.393 cv
288.643 368.437 288.834 368.467 289.034 368.467 cv
289.844 368.467 290.557 368.073 291.008 367.471 cv
291.273 367.654 291.592 367.762 291.938 367.762 cv
292.844 367.762 293.578 367.028 293.578 366.123 cv
293.578 365.217 292.844 364.483 291.938 364.483 cv
291.646 364.483 291.375 364.566 291.137 364.7 cv
290.701 363.993 289.926 363.516 289.034 363.516 cv
288.187 363.516 287.44 363.943 286.994 364.592 cv
286.529 364.33 286.001 364.168 285.429 364.168 cv
284.475 364.168 283.628 364.593 283.041 365.254 cv
282.408 364.77 281.627 364.472 280.769 364.472 cv
278.775 364.472 277.16 366.029 277.033 367.99 cv
cp
f
289.693 371.548 mo
290.092 371.548 290.416 371.224 290.416 370.825 cv
290.416 370.425 290.092 370.102 289.693 370.102 cv
289.294 370.102 288.97 370.425 288.97 370.825 cv
288.97 371.224 289.294 371.548 289.693 371.548 cv
cp
f
288.425 362.023 mo
289.224 362.023 289.871 361.375 289.871 360.577 cv
289.871 359.779 289.224 359.132 288.425 359.132 cv
287.627 359.132 286.98 359.779 286.98 360.577 cv
286.98 361.375 287.627 362.023 288.425 362.023 cv
cp
f
284.064 363.504 mo
284.473 363.504 284.804 363.172 284.804 362.763 cv
284.804 362.354 284.473 362.023 284.064 362.023 cv
283.655 362.023 283.323 362.354 283.323 362.763 cv
283.323 363.172 283.655 363.504 284.064 363.504 cv
cp
f
291.859 362.449 mo
292.188 362.449 292.456 362.182 292.456 361.852 cv
292.456 361.523 292.188 361.255 291.859 361.255 cv
291.529 361.255 291.262 361.523 291.262 361.852 cv
291.262 362.182 291.529 362.449 291.859 362.449 cv
cp
f
266.338 361.08 mo
264.832 361.08 li
264.09 382.651 268.983 399.852 274.06 413.926 cv
225.228 413.926 li
230.305 399.852 235.198 382.651 234.455 361.08 cv
232.949 361.08 li
233.711 382.936 228.61 400.286 223.454 414.419 cv
223.085 415.426 li
276.203 415.426 li
275.834 414.419 li
270.678 400.286 265.577 382.936 266.338 361.08 cv
cp
f
267.692 375.54 mo
289.022 375.54 li
289.473 375.54 289.838 375.175 289.838 374.724 cv
289.838 374.273 289.473 373.907 289.022 373.907 cv
267.567 373.907 li
267.605 374.455 267.647 374.999 267.692 375.54 cv
cp
f
293.422 402.169 mo
289.047 402.169 li
289.047 399.169 li
293.422 399.169 li
293.422 402.169 li
cp
285.056 402.169 mo
280.681 402.169 li
280.681 399.169 li
285.056 399.169 li
285.056 402.169 li
cp
294.348 396.231 mo
271.179 396.231 li
271.63 398.022 272.109 399.768 272.605 401.474 cv
272.605 399.169 li
276.98 399.169 li
276.98 402.169 li
272.811 402.169 li
274.042 406.329 275.379 410.244 276.72 413.926 cv
276.738 413.975 276.756 414.027 276.774 414.076 cv
276.993 414.676 li
283.868 414.676 li
297.133 414.676 li
297.133 402.73 li
297.133 399.016 li
297.133 397.478 295.886 396.231 294.348 396.231 cv
cp
f
303.922 408.453 mo
299.547 408.453 li
299.547 405.453 li
303.922 405.453 li
303.922 408.453 li
cp
304.707 402.73 mo
298.133 402.73 li
298.133 414.746 li
307.477 414.746 li
307.477 405.5 li
307.477 403.97 306.237 402.73 304.707 402.73 cv
cp
f
290.962 395.23 mo
289.922 389.538 289.332 383.306 289.547 376.453 cv
289.38 376.504 289.206 376.54 289.022 376.54 cv
288.042 376.54 li
287.838 383.354 288.417 389.556 289.437 395.23 cv
290.962 395.23 li
cp
f
382.481 296.326 mo
388.132 296.326 li
388.132 295.163 li
382.481 295.163 li
382.481 296.326 li
cp
f
346.277 261.421 mo
346.438 261.455 346.6 261.484 346.762 261.517 cv
349.503 248.008 li
349.504 248.007 349.506 248.007 349.508 248.006 cv
350.689 245.704 li
350.518 243.01 li
348.803 242.662 li
347.602 245.077 li
347.793 247.658 li
347.794 247.66 347.795 247.66 347.797 247.662 cv
345.063 261.138 li
345.465 261.226 345.868 261.335 346.277 261.421 cv
cp
f
350.317 283.371 mo
350.319 283.377 350.322 283.386 350.325 283.392 cv
348.025 284.263 li
347.901 284.217 347.778 284.17 347.651 284.105 cv
347.24 283.911 346.848 283.646 346.488 283.318 cv
345.322 282.264 344.641 280.688 344.62 279.003 cv
344.62 278.872 344.623 278.742 344.626 278.619 cv
344.701 276.878 345.468 275.304 346.729 274.304 cv
347.071 274.035 347.261 273.614 347.24 273.235 cv
347.24 273.235 347.131 272.2 347.099 271.845 cv
347.006 270.887 346.942 269.95 346.908 269.064 cv
346.893 268.596 346.883 268.128 346.878 267.657 cv
346.875 267.432 346.943 267.218 347.073 267.04 cv
347.247 266.801 347.516 266.658 347.849 266.657 cv
348.373 266.674 348.788 267.108 348.794 267.643 cv
348.8 268.553 348.859 269.466 348.916 270.35 cv
348.94 270.732 348.965 271.115 348.986 271.5 cv
349.052 272.665 349.362 273.65 349.388 273.73 cv
349.948 275.09 li
350.17 275.629 351.093 279.086 349.792 281.442 cv
349.696 281.651 349.684 281.679 350.317 283.371 cv
cp
354.523 289.917 mo
351.946 282.778 li
351.26 283.037 li
351.259 283.033 351.256 283.026 351.254 283.021 cv
351.077 282.547 350.879 281.982 350.786 281.701 cv
352.295 278.694 350.887 274.746 350.873 274.708 cv
350.328 273.389 li
350.325 273.38 350.043 272.483 349.984 271.445 cv
349.963 271.058 349.939 270.672 349.914 270.285 cv
349.858 269.416 349.799 268.518 349.794 267.634 cv
349.781 266.56 348.941 265.691 347.795 265.658 cv
347.198 265.658 346.625 265.955 346.264 266.451 cv
346.007 266.805 345.874 267.226 345.878 267.668 cv
345.883 268.145 345.893 268.619 345.908 269.1 cv
345.943 270.008 346.011 270.964 346.103 271.938 cv
346.137 272.299 346.242 273.222 346.242 273.222 cv
346.248 273.338 346.199 273.448 346.11 273.518 cv
344.619 274.701 343.714 276.545 343.626 278.583 cv
343.623 278.723 343.62 278.862 343.62 279.01 cv
343.645 280.978 344.446 282.819 345.816 284.06 cv
346.112 284.329 346.431 284.548 346.757 284.744 cv
343.826 285.855 li
343.466 284.83 343.056 283.653 343.019 283.523 cv
342.94 283.202 li
342.614 283.149 li
340.704 282.838 339.933 281.256 339.411 279.58 cv
338.99 279.378 338.582 279.154 338.174 278.93 cv
338.724 280.93 339.522 283.476 342.15 284.077 cv
342.312 284.559 342.632 285.476 342.89 286.209 cv
341.673 286.671 li
348.009 304.684 li
349.04 307.55 352.199 309.038 355.065 308.007 cv
355.17 307.97 li
356.62 307.448 357.715 306.381 358.312 305.084 cv
362.253 298.61 li
361.646 278.185 li
354.523 289.917 li
cp
f
338.565 275.916 mo
338.689 275.521 339.025 275.247 339.387 275.247 cv
339.471 275.247 339.557 275.262 339.642 275.29 cv
339.887 275.371 340.152 275.254 340.257 275.018 cv
340.361 274.783 340.27 274.507 340.046 274.38 cv
339.388 274.014 li
338.909 273.653 338.726 273.178 338.883 272.708 cv
339.076 272.127 339.718 271.809 340.304 272.049 cv
340.544 272.148 340.824 272.044 340.941 271.809 cv
341.058 271.573 340.973 271.288 340.747 271.155 cv
340.666 271.107 340.592 271.063 340.491 270.999 cv
339.93 270.706 339.63 270.269 339.67 269.801 cv
339.703 269.418 339.958 269.105 340.337 268.985 cv
340.52 268.927 340.653 268.768 340.68 268.577 cv
340.706 268.387 340.621 268.198 340.46 268.092 cv
340.079 267.84 339.912 267.413 340.035 267.004 cv
340.184 266.51 340.698 266.216 341.412 266.216 cv
342.822 266.351 li
343.163 266.384 343.47 266.531 343.686 266.766 cv
343.887 266.983 343.982 267.252 343.953 267.553 cv
343.899 268.085 343.386 268.486 342.757 268.486 cv
342.709 268.486 342.659 268.484 342.596 268.477 cv
342.273 268.453 li
342.043 268.432 341.823 268.579 341.755 268.804 cv
341.686 269.028 341.782 269.27 341.986 269.387 cv
342.704 269.793 li
343.302 270.13 343.556 270.816 343.255 271.35 cv
342.998 271.807 342.315 271.966 341.75 271.698 cv
341.507 271.585 341.216 271.68 341.092 271.921 cv
340.969 272.16 341.056 272.454 341.29 272.586 cv
342.353 273.185 li
342.65 273.352 342.87 273.611 342.972 273.915 cv
343.067 274.199 343.045 274.488 342.894 274.757 cv
342.648 275.191 342.044 275.37 341.502 275.176 cv
341.26 275.087 340.985 275.201 340.878 275.436 cv
340.77 275.673 340.859 275.953 341.086 276.081 cv
341.426 276.272 li
341.857 276.517 342.012 277.066 341.753 277.523 cv
341.518 277.94 340.946 278.101 340.527 277.864 cv
339 277.005 li
338.425 276.609 338.505 276.111 338.565 275.916 cv
cp
340.036 278.735 mo
340.32 278.895 340.644 278.98 340.969 278.98 cv
341.653 278.98 342.288 278.61 342.639 277.989 cv
342.972 277.399 342.953 276.705 342.652 276.149 cv
343.127 275.993 343.524 275.674 343.78 275.221 cv
344.057 274.729 344.107 274.153 343.92 273.597 cv
343.795 273.225 343.574 272.893 343.28 272.627 cv
343.638 272.454 343.937 272.178 344.142 271.814 cv
344.602 270.999 344.392 269.971 343.696 269.296 cv
344.383 268.999 344.875 268.382 344.95 267.621 cv
345.006 267.063 344.818 266.519 344.422 266.089 cv
344.039 265.673 343.506 265.413 342.922 265.355 cv
341.582 265.22 li
341.412 265.216 li
340.023 265.216 339.296 265.99 339.077 266.716 cv
338.901 267.301 339.017 267.915 339.362 268.399 cv
338.972 268.726 338.719 269.193 338.674 269.716 cv
338.63 270.227 338.783 270.715 339.091 271.122 cv
338.559 271.351 338.13 271.805 337.934 272.391 cv
337.688 273.127 337.878 273.899 338.463 274.514 cv
338.07 274.756 337.758 275.145 337.61 275.618 cv
337.351 276.453 337.666 277.3 338.47 277.852 cv
340.036 278.735 li
cp
f
340.495 279.929 mo
340.312 279.929 340.134 279.893 339.955 279.859 cv
340.29 280.459 341.724 280.928 342.888 280.984 cv
342.726 280.351 342.628 279.695 342.62 279.022 cv
342.62 279.007 342.62 278.995 342.62 278.98 cv
342.072 279.572 341.309 279.929 340.495 279.929 cv
cp
f
345.233 266.227 mo
345.299 266.102 345.371 265.979 345.456 265.863 cv
345.951 265.183 346.713 264.77 347.528 264.691 cv
347.455 263.755 li
347.688 263.803 li
347.92 263.85 348.147 263.7 348.194 263.467 cv
348.196 263.459 li
348.243 263.226 348.093 263 347.861 262.953 cv
343.538 262.076 li
343.305 262.028 343.079 262.179 343.031 262.411 cv
343.03 262.419 li
342.983 262.652 343.133 262.878 343.365 262.925 cv
343.598 262.973 li
343.006 264.115 li
342.981 264.204 342.96 264.293 342.935 264.382 cv
343.609 264.528 344.223 264.859 344.684 265.36 cv
344.925 265.622 345.099 265.917 345.233 266.227 cv
cp
f
372.139 248.884 mo
374.155 250.029 li
375.156 250.598 376.287 250.897 377.439 250.897 cv
386.642 250.897 li
387.793 250.897 388.924 250.598 389.925 250.029 cv
391.941 248.884 li
392.27 248.697 392.641 248.599 393.019 248.599 cv
395.479 248.599 li
395.479 247.443 li
395.111 247.443 li
395.111 244.932 li
395.111 244.592 394.832 244.313 394.491 244.313 cv
394.28 244.313 li
394.287 244.374 394.287 244.428 394.287 244.49 cv
394.287 247.443 li
389.918 247.443 li
389.918 244.932 li
389.918 244.591 389.641 244.315 389.301 244.315 cv
386.903 244.315 li
386.562 244.315 386.286 244.591 386.286 244.932 cv
386.286 247.443 li
377.794 247.443 li
377.794 244.932 li
377.794 244.591 377.518 244.315 377.177 244.315 cv
374.78 244.315 li
374.439 244.315 374.162 244.591 374.162 244.932 cv
374.162 247.443 li
369.793 247.443 li
369.793 244.49 li
369.793 244.428 369.793 244.374 369.8 244.313 cv
369.589 244.313 li
369.248 244.313 368.969 244.592 368.969 244.932 cv
368.969 247.443 li
368.602 247.443 li
368.602 248.599 li
371.061 248.599 li
371.439 248.599 371.81 248.697 372.139 248.884 cv
cp
f
370.794 244.423 mo
370.793 246.443 li
373.162 246.443 li
373.162 244.932 li
373.162 244.04 373.888 243.315 374.78 243.315 cv
377.177 243.315 li
378.069 243.315 378.794 244.04 378.794 244.932 cv
378.794 246.443 li
385.286 246.443 li
385.286 244.932 li
385.286 244.04 386.012 243.315 386.904 243.315 cv
389.301 243.315 li
390.193 243.315 390.917 244.04 390.917 244.932 cv
390.917 246.443 li
393.287 246.443 li
393.287 244.489 li
393.164 243.379 li
394.221 243.326 li
393.964 240.577 392.804 238.086 391.039 236.162 cv
391.039 239.276 li
391.039 239.583 390.79 239.832 390.483 239.832 cv
390.471 239.832 li
390.164 239.832 389.915 239.583 389.915 239.276 cv
389.915 235.079 li
389.915 235.079 li
389.915 234.755 li
389.915 234.425 389.756 234.114 389.488 233.921 cv
388.567 233.258 387.559 232.715 386.483 232.313 cv
386.345 232.261 386.191 232.281 386.07 232.364 cv
385.949 232.448 385.878 232.586 385.878 232.733 cv
385.878 232.812 li
385.878 239.276 li
385.878 239.583 385.628 239.832 385.321 239.832 cv
385.31 239.832 li
385.003 239.832 384.754 239.583 384.754 239.276 cv
384.754 232.492 li
384.754 232.492 li
384.754 232.381 li
384.754 231.958 384.411 231.615 383.988 231.615 cv
380.092 231.615 li
379.669 231.615 379.326 231.958 379.326 232.381 cv
379.326 232.492 li
379.326 239.276 li
379.326 239.583 379.077 239.832 378.77 239.832 cv
378.759 239.832 li
378.452 239.832 378.203 239.583 378.203 239.276 cv
378.203 232.812 li
378.203 232.812 li
378.203 232.733 li
378.203 232.586 378.131 232.448 378.01 232.364 cv
377.889 232.281 377.735 232.261 377.597 232.313 cv
376.521 232.715 375.513 233.258 374.592 233.92 cv
374.324 234.113 374.165 234.425 374.165 234.755 cv
374.165 235.079 li
374.165 239.276 li
374.165 239.583 373.916 239.832 373.609 239.832 cv
373.597 239.832 li
373.29 239.832 373.041 239.583 373.041 239.276 cv
373.041 236.162 li
371.279 238.082 370.119 240.569 369.86 243.313 cv
370.917 243.313 li
370.794 244.423 li
cp
f
371.364 249.796 mo
371.364 251.535 li
371.364 251.817 li
371.587 254.866 li
372.994 254.866 li
372.96 250.593 li
371.806 249.937 li
371.689 249.871 371.539 249.827 371.364 249.796 cv
cp
f
391.086 254.866 mo
392.492 254.866 li
392.715 251.817 li
392.715 251.535 li
392.715 249.778 li
392.506 249.802 392.321 249.853 392.172 249.937 cv
391.12 250.535 li
391.086 254.866 li
cp
f
381.939 269.967 mo
382.14 269.967 li
382.952 269.967 383.583 269.934 384.128 269.862 cv
385.051 269.75 385.79 269.527 386.452 269.159 cv
386.891 268.915 387.317 268.588 387.752 268.16 cv
387.946 267.971 388.138 267.77 388.336 267.539 cv
389.007 266.754 389.702 265.773 390.747 264.238 cv
391.505 263.129 392.138 261.489 392.627 259.364 cv
392.814 259.355 393.006 259.313 393.186 259.241 cv
394.253 258.837 395.161 257.403 395.443 255.673 cv
395.608 254.656 395.542 253.653 395.257 252.851 cv
394.932 251.9 394.34 251.311 393.586 251.19 cv
393.548 251.185 393.511 251.184 393.438 251.183 cv
393.204 251.172 li
393.204 251.8 li
393.184 252.069 li
393.192 252.29 li
393.417 252.306 li
393.722 252.355 394.011 252.696 394.191 253.222 cv
394.415 253.853 394.463 254.659 394.329 255.492 cv
394.117 256.795 393.465 257.928 392.776 258.188 cv
392.697 258.221 392.619 258.237 392.543 258.237 cv
392.526 258.237 392.506 258.237 392.432 258.217 cv
392.391 258.203 392.35 258.191 392.311 258.183 cv
391.754 258.058 li
391.636 258.616 li
391.164 260.848 390.55 262.524 389.815 263.602 cv
388.788 265.109 388.111 266.066 387.48 266.804 cv
387.305 267.007 387.133 267.186 386.961 267.354 cv
386.6 267.71 386.253 267.978 385.903 268.173 cv
385.374 268.467 384.765 268.647 383.987 268.742 cv
383.49 268.808 382.903 268.839 382.14 268.839 cv
381.939 268.839 li
381.178 268.839 380.59 268.808 380.087 268.741 cv
379.314 268.647 378.707 268.467 378.177 268.172 cv
377.825 267.977 377.475 267.707 377.109 267.345 cv
376.941 267.181 376.772 267.004 376.6 266.805 cv
375.967 266.064 375.291 265.107 374.264 263.601 cv
373.528 262.524 372.916 260.848 372.444 258.616 cv
372.326 258.058 li
371.771 258.183 li
371.724 258.192 371.675 258.207 371.616 258.23 cv
371.518 258.245 371.417 258.233 371.293 258.185 cv
370.613 257.928 369.963 256.796 369.75 255.492 cv
369.617 254.66 369.667 253.853 369.89 253.217 cv
370.069 252.695 370.356 252.355 370.698 252.307 cv
370.928 252.296 li
370.875 251.535 li
370.836 251.18 li
370.607 251.184 li
370.568 251.184 370.528 251.186 370.485 251.191 cv
369.739 251.312 369.148 251.899 368.824 252.846 cv
368.539 253.653 368.472 254.657 368.637 255.674 cv
368.918 257.403 369.824 258.836 370.884 259.237 cv
371.078 259.314 371.265 259.356 371.454 259.365 cv
371.941 261.488 372.573 263.127 373.333 264.237 cv
374.376 265.771 375.07 266.752 375.745 267.541 cv
375.939 267.767 376.128 267.965 376.317 268.15 cv
376.758 268.584 377.187 268.914 377.628 269.159 cv
378.291 269.527 379.027 269.75 379.945 269.86 cv
380.493 269.934 381.126 269.967 381.939 269.967 cv
cp
f
384.581 280.753 mo
381.825 281.077 379.592 283.285 379.151 286.123 cv
378.821 288.243 379.462 290.318 380.91 291.815 cv
381.608 292.537 382.034 293.425 382.137 294.353 cv
382.816 294.353 li
382.712 293.249 382.221 292.193 381.398 291.343 cv
380.1 290 379.525 288.136 379.822 286.227 cv
380.21 283.73 382.245 281.712 384.661 281.427 cv
388.017 281.035 390.868 283.776 390.868 287.206 cv
390.868 288.783 390.274 290.26 389.196 291.363 cv
388.39 292.189 387.906 293.237 387.8 294.353 cv
388.48 294.353 li
388.584 293.415 389 292.535 389.681 291.838 cv
390.885 290.607 391.547 288.962 391.547 287.206 cv
391.547 283.376 388.349 280.31 384.581 280.753 cv
cp
f
380.91 307.491 mo
380.331 306.935 379.986 306.158 379.986 305.335 cv
379.986 305.071 380.019 304.811 380.084 304.561 cv
379.462 304.007 379.092 303.207 379.092 302.338 cv
379.092 301.668 379.31 301.03 379.699 300.513 cv
379.542 300.145 379.458 299.747 379.458 299.34 cv
379.458 298.019 380.309 296.907 381.481 296.501 cv
381.481 295.353 li
381.241 295.353 li
381.142 294.463 li
381.063 293.746 380.734 293.071 380.192 292.512 cv
379.22 291.507 378.574 290.275 378.27 288.943 cv
378.27 309.117 li
381.022 309.117 li
380.908 308.811 380.836 308.483 380.836 308.138 cv
380.836 307.918 380.861 307.701 380.91 307.491 cv
cp
f
384.464 279.76 mo
384.922 279.706 385.37 279.706 385.81 279.738 cv
385.81 271.936 li
384.779 272.462 383.353 272.725 381.927 272.719 cv
380.604 272.724 379.278 272.499 378.27 272.046 cv
378.27 285.521 li
378.94 282.464 381.414 280.119 384.464 279.76 cv
cp
f
383.27 286.72 mo
383.385 286.515 383.466 286.391 383.612 286.391 cv
383.759 286.391 383.84 286.515 383.955 286.72 cv
384.067 286.919 384.194 287.145 384.462 287.145 cv
384.729 287.145 384.856 286.919 384.967 286.72 cv
385.083 286.515 385.163 286.391 385.309 286.391 cv
385.456 286.391 385.536 286.515 385.651 286.72 cv
385.763 286.919 385.89 287.145 386.157 287.145 cv
386.423 287.145 386.55 286.919 386.662 286.72 cv
386.777 286.515 386.858 286.391 387.004 286.391 cv
387.15 286.391 387.23 286.515 387.345 286.72 cv
387.441 286.89 387.553 287.071 387.749 287.123 cv
387.841 286.982 li
387.847 286.972 387.86 286.971 387.868 286.964 cv
387.862 286.962 387.857 286.956 387.85 286.956 cv
387.704 286.956 387.624 286.832 387.509 286.627 cv
387.398 286.428 387.271 286.203 387.004 286.203 cv
386.737 286.203 386.61 286.428 386.498 286.628 cv
386.383 286.832 386.303 286.956 386.157 286.956 cv
386.011 286.956 385.93 286.832 385.815 286.628 cv
385.703 286.428 385.576 286.203 385.309 286.203 cv
385.042 286.203 384.915 286.428 384.803 286.628 cv
384.688 286.832 384.608 286.956 384.462 286.956 cv
384.315 286.956 384.234 286.832 384.119 286.627 cv
384.007 286.428 383.88 286.203 383.612 286.203 cv
383.345 286.203 383.218 286.428 383.106 286.627 cv
382.991 286.832 382.91 286.956 382.764 286.956 cv
382.757 286.956 382.752 286.962 382.746 286.964 cv
382.754 286.971 382.767 286.972 382.773 286.982 cv
382.865 287.123 li
383.062 287.072 383.174 286.89 383.27 286.72 cv
cp
f
384.424 294.353 mo
386.19 294.353 li
386.19 291.136 li
386.19 291.041 386.152 290.957 386.099 290.879 cv
388.509 287.18 li
388.554 287.113 388.534 287.023 388.467 286.979 cv
388.412 286.943 388.347 286.958 388.299 286.999 cv
388.288 287.008 388.274 287.009 388.266 287.021 cv
388.16 287.185 li
385.876 290.689 li
385.77 290.632 385.65 290.592 385.513 290.592 cv
385.101 290.592 li
384.964 290.592 384.844 290.632 384.737 290.689 cv
382.454 287.185 li
382.348 287.021 li
382.34 287.009 382.325 287.008 382.315 286.999 cv
382.267 286.958 382.201 286.943 382.147 286.979 cv
382.08 287.023 382.06 287.113 382.105 287.18 cv
384.515 290.879 li
384.462 290.957 384.424 291.041 384.424 291.136 cv
384.424 294.353 li
cp
f
389.132 296.326 mo
391.196 296.326 li
390.5 296.059 389.812 295.776 389.132 295.478 cv
389.132 296.326 li
cp
f
415.478 301.658 mo
415.421 300.565 415.049 299.558 414.448 298.724 cv
402.429 278.378 li
401.847 297.976 li
398.111 297.976 li
398.111 309.117 li
407.817 309.117 li
408.492 309.117 409.136 308.99 409.734 308.767 cv
414.537 307.757 415.357 304.738 415.477 302.371 cv
415.479 302.318 415.482 301.72 415.478 301.658 cv
cp
f
393.385 297.326 mo
382.443 297.326 li
381.349 297.326 380.458 298.216 380.458 299.34 cv
380.458 299.849 380.651 300.313 380.967 300.664 cv
380.44 301.024 380.092 301.636 380.092 302.338 cv
380.092 303.172 380.61 303.888 381.341 304.181 cv
381.118 304.506 380.986 304.903 380.986 305.335 cv
380.986 306.13 381.456 306.816 382.132 307.134 cv
381.945 307.421 381.836 307.765 381.836 308.138 cv
381.836 309.14 382.652 309.955 383.654 309.955 cv
387.489 309.948 li
387.534 309.961 387.654 309.981 387.701 309.981 cv
393.385 309.981 li
394.83 309.981 396.189 309.33 397.112 308.227 cv
397.112 307.097 li
396.973 307.097 li
396.809 307.097 396.656 307.177 396.562 307.311 cv
395.836 308.357 394.649 308.981 393.385 308.981 cv
387.768 308.987 li
387.722 308.975 387.619 308.955 387.572 308.955 cv
383.654 308.955 li
383.203 308.955 382.836 308.589 382.836 308.111 cv
382.836 307.701 383.155 307.359 383.577 307.316 cv
383.841 307.29 384.039 307.06 384.025 306.794 cv
384.012 306.528 383.792 306.319 383.526 306.319 cv
382.97 306.319 li
382.427 306.319 381.986 305.878 381.986 305.305 cv
381.986 304.763 382.427 304.321 382.97 304.321 cv
383.247 304.321 383.47 304.098 383.47 303.821 cv
383.47 303.545 383.247 303.321 382.97 303.321 cv
382.076 303.321 li
381.534 303.321 381.092 302.88 381.092 302.308 cv
381.092 301.765 381.534 301.323 382.076 301.323 cv
382.443 301.323 li
382.719 301.323 382.943 301.1 382.943 300.823 cv
382.943 300.547 382.719 300.323 382.443 300.323 cv
381.9 300.323 381.458 299.882 381.458 299.31 cv
381.458 298.768 381.9 298.326 382.443 298.326 cv
393.385 298.326 li
394.492 298.326 395.552 298.817 396.294 299.674 cv
396.416 299.814 396.602 299.866 396.778 299.825 cv
397.112 299.825 li
397.112 298.825 li
396.873 298.825 li
395.953 297.869 394.696 297.326 393.385 297.326 cv
cp
f
375.77 308.367 mo
365.045 308.367 li
364.074 275.688 li
375.77 271.009 li
375.77 308.367 li
cp
376.08 269.27 mo
362.542 274.685 li
363.588 309.867 li
377.27 309.867 li
377.27 270.096 li
377.228 270.073 377.184 270.056 377.142 270.033 cv
376.782 269.833 376.431 269.568 376.08 269.27 cv
cp
f
400.875 296.977 mo
401.222 285.334 li
401.539 274.685 li
388 269.27 li
387.65 269.567 387.3 269.832 386.937 270.033 cv
386.896 270.056 386.852 270.073 386.81 270.095 cv
386.81 279.874 li
387.333 279.989 387.835 280.164 388.31 280.389 cv
388.31 271.009 li
400.007 275.688 li
399.374 296.977 li
400.875 296.977 li
cp
f
376.284 392.174 mo
376.496 392.174 376.667 392.346 376.667 392.557 cv
376.667 392.769 376.495 392.94 376.283 392.94 cv
376.072 392.939 375.901 392.768 375.901 392.556 cv
375.901 392.345 376.073 392.174 376.284 392.174 cv
cp
382.496 392.183 mo
382.707 392.183 382.878 392.355 382.878 392.566 cv
382.878 392.777 382.706 392.949 382.494 392.948 cv
382.283 392.948 382.112 392.776 382.112 392.565 cv
382.112 392.353 382.284 392.182 382.496 392.183 cv
cp
375.507 393.527 mo
383.209 393.538 li
383.373 393.539 383.507 393.406 383.507 393.241 cv
383.508 392.626 li
383.509 391.944 382.957 391.391 382.275 391.39 cv
380.926 391.388 li
380.7 391.388 380.5 391.246 380.416 391.037 cv
380.069 390.178 380.026 389.313 379.84 388.718 cv
379.786 388.547 379.629 388.431 379.45 388.431 cv
379.395 388.431 379.345 388.431 379.291 388.431 cv
379.105 388.43 378.941 388.551 378.886 388.728 cv
378.701 389.323 378.654 390.182 378.307 391.034 cv
378.222 391.243 378.022 391.384 377.796 391.384 cv
376.447 391.382 li
375.765 391.381 375.212 391.933 375.211 392.615 cv
375.21 393.23 li
375.21 393.394 375.343 393.527 375.507 393.527 cv
cp
f
379.912 419.484 mo
378.748 419.175 377.862 418.148 377.778 416.895 cv
377.748 416.439 377.82 415.995 377.984 415.589 cv
377.339 415.057 376.937 414.252 376.937 413.368 cv
376.937 412.456 377.365 411.62 378.042 411.081 cv
377.943 410.765 377.899 410.43 377.915 410.089 cv
377.984 408.534 379.247 407.314 380.79 407.314 cv
388.971 407.682 li
390.069 407.681 li
390.09 392.863 li
390.091 392.338 389.666 391.913 389.142 391.912 cv
384.378 391.905 li
384.456 392.133 384.508 392.373 384.507 392.627 cv
384.507 393.241 li
384.503 393.959 383.921 394.538 383.211 394.538 cv
375.506 394.527 li
375.16 394.527 374.833 394.392 374.587 394.144 cv
374.342 393.898 374.208 393.571 374.21 393.224 cv
374.21 392.614 li
374.211 392.36 374.263 392.119 374.342 391.891 cv
369.707 391.885 li
369.183 391.884 368.757 392.308 368.757 392.832 cv
368.72 419.022 li
368.719 419.546 369.144 419.972 369.668 419.973 cv
379.924 419.987 li
379.913 419.819 379.893 419.649 379.912 419.484 cv
cp
f
391.071 406.581 mo
391.069 407.665 li
391.083 407.671 391.097 407.675 391.111 407.681 cv
394.012 407.68 li
393.016 407.345 392.034 406.981 391.071 406.581 cv
cp
f
393.888 393.956 mo
393.776 393.957 li
393.508 393.957 393.291 394.121 393.291 394.324 cv
393.292 394.785 li
392.354 394.785 li
392.176 394.785 392.005 394.858 391.882 394.987 cv
391.759 395.116 391.694 395.289 391.701 395.468 cv
391.907 400.186 li
391.904 400.186 li
391.746 400.186 391.619 400.314 391.619 400.471 cv
391.619 400.688 li
391.619 400.811 391.719 400.911 391.843 400.911 cv
391.939 400.911 li
392.193 400.911 li
392.193 400.186 li
392.19 395.397 li
392.19 395.304 392.265 395.228 392.359 395.228 cv
393.292 395.227 li
393.292 395.228 li
394.374 395.227 li
394.373 394.323 li
394.373 394.12 394.156 393.956 393.888 393.956 cv
cp
f
392.85 395.955 mo
392.853 401.243 li
394.82 401.241 li
394.816 395.953 li
394.816 395.735 394.639 395.559 394.421 395.559 cv
393.245 395.56 li
393.026 395.56 392.85 395.737 392.85 395.955 cv
cp
f
416.224 412.506 mo
416.169 411.308 415.764 410.154 415.093 409.233 cv
413.337 406.209 li
401.423 385.693 li
401.338 385.548 401.207 385.435 401.049 385.372 cv
394.184 382.675 li
394.208 382.835 394.212 383 394.182 383.166 cv
393.993 384.212 li
400.257 386.673 li
411.444 405.936 li
411.444 405.936 411.444 405.937 411.444 405.937 cv
412.126 407.11 li
412.135 407.11 li
412.902 408.416 413.98 410.254 413.989 410.295 cv
414.428 410.986 414.689 411.767 414.728 412.601 cv
414.733 412.697 414.728 413.018 414.726 413.223 cv
414.59 415.961 413.527 419.121 406.458 419.25 cv
398.865 419.25 li
398.865 409.61 li
410.491 409.61 li
410.116 409.134 409.77 408.635 409.466 408.11 cv
397.365 408.11 li
397.365 420.75 li
406.479 420.75 li
412.792 420.636 415.981 418.198 416.224 413.297 cv
416.226 413.186 li
416.228 412.977 416.227 412.506 416.224 412.506 cv
cp
f
388.926 408.681 mo
380.79 408.314 li
379.783 408.314 378.959 409.102 378.914 410.135 cv
378.889 410.661 379.085 411.147 379.42 411.505 cv
378.574 411.686 377.937 412.444 377.937 413.368 cv
377.937 414.285 378.597 415.051 379.468 415.214 cv
379.384 415.281 379.306 415.357 379.234 415.439 cv
378.904 415.817 378.741 416.301 378.776 416.829 cv
378.841 417.811 379.664 418.58 380.647 418.58 cv
380.658 418.58 380.764 418.577 380.776 418.576 cv
381.443 418.53 li
381.034 418.914 380.817 419.493 380.917 420.101 cv
381.057 420.935 381.771 421.54 382.616 421.54 cv
382.71 421.54 382.805 421.532 382.903 421.517 cv
388.877 420.496 li
388.897 420.499 388.916 420.5 388.932 420.5 cv
394.209 420.5 li
394.974 420.5 395.71 420.301 396.365 419.947 cv
396.365 418.741 li
395.751 419.216 395.002 419.5 394.209 419.5 cv
388.976 419.5 li
388.921 419.492 388.866 419.492 388.813 419.5 cv
382.737 420.53 li
382.333 420.597 381.969 420.329 381.9 419.912 cv
381.834 419.518 382.102 419.144 382.494 419.079 cv
388.931 418.021 li
389.195 417.978 389.374 417.736 389.343 417.471 cv
389.314 417.217 389.095 417.028 388.842 417.028 cv
388.832 417.028 388.82 417.028 388.808 417.029 cv
380.647 417.58 li
380.188 417.58 379.804 417.221 379.772 416.734 cv
379.756 416.5 379.833 416.274 379.987 416.098 cv
380.141 415.921 380.355 415.815 380.588 415.8 cv
388.268 415.276 li
388.35 415.256 388.42 415.246 388.484 415.246 cv
388.76 415.246 388.984 415.022 388.984 414.746 cv
388.984 414.47 388.76 414.246 388.484 414.246 cv
379.815 414.246 li
379.331 414.246 378.937 413.852 378.937 413.341 cv
378.937 412.856 379.331 412.463 379.815 412.463 cv
388.069 412.463 li
388.345 412.463 388.569 412.239 388.569 411.963 cv
388.569 411.686 388.345 411.463 388.069 411.463 cv
388.003 411.463 387.933 411.452 387.846 411.429 cv
387.812 411.42 387.776 411.414 387.74 411.413 cv
380.749 411.097 li
380.265 411.074 379.89 410.663 379.913 410.152 cv
379.934 409.683 380.318 409.314 380.828 409.314 cv
380.829 409.314 380.829 409.314 380.83 409.314 cv
388.905 409.68 li
394.209 409.68 li
394.992 409.68 395.746 409.952 396.365 410.435 cv
396.365 409.26 li
395.705 408.896 394.972 408.68 394.209 408.68 cv
388.926 408.681 li
cp
f
390.857 403.58 mo
397.261 403.58 li
397.261 401.83 li
390.857 401.83 li
390.857 403.58 li
cp
f
335.655 375.786 mo
335.655 347.27 li
335.655 346.707 336.113 346.249 336.675 346.249 cv
360.3 346.249 li
360.863 346.249 361.321 346.707 361.321 347.27 cv
361.321 375.786 li
361.321 376.35 360.863 376.808 360.3 376.808 cv
336.675 376.808 li
336.113 376.808 335.655 376.35 335.655 375.786 cv
cp
362.821 375.786 mo
362.821 347.27 li
362.821 345.88 361.69 344.749 360.3 344.749 cv
336.675 344.749 li
335.286 344.749 334.155 345.88 334.155 347.27 cv
334.155 375.786 li
334.155 377.177 335.286 378.308 336.675 378.308 cv
360.3 378.308 li
361.69 378.308 362.821 377.177 362.821 375.786 cv
cp
f
347.74 352.893 mo
346.03 351.036 li
344.969 350.653 li
345.294 351.713 li
347.006 353.572 li
346.919 353.722 346.858 353.883 346.818 354.049 cv
350.163 354.049 li
350.098 353.768 349.969 353.498 349.76 353.271 cv
349.231 352.698 348.408 352.57 347.74 352.893 cv
cp
f
342.522 354.599 mo
342.825 351.577 345.401 349.197 348.488 349.197 cv
351.574 349.197 354.15 351.578 354.454 354.599 cv
342.522 354.599 li
cp
355.483 355.092 mo
355.425 351.29 352.288 348.197 348.488 348.197 cv
344.687 348.197 341.549 351.29 341.493 355.092 cv
341.485 355.599 li
355.491 355.599 li
355.483 355.092 li
cp
f
341.485 364.097 mo
340.651 364.097 339.973 363.418 339.973 362.584 cv
339.973 361.75 340.651 361.072 341.485 361.072 cv
342.319 361.072 342.998 361.75 342.998 362.584 cv
342.998 363.418 342.319 364.097 341.485 364.097 cv
cp
341.485 360.072 mo
340.1 360.072 338.973 361.199 338.973 362.584 cv
338.973 363.97 340.1 365.097 341.485 365.097 cv
342.871 365.097 343.998 363.97 343.998 362.584 cv
343.998 361.199 342.871 360.072 341.485 360.072 cv
cp
f
348.778 364.909 mo
350.062 364.909 351.103 363.868 351.103 362.584 cv
351.103 361.3 350.062 360.259 348.778 360.259 cv
347.495 360.259 346.454 361.3 346.454 362.584 cv
346.454 363.868 347.495 364.909 348.778 364.909 cv
cp
f
355.966 364.097 mo
355.132 364.097 354.454 363.418 354.454 362.584 cv
354.454 361.75 355.132 361.072 355.966 361.072 cv
356.8 361.072 357.478 361.75 357.478 362.584 cv
357.478 363.418 356.8 364.097 355.966 364.097 cv
cp
355.966 360.072 mo
354.581 360.072 353.454 361.199 353.454 362.584 cv
353.454 363.97 354.581 365.097 355.966 365.097 cv
357.351 365.097 358.478 363.97 358.478 362.584 cv
358.478 361.199 357.351 360.072 355.966 360.072 cv
cp
f
341.485 368.134 mo
340.236 368.134 339.223 369.146 339.223 370.396 cv
339.223 371.645 340.236 372.658 341.485 372.658 cv
342.734 372.658 343.747 371.645 343.747 370.396 cv
343.747 369.146 342.734 368.134 341.485 368.134 cv
cp
f
355.539 371.908 mo
349.27 371.908 li
348.447 371.908 347.778 371.239 347.778 370.376 cv
347.778 369.553 348.447 368.884 349.27 368.884 cv
355.539 368.884 li
356.362 368.884 357.031 369.553 357.031 370.416 cv
357.031 371.239 356.362 371.908 355.539 371.908 cv
cp
355.539 367.884 mo
349.27 367.884 li
347.896 367.884 346.778 369.002 346.778 370.416 cv
346.778 371.79 347.896 372.908 349.27 372.908 cv
355.539 372.908 li
356.913 372.908 358.031 371.79 358.031 370.376 cv
358.031 369.002 356.913 367.884 355.539 367.884 cv
cp
f
364.675 406.958 mo
364.665 406.626 364.438 406.34 364.117 406.256 cv
363.794 406.165 363.458 406.307 363.285 406.591 cv
361.494 409.532 li
360.67 410.893 360.235 412.445 360.235 414.023 cv
360.252 418.459 li
350.345 418.485 li
350.325 413.13 li
350.325 410.315 351.099 407.56 352.566 405.16 cv
363.816 386.674 li
370.029 384.192 li
369.847 383.117 li
369.821 382.959 369.827 382.801 369.851 382.648 cv
363.027 385.374 li
362.876 385.434 362.749 385.542 362.665 385.681 cv
351.286 404.379 li
349.675 407.013 348.825 410.039 348.825 413.133 cv
348.845 419.237 li
348.845 419.436 348.924 419.628 349.066 419.768 cv
349.207 419.908 349.397 419.987 349.595 419.987 cv
349.596 419.987 349.596 419.987 349.597 419.987 cv
361.007 419.957 li
361.207 419.956 361.397 419.877 361.538 419.735 cv
361.677 419.594 361.756 419.403 361.755 419.204 cv
361.735 414.02 li
361.735 412.719 362.095 411.435 362.776 410.31 cv
363.251 409.529 li
363.565 419.26 li
363.578 419.665 363.91 419.987 364.315 419.987 cv
367.732 419.987 li
367.732 418.487 li
365.042 418.487 li
364.675 406.958 li
cp
f
372.119 359.758 mo
374.135 360.904 li
375.136 361.473 376.267 361.772 377.419 361.772 cv
386.621 361.772 li
387.773 361.772 388.904 361.473 389.905 360.904 cv
391.921 359.758 li
392.25 359.572 392.621 359.473 392.999 359.473 cv
395.458 359.473 li
395.458 358.317 li
395.091 358.317 li
395.091 355.807 li
395.091 355.466 394.812 355.187 394.471 355.187 cv
394.26 355.187 li
394.267 355.248 394.267 355.303 394.267 355.364 cv
394.267 358.317 li
389.898 358.317 li
389.898 355.806 li
389.898 355.466 389.621 355.189 389.28 355.189 cv
386.883 355.189 li
386.542 355.189 386.266 355.466 386.266 355.806 cv
386.266 358.317 li
377.774 358.317 li
377.774 355.806 li
377.774 355.466 377.498 355.189 377.157 355.189 cv
374.759 355.189 li
374.419 355.189 374.142 355.466 374.142 355.806 cv
374.142 358.317 li
369.773 358.317 li
369.773 355.364 li
369.773 355.303 369.773 355.248 369.78 355.187 cv
369.569 355.187 li
369.228 355.187 368.949 355.466 368.949 355.807 cv
368.949 358.317 li
368.581 358.317 li
368.581 359.473 li
371.041 359.473 li
371.419 359.473 371.79 359.572 372.119 359.758 cv
cp
f
370.774 355.297 mo
370.773 357.317 li
373.142 357.317 li
373.142 355.806 li
373.142 354.915 373.868 354.189 374.759 354.189 cv
377.157 354.189 li
378.049 354.189 378.774 354.915 378.774 355.806 cv
378.774 357.317 li
385.266 357.317 li
385.266 355.806 li
385.266 354.915 385.992 354.189 386.883 354.189 cv
389.281 354.189 li
390.173 354.189 390.897 354.915 390.897 355.806 cv
390.897 357.317 li
393.267 357.317 li
393.267 355.364 li
393.144 354.253 li
394.201 354.201 li
393.944 351.452 392.784 348.96 391.019 347.036 cv
391.019 350.15 li
391.019 350.458 390.77 350.707 390.463 350.707 cv
390.451 350.707 li
390.144 350.707 389.895 350.458 389.895 350.15 cv
389.895 345.954 li
389.895 345.954 li
389.895 345.63 li
389.895 345.299 389.736 344.988 389.468 344.795 cv
388.547 344.132 387.539 343.59 386.463 343.187 cv
386.325 343.136 386.171 343.155 386.05 343.239 cv
385.929 343.323 385.857 343.46 385.857 343.607 cv
385.857 343.686 li
385.857 350.15 li
385.857 350.458 385.608 350.707 385.301 350.707 cv
385.29 350.707 li
384.983 350.707 384.734 350.458 384.734 350.15 cv
384.734 343.366 li
384.734 343.366 li
384.734 343.256 li
384.734 342.833 384.391 342.49 383.968 342.49 cv
380.072 342.49 li
379.649 342.49 379.306 342.833 379.306 343.256 cv
379.306 343.366 li
379.306 350.15 li
379.306 350.458 379.057 350.707 378.75 350.707 cv
378.739 350.707 li
378.431 350.707 378.183 350.458 378.183 350.15 cv
378.183 343.686 li
378.182 343.686 li
378.182 343.607 li
378.182 343.46 378.111 343.323 377.99 343.239 cv
377.869 343.155 377.715 343.136 377.577 343.187 cv
376.501 343.59 375.493 344.132 374.572 344.795 cv
374.304 344.988 374.145 345.299 374.145 345.63 cv
374.145 345.954 li
374.145 350.15 li
374.145 350.458 373.896 350.707 373.589 350.707 cv
373.577 350.707 li
373.27 350.707 373.021 350.458 373.021 350.15 cv
373.021 347.036 li
371.259 348.957 370.099 351.443 369.84 354.187 cv
370.897 354.187 li
370.774 355.297 li
cp
f
371.344 360.671 mo
371.344 362.409 li
371.344 362.691 li
371.567 365.74 li
372.974 365.74 li
372.94 361.468 li
371.786 360.812 li
371.669 360.745 371.519 360.701 371.344 360.671 cv
cp
f
391.066 365.74 mo
392.472 365.74 li
392.695 362.691 li
392.695 362.41 li
392.695 360.653 li
392.486 360.676 392.301 360.727 392.152 360.812 cv
391.1 361.41 li
391.066 365.74 li
cp
f
380.404 372.961 mo
383.636 372.961 li
384.371 372.961 384.968 373.512 384.968 374.191 cv
384.968 374.87 384.371 375.421 383.636 375.421 cv
380.404 375.421 li
379.669 375.421 379.072 374.87 379.072 374.191 cv
379.072 373.512 379.669 372.961 380.404 372.961 cv
cp
370.864 370.112 mo
371.058 370.189 371.245 370.231 371.434 370.24 cv
371.921 372.363 372.553 374.001 373.312 375.112 cv
374.356 376.646 375.05 377.626 375.725 378.415 cv
375.919 378.641 376.108 378.839 376.297 379.025 cv
376.479 379.204 376.658 379.354 376.838 379.499 cv
377.694 380.555 378.728 380.94 380.038 381.112 cv
380.598 381.185 381.231 381.215 381.969 381.215 cv
381.986 381.215 382.003 381.215 382.02 381.214 cv
382.037 381.215 382.054 381.215 382.071 381.215 cv
382.809 381.215 383.442 381.185 384.003 381.112 cv
385.312 380.94 386.347 380.555 387.203 379.498 cv
387.379 379.356 387.555 379.209 387.732 379.035 cv
387.926 378.845 388.118 378.644 388.316 378.413 cv
388.987 377.628 389.682 376.648 390.727 375.113 cv
391.485 374.003 392.118 372.364 392.607 370.239 cv
392.794 370.23 392.986 370.187 393.166 370.116 cv
394.233 369.711 395.141 368.278 395.423 366.547 cv
395.588 365.531 395.521 364.528 395.237 363.725 cv
394.912 362.775 394.32 362.185 393.566 362.065 cv
393.528 362.059 393.491 362.058 393.418 362.057 cv
393.184 362.046 li
393.184 362.674 li
393.164 362.944 li
393.172 363.164 li
393.396 363.18 li
393.702 363.23 393.991 363.571 394.171 364.096 cv
394.394 364.727 394.443 365.534 394.309 366.367 cv
394.097 367.669 393.445 368.802 392.756 369.063 cv
392.677 369.095 392.599 369.112 392.523 369.112 cv
392.506 369.112 392.486 369.112 392.412 369.091 cv
392.371 369.078 392.33 369.066 392.291 369.057 cv
391.734 368.932 li
391.616 369.491 li
391.143 371.722 390.53 373.399 389.795 374.476 cv
389.205 375.342 388.737 376.012 388.321 376.577 cv
388.426 373.818 386.242 371.107 382.071 371.121 cv
382.054 371.122 382.038 371.123 382.02 371.124 cv
382.003 371.123 381.986 371.122 381.969 371.121 cv
377.797 371.107 375.614 373.819 375.719 376.578 cv
375.302 376.012 374.834 375.341 374.244 374.475 cv
373.508 373.399 372.895 371.722 372.424 369.491 cv
372.306 368.932 li
371.751 369.057 li
371.704 369.067 371.655 369.081 371.596 369.105 cv
371.498 369.12 371.396 369.108 371.273 369.059 cv
370.593 368.802 369.943 367.67 369.73 366.367 cv
369.597 365.535 369.646 364.727 369.87 364.091 cv
370.049 363.57 370.336 363.23 370.678 363.181 cv
370.908 363.17 li
370.855 362.41 li
370.816 362.054 li
370.587 362.058 li
370.548 362.058 370.508 362.06 370.465 362.066 cv
369.719 362.186 369.128 362.774 368.804 363.72 cv
368.518 364.528 368.452 365.532 368.617 366.548 cv
368.898 368.278 369.804 369.71 370.864 370.112 cv
cp
f
378.139 388.364 mo
378.408 388.064 li
378.606 387.842 378.87 387.708 379.168 387.678 cv
379.439 387.65 li
377.32 380.543 li
377.262 380.35 377.125 380.187 376.941 380.098 cv
376.759 380.009 376.534 380.004 376.356 380.077 cv
371.058 382.193 li
370.743 382.318 370.555 382.652 370.612 382.988 cv
372.021 390.888 li
373.492 390.89 li
372.139 383.322 li
376.157 381.718 li
378.139 388.364 li
cp
f
391.34 393.768 mo
393.419 383.029 li
393.48 382.689 393.292 382.352 392.97 382.226 cv
387.598 380.114 li
387.41 380.041 387.191 380.052 387.019 380.138 cv
386.836 380.226 386.699 380.389 386.64 380.583 cv
383.562 390.904 li
385.076 390.906 li
387.804 381.753 li
391.886 383.357 li
390.359 391.352 li
390.802 391.71 391.091 392.252 391.09 392.864 cv
391.089 393.768 li
391.34 393.768 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 17.1.0
%%For: (Agor) ()
%%Title: (1507.i105.043.S.m006.c11.energy icon black.eps)
%%CreationDate: 7/26/2015 7:30 PM
%%Canvassize: 16383
%AI9_DataStream
%Gb"-6H!;5udPq+'IBIA"K<paA:9-<r"%b1),U?,-5XLc.Lp7n<n.mZ5POlidg##u/DRF>SR@,&Lgj\CrF5Vh^.[<V+-)pat]oD`Y
%<NET(2qib`jFk`/]8i(r>s#MH`,G[dGOItK0Bru]b.EZ]Yb[g#I4-Z;5q$!>O`tZD<,,J>c)B1MmC'&mY?,O!g>1UXY5#?Ob.XsJ
%_I"e'O&;\"r\M%2W)V*::1;m=g8[*+X`h0Vl0%uW7A+]iQ/D8-(,UP+'/#?SRfMhGrB?/Jg;`.Hp7?2i>lmXu/UZE5:@#TB\'hIh
%>@/F\dDE?<:%(TC$NC,F"7"gZ"o)T1'V/2-NB[*)91m$]rJ*CL@PP@@6)7#YI-=,JJ!TqlIhP*Vkl6qPrr8eHkYLu[SV)dWIWfp.
%fS@]THn4B+n7Ps*&0i2<Z9X%1%N\$_:8?6uB_H8sbBpd2rZC_J>o;^S$8+t5n,'Y,ht:rS4e$m8+o\@]-IWt5;31]]ah<K[[A^-<
%ZdA+.fDc5bk'B!p9>Pt-7auk<WqV']gec'*n[`"a)F.n4IB-5=WAUWMIoV>X9(t1-K6XgD".Y.3>[Zg2]brZMQ(JX\SPYmDFJ@>P
%q`PC1fsNsSj:LLpp=rmQ6W=^F"+UG_!d0]/+)C1c--jaf#iSOfITgZl/-dl2^+GRs54@'<M0QVYR\g!0)Y2=_6W]6F+csDga8DS9
%!OhXt;+jh7m%`QU@j+tMfD@P7buUt!DW:TdnCJ+O!\ILpNV9@JC[ql3%@S,U'WhKX]kKifH4(\km6>OaDo'h=@fV"+hJEcagT?\5
%DuWrgeCqr?mX8(%\%=?S[G9'tGPL9.DLiR;m\!d`66#E@>UEgWG91)<+OJf$Er9";9>A@DT&BW\W=LKrPY':'URSAMU.2b)1`Ra*
%<\8Mtl#s?h^>#Tn.bu*C+`=nsrr`6u!L>%6-Wm6X6*r\g,cX7DL:XmjJFTO2>ug`6TRNY:XV\Il^CC^E_(8=Ks(iac)tdMnDU:f2
%T/2M1+*CdL/KSMJco]Dk[+gRn&R7U".@K77TBf0F-ZS*b*P`bp\+*q(dAW[\/"O"mF^4fRrZ69*6/>44<$e].lS8@9\?jR$e'sEo
%U<Qj^PhuYfqU..rIocEr1JfaFh+G-t?*P/bH;EfXfSO\HK6faSk,[>)TI#rZ5HAl;`faOqaeW52#W;s0"'AmDEbc4%s)J);F0Oa%
%BF$_\J'P13D]`;PhnUj?5F:Y8gpATfT3(r)27N'VZdF@h/d%<Kp#A>&!faSj"Uj.(A[kG,XPTmuUDB-!F-!dr)976FJ,2BlG51*L
%YcN0^F-$'hdFN$Ccl\Om5a=BglDJ:n$d,k,9eHVpcioc5R[cV.[Jj;5C/h`8&X.p5^G:o@f6!5G1BRqJ-V$L3ql%m*S5kTfeYL]1
%)/-iQP9Qku<iP'$?;8lTkq;O-1(]d%]p+M@C"%q;62)3YZrT&qRQFd?9")Zt:Q1sI8a/]-E:u(!UC0hSS5t!O?O(*!C6EmB%fQ2S
%ZC<=,.H9]pWG2m244SfAO%_s0KdX;:j=Th8ZApHKBWE*N(r4;;Z6p'Gc_tY4U-MsQ_:;.53k.dr(dl&c*[WX2qs?\Y)Eh_G-,W4(
%b-KF&-7<gM%aZ>mh2/]XE&BD4OqaI)*F<YiUd*9@@o%KcO<`=$f.=g[q*h&$A*)tV4>'&M\^e5@2hg>:?+FYn@9-VnGOEWPhf.[P
%\eQoJ)fOI'hV=M<9?c1Zqh;t"cndKAb[h'5c$d.50/rXek.]X+Qi!8tO*e3\\P2).LbH5RhZ.RI)\LQfcYZ("7#h/O9!/'T^O8@+
%MuF3)rT*%rJ;ldGq:t;f9$n`'\sAf,.kllWMQZ!Zi1ce-+1cETZiZh##/+?Vdb;3u]'6Ym1Pf6eMd!;Y:p4N*+cBC)9i.s)>96_H
%^"Oh]]r6G&C7*tf^-f9Pj=5)@.?(b3Wq8L7ca/Q.QIJ+iZ]QOlW6.h,jt[p_pBKH;8i>>+<jE=%.R$o?s+h)rS%^\gB\gmApbmcL
%NC49qQ#<k_lLc[0/6%U0R2C?QFojW&lEjdC[0TI+bc&Falrd?n(/;D"/?DNU9Y!@r:44HErgSIts%_@hfPT5ErGo=Pf@$iA`kGWV
%AS!gEUsYBOj-f`qoYqmU>Vfo3SMPi](:@<:H*2A60l7gOK;!I[7CLJh-sBbeE3djK9TFi9g[k506(AVumW?osd9NM]&<g/,2s6:8
%d]N8iRSc9W0f-4%?GglQqRs.2n'a)fq<%I5Qp5G7lZFDbf23fWSC#kbpG>33cD7k3IA,K@q=pe]R,@J&hsqXXNjqZiI(Tlp9RBkt
%PC-)M:p[BS<,B#_)r2q=Dh`nUq7DWUn8:VS1VAA.<bh:n(67U1PP$eOb,qaK*Acs90J>6"`6?GnC_e2kQg[6>14-@`m@7UB^'pL\
%'Y5GH99%2]f9@bgS+IaUbJT^Xo(q6g%l`H"kmc!B`u319AnQNfi0D<c>2V2a$hacgN6`bP;npni(lYf,eo138rX;l1BCKbf#4_TR
%Du6GUA^/B;1ZJcK0"Rff.YOnL'.3W0iW%&l1BWsoN\cLAb\WhQLme+7NkGiKBZ7;MWtdMcUBZ,_,KkYl8<lco=3,?jG('3VX%[cI
%.Fid97\q$^G>qmM3]">.1b6pXL822Fn8shs*9BY='WE1X-CB8+@\;q;;lpY0I]L^);k'=@l<d;]3(Y.2TAR4R8PHUBb;:$a^,iP^
%-Cr8+*uSMkZa8pQ&9H=Lm$qV!N-%s91pYriBhWD2)td62a`);=4RFVITJ-I68^U*A<GDA6q0A**P?rG28iPeAj-#TM.Dra_\$O_i
%mA\\+-f&r%bF5,6PG4fkO[jLN23h@INaF$T5Z(F$@M4u8_:5b9GN)Ma,,<\+AXSs$FjM+5EZ68]2b)atOd3cT1!.n8^EGA8VD);)
%@]jPP&Nl(K1RYPKgdF;`8upgm,[sE]C'6I<1#$_&^PO]\%U/NPh*f@ObcHINju6/7.6a4mZDN)QcYoQ%aA%mM3Qbt'.a%eRRt4MM
%[Us+:RIRm;),/3k\Vp$.B%NH%]-u4!F;H521%W"*o=HFNMqquo(M1a:SLZ=cgs!AYR5EpQDm_Og/kQmgB#UL9ot)W?k$m%Ga%a7*
%;S>YG;6g`h/$&[,4JeIb4#NGgnet\AP&iY<an%:Dn=%\Alt+t>SVd-<UR:*JDH-VP_Y-i`nu3W-b7UIOgqU-_r+78(cV7&mrN!:(
%9N89'0?_REY?aZ%q/a68JH^,.2V2_c]f$OMD6jVkgg$><CX]B9+r&J9<h!m4lY3c;Yr4Plk#uW)eS^7F1J`[a-?-[^D(NfEJq&(l
%4&ZB7o4<%BAL-H^-j'k>b@nVK;DR983A88R4skS/diCWIm%c0f:_(,1^S8_cU[n$??[`GD&VB0&(<XFgDU`K0R#kb-P./qF[HOFC
%](j14WG>e1W7!>19&O*ASJ5eO%VDTKR]Ld@R`X]g\XC!)7$^L\o4085,3p^OA"F!<HmY*"XJMFh[B5tgi*Ru>s0i>"_uHmV+*,-Y
%=ifYdOR$G)R5WOXAppWIJ)KNck'h3F%unoZ-2q`Ar*R+V5L%Y3m>M"]!WEHs/[KF:2Z8]tgW`L*#HmC<i$(>W&,"U$'gY\q2j7Df
%6T"-lMh%?o:qj6^E7$P9'Fi=j]mpMJ>]_TaU;<C<)D7JZ'FeMPFOen0Ng4LqJ(BST=a#rGga+b'0Jg+,rhAJ32e%u@`Iit^cL(P+
%hu'>.r;?;UScA]4.J`,h^XK3+kNBUdEW/'"0$4%hGCmY`q>'K5P;>H'SY,pggNpdO@,"l0BM$LqI&Af11?F(hq3g^Lb]eNuHYm7?
%X(^m59SK&f4XhQO))W?"5HcE9;*R506\4>K-Jls3h/J()fr,c>eG@;/TGJ?t/asBV=]E:0NJUdI)-$F)HNL??<iJb/T5raHm5qG5
%P8gkXAZ"[g^CZl)aQ=)?M%MV+ONgCND#UutBo\9dZ>/Q2Z7--EZ+mSjg5ViX.ThPT.dUI6e+W&Kol_SFYBH\pC:d\a?$NM8O.T-5
%%0d]eR?dg'RtL]/T-$`Y.p[0n;Wqa9-YgG8)<5@!fa3FJ8p0]<bGZ7*H8h\=N^d/cka<-3:e!B(Z8)qS9Qfiuf86M8?ZgkObCKtj
%3G4F77JSebHD=K;H<I5pDZ8/e_u*[@-<92ZQ[.M#*dF(X?KQg*H/Re6Y8l\UQe;_YW%\Sa?;qVni\0o=b7o;ro>&Ol!\]a9KfA1d
%cdW)Zp6ENOdh/Bkq=%<)Ogq+\->q+%g0YmVR\XPam:6l5&d1mTZAC+hb`bap`LY)L:H!4A^3jp1ZV=uF0f]./A#%o<Xjf"_\'I"R
%.9:-2^,aIp0ho^NGS;heA_0lPI;pT]XVoh3k8BY)<X,F:bj.CgdQIETUr9XEIC+K)WO;brJ#)6,8s5p<odW0nDQW`8r2DCWB)Xf;
%L(?`(0%)e[gG+1P::.=ROPsuU<+rk0a4+n.p;olZlJlXC7^\1)H.LRE%ak'$d0KG.Z[4L!JSCUA?[)u74-MGoct:*]'975(C'd%]
%ZJ?LX$VkHW'5eS+riF^,h5jQ:-:Q.an1kQ=`?(PB3LGe^/-b&9mD1'.0i,5?O(6D,-fE>2(c17%b^:BT\,gT./2YT2(fTbbcJ"_Z
%a"c^rN+ncLGoU<8a-_uK#'st]8u;tfF8tSRph(u19!r#?]P6!(>[uoB=#)+?INg%;s5hutP9D,;KOe]cg9fT2rHc5);62J54_)$T
%H6^lPl;[">&XOeX:M\>4JS"OF-E>;,P9S/lB?8SD>j4[]h<;m%C/qUME'r`bH"kMZ4NAE#4OMM<dEk#'d$=G__hVn$m4>\EHcibq
%8[mO"U(XEWUaWdAM4`pUT.ZY'.EMCN`>n_UdlpJYpiE"56,+o=F"lf!%iW7LfaJ4"Z9kJF9:[FnaYH*SKNIJ^+*l*5V-1J1Rs![?
%'0.jhi@>9b;h!OQ$OP:3fdkaMO"Pb75<huS@0[/<X3@kP4&/%mk-=^7LrF#:Cc$d<GjBhlMk?en3odqZ2AIt@k5Ns8c+UZu2`LKn
%k2+nKS,8Pc\I8\agmbn^hV8RQ*]EcUB#gOeO9B%trOE>9c/#q@4#_BHk3h$g@[XiL)>kTFB";uNaI*WaDHY`pLFsMXe*k^*[bJ4=
%DC*J$1&'jKJj4J.^+>D_Pb'75R(SWOnH&TIHj4KNo1I6uA'X[<b[=b6#nhH'Ph3[6+Cd1CkQ[ETr)MjDj$okk^7&Q1h5OB>rLYU.
%6>O:6cUO3K[44*a\]ad<ka>RD)<mQSA[I/C2j:9jlU4GDY&iX?Rt!)Bcd[G+k=/Y\4\B?i]NMi5`d]Y&V.RJGa^b[Q8l&(+r]JBr
%]Y1"&#ek\SQ8aX>XtV=$1<c3`fOhDEU9Ce6na2'H9T$CipLSZ'mRa5nAJN@0n[Sc!O3#E?):t;0Qa2+.p4aqU&Pe(g=8?dJ3QQ;e
%(71Q@`;1@W%7La$/Ru<F-p&l@BFC7o:7bg(5*bE?gQ]%8/hd1GJWLKmX"AcIXgsp=pWP4AWO<5<oc`(XYmrN+gR@VI=PKTN-:V?s
%9i@$qo<1p$'jZa5UrqI@RN"]1cmY@;70!*Kp=1(QBqsm\T3%ZU4ncl!npfU]jlmSj=o2UFC^7R.CjbDKjQh2Fig#4PMpfYABQ0i<
%L5YIHUhF_Fg+,.tW(`'Q0ko0bF7-M<](Q&*1Wo>UL7-a?ZNmG,It):aqn&-iKeDG6F.?]n2XQuD()l>)j)iX%m@.U/4Z2+5B>W8h
%mu987Dk+cPo)*!Mdq\OQ)C7U0oC5ID0p<5i"*=7mXKRLgR4`%dc^8Wm?D8D7c*qtifkK(!bmH:o+g8^Uk\uZje:6M-MNOs=V'!#p
%10ni7o_d3W>0imcmuf281[WjQg>1AIXgRCo'0")q\u@,BIf5278ZnbTc]PJ['9ZlWB<^Ts5"io!M_\"[S=T]-He:omrY\HdE=KNl
%l:(*[h5pK8CM*h]8an,/M)tECWMsgS6-0PZc.&csOl[8&1MKXS':%N6iN0/UR5_'_d`.0Mp>I:^DUl?4N.4OU%/29m=_;k)U6BaQ
%6\q??I\/LqQmt7-D6c$4<VL*'NSGd&bKHE@]BNeuHnK#p(,Kt%Q.a/F08GXIK27(0\s6=b,g2MgVGQEYB@T\hO`ocZ+4kts1)#3L
%VJ<E&oK;b#DKb6d>G9H3HT6LV?KYB@J'A_O?Sm@MIK\nA@9Zi(S#oll0dOUuKT=or>J&5hjVV0%pdT@/Djc+Nm6>MMJ%JIsIk,X<
%qj=Cp#D2NHec)mD^S/"cI"m2Q@(gshRbkjT8XT5;bt]L@$X("\r(#YZ_>c\u&D;\co$VYs)pH@8mfjsAn-;%^C^5CpK]?2fr#gY;
%D(kR7jTU4+qbY(OoUVQa5Ol4LnC)Tsrlb[!pH&'EMj:@A#(PFGab-a30LE@cN!qU)*?p7I>-DPlDP[s<q[lc9H]7$=_KI5c=U*<P
%U&#rA*,rgdTlb^^L:Zl"%iX[)]+iZrmNE;erehajs5CHelrN*F2Nm%;SR-7*b0Xg:_FA8%,(ENl5YgR)q`gRjm05KAs-`F>KO3/\
%)K_ra*AkUb/QMWi.JJiDCB3H&InaY;HUh-)nQo1/j;'Wl;,f&9-iNf0U4_H[+s0bZ@^QJqA&\5XC?AmgjWaYGn*&3ukMFV'rDrCN
%O%QmjHKF8kL%,[T3cjh)HKedLSlNi((4HSTl5PCQ(0J-ip"p<V19eqQrbi/6h^>i9mUm;%)sup9FCilC)Mp*CD[OHJB>gWNr4SkA
%F'ZiM7Ac?4ATfFbq:A[T.t;)2$WqR5KH06X%XS(sEsgFS0,;m"?3RGfggNLrA=(gG`Oaa;qI\(RH9=-%.JHU:S-&MX!DVEde>kMu
%NOuX?H`jfB0-iU5B5;3$`eS?-JNPm[HG4GHJXJ]49*7aLANP2.KZq&g-a'95at(@lL+/g2)>sM^k[-p3Q$8$u$pUYC.[[&lG5F%@
%Nn\ud1=0%Wl./Y6%cbrE7Oq2m5s^s&,FA%Vh!)$k@&'3KEAXG>V$<gJ^G)&E*tRL/9gqu9adc4s+O>5u5`MJA*Tej-rc,QuXlUtW
%H-X]XA!bL84NG(DW5ou,UUma6UTCu0gsG?)!e!0bm8U[l4>_99Xk.U,qL<"YH<;s_QDNlt3q^/B=;1mDkT66r@s'7Y9s:BpIC%?`
%+4^S.::i_qY0s6f7T3_W<uCSa\\1V=+*Ec5`l/>?6KIc\jN^uf5.:cF+K@Tg>[FkqCH!aA#acH+aC;MuR-R^4;&>VK*&Nh:Q5M%>
%)Y8C2NFFo^El-)<_KQ&/0!(h!`CfHW8oHrQPXnZdgPpMVpQ$_H&H1/*D:\"Nb&P*ln,H([<t.LT35Ps@rh,H*='DMSb%[*pD0KIO
%/pr*ge`qd!DD)'?%TMXM?:3c,f`GLRUD>PL7ao[$+W]O\ED'iXl_o"CcTTO'd>o&).og.nd-lJb>Yupj*Sj)@bm]YZqTmJ,mGgfK
%0Brra]o-VIZob86lA19Y$nPM+`t!eL4Q#i`o9P3;TV51i$Rqq43moelR6n,CEW=CLQ6Y`qWNI+-Eo+HS;inWJ?Kc3M]8(`OjIWhb
%0U>kBea=*OHEXgP`4o'(o^'p7rBR4f%8gRrU$]re$oR^%.=&[X4[MDq<9G&2+rj)WTf#O2#U)$;o`+nC+hP^AS)2*OeuRtrf!/Nm
%bMI-d`Oo4LqB+++:uOni`1)8LPAMa#VAj%oV54%K`mC;L[?^)3_EQZY^!6"ggU2#>fufl(CE0^$UY^lKI8Dn5MY]fi8ul=FJc;k:
%%:DK3Gq3g=n@Z!=2/"hR7X5N^L1u=U?9$DJ>Al`@]VtIrHF[=`1f3`7W5*Z$0J3g18)<Q1WiZ$j!t:#of41'53+hgZh=c,1O1L(g
%=3;,3I64C#B$Q[:5GH/bL1P7Pd-6&fmH"iJK.XX)5GE%n>Ame)MJApCJLq%8?%9[kFc))G<KYC0Q)`7YFh7JUL^7fbTFrdIT`3AW
%3dRuDlZ"3i4,@1Mh5s,R1"2G8r2/:Gs'89))2;!bS)SU*gmjG)S2ue_K(M%m$6I+Qg5)[6@j`1%[+B6W4.TOgjM#'TKR/$`7;L[5
%e/2MTWW$<Ao;St1`LV&q2V$_Vce'5(dgJ>25YmI,)N1$orRgXKTm@Aqrd;J_p\hlBq=)6J;oDqgAcl",VK$YHY0lf"[UVnJp.Rj8
%<nWDDEfs*s/V$g:>-?tIJ*'@/:n6>L`!\(6Z>rP&qQo?dM99eJ&LL=/ZLTXtoY#Y]SEeX#>Gc7Q?Vln$n?I"D05ZnF[SQ1J-qhBK
%n$q4m<]ZR>5*esME0TEQ2r@;G7q7Iq\qn(3IRW41]*61Nkb_TSFL>>r\%?e8O"+iWF)8r3d(X/[mXGmKF)3SB_D]Ep*:<MXJ*H7K
%L%KqZYV%Ir088E:Xt9@g'pSElSOW;8-#8bR<Em.0AJkjJ_+-4CZjWgca_Fd9);(Vi?:I3C[!A5J^E5B-96Dg%9>4SZOT8<7f#bqK
%\>1ZHI)"OQF9tgT@l3RpTtKcP<HD7RF<[.p6csk*UXa7oF&eX2E@9qLZ5lcHp!u_3b'qa84K`dQQcP,rXl;C%:#kcu9["a.RH@P6
%Tlf1&_Gu<7D99PsGdGg]mgY7%6g8,,)%'`Y6(YI[q-)ec<QTqUh33$J;UpQaH@t7&!B]>=[Kklj9\=>RNpCAo>p^`.Hn.7[TSmi9
%.C<p=._\5'YorC3XXdRj#]-[W'0';I6:(N!H.7g+itdr<qIh%]@!i8F`jRg*9TIjUrp&Rn[WiFc)_0G+%Ym:te2"2jkt'20$EEL@
%nEe0>D,QJ/Sh#]8mWa#\kTuCUR+`.lQ#(ZEQ`1rSdCX5kWC1TBM.Hf9HHHPhO(PgV`l3\d\AG]=f"/O'HP$uS)76E1DD+thJmjhc
%"H_A9^0E4BQaE-#36#k0:"):1kj:OjaDGi2I1c>TZCMdJ3G2'j'2<7_gb_8>g^<<kiJNb`fHmXXIpQme,ph=EZZq89`$OK8k_a(B
%/!c1NE@^CU*@BmBACq,bji8k,<:b`K<,,J`;O!'R;pZAb"rDC+S.Xtpb4iX&S4B%K*0epqoKhI^1bRNGYZUA,h>rhSFkO-2\M!5:
%h-Pb%ls<O'_ZH,&jgH(ndo#u-:o!?8BD'IAnMZb-\a^9.0\:%e0pQ"W7Bmj*i['NR_&-L]Y^L4.4rpE9@i,X"(".E[N;QM17>rc4
%<Ffes'j2G(];&hDql*\bF]#DrA=#$'<)eU)rK#iWFD>;F3gD2,1E;@rEe:R,]719-@HjiF`GK5J(DjfS@HheKE/Y09A=71PQtL$/
%??3cd>Q63glpffpW&j:mANip_SH/2E4muEdk[!@$XdV9`](?PiCR("eKeCuOj0"MJl+WP9CNmeK1A#04D85X3oGTiZ3_Xp08/5C+
%;TGc;HL&5kl\!1q`&jXC.,1lq*'Q+p;C6D!H"]r6Pu__#0,/0gA!ih8Q4eK89&#n#95.S#JBH%%n=RpY+_>u)R`38e;@]<dm'kuq
%d,U+sk"0!r\@io--/_FUhUgP(TC(G6]XW.[jM>Tm_pV3@rm()SHM;^VCur$HlfH^"V1f/nH6qI\lb@eOl/,WHJ+rm*C\QLSq=b,t
%f=Q[8gtK,B#PWo;hQa.gl$MZ:ah#*uqDJ:dI;Pt4>OT82+%&!QX6!Pk?0Z!Nj7L=Fo(ndom2,(aSlSM[r.EI\^<3jEd%N"-h-6#6
%T(bn8^MLEPQBqs'G.@j@cp(`^lJEIqQ/'!,)rDSF%\]B?M=pFaChn6+GTu%[rVV$$TU:4YEN`ubPqVH=k?D<E=*j])@VP)`?u+_H
%m0(!DIVjKpg)6,M^)Y:T`d6[_b/qY+^N_(iM%iIoh(Mbsq8`?cZNl9@&.H-Or-J4I%6r\K;;/0ihqD0B^>CO/0AgL6+?ib>"6_*0
%^9C_qXEne$MJ)A)l<</<F+82ic-j)?p#:UJ>K(:Fkiqu2GKs6ie]KoO<+"EC.A(V3_KoILh>5rG/+p)!CE&7[cQ4W](OmM@b5:p_
%+9<#)='qOZd#Gg:rl]V]<IN5!I.DUVZ#'F=Ub:chhMG1p<k$'-q20utXHm2dh?2s%K1I%E<c+[>HsD4o(9a>]/2'F2%Ct5()EsJU
%XV\IumMp*sKc[sY.W'\/mlZlSp=I9kpU/<tp@4\,eF(f:4Ws!gs6'qfb@gk%J(m:j4l&)IkV"FeI:"L/ildnEV8nk/qcgNF5BX4M
%+91hq>+m.eNHKVqgSJ6mT5Ld1T@OK2?ZGo$dcNK+c2MBpK*6\.(8!eH>d@#K:7nJ>%\Ki)f"Sop9!]Cr(u!`tn8pTcC?&kfKJ1FY
%`57^$//>^KH+,\(8&Xgne9g?STD\0._EmG`@d2tDWumgrb(I;FrpdV0iU4Aimg;.qNSW%)If7=`O"W#]d*7=Bn_f3@qT5phg,p"+
%ml0#4Kq5?opVWb8rO`)SoqZm%FK9ZW8,s0mIZnfUekS77p4"o+'m@`\?>YrKem:(T1p;02TEt0Oq6u:.hH,.[8Pf;XZG(Y3^KigD
%fcQ.c2oJsR'7)DtFDpE@p0e-l'_+'5k,6qH;u>>'Z]_`hqmo.8YkDpNWrt3KBPDI]*I]$#Y;C=FajlTkiq)N<2]t:-2(#A1QCetR
%?4)jb[DgGV\#k@J=8@HUG4<V&Gk^MBO!Ms^J$9_Y>7:0e%uY*"hYH;C3PUj#/$+AaD,N:hRl(o0F]_qoq`rr-LW.`Kc(81B^=t0Z
%:\Nc:4RBdq]MCD6qt]CFdW%6a>/Kmp<=uek*5&F+K!KY?Q8Zl-cc;$3MAkTJJ!;=bGW'E^IdXok'qbKnf#-=`l;l%(A1p,prXIc.
%-):QIeW[,[Os`3djdl.AHh-18q^(O8o_;YRdDkp0Xguhm]l+\sc9C$;2I7uT%<OLpg2H>[qoePO@IN:D!EAr:J&>VET./=dY]THo
%Kb*3\T<V#DI/i/Zf'(JuX"O_'f)"Wp&#es3Q&a\,_ns$4eR#iBrPIF-k=4sSZ+NQ[/_LrES"r=HV7!aO^<iitXZ[I.L8t9\pS_Q,
%"ni^!FURM[Yds8aa'l:F%/gnEHD)uf@=Zc)8:f^Rip(^U"S?p2Njg/9NR*=WD_I%6Y@6DEqV$j:*f>>l&,MrHIm\T%*#8/P#B'*6
%.Z?CtOQLku\oOF@bZq*-5H[0(.CQ%"<OlVQm!i?N?7dumiLehYoh*^@r6riM:I=j@_c+?#lR!rR2lHq(@hu2FR]dK%Mn8%ppuu4s
%bEZ%Lh#fUSX`_(Fgp90=l$J8FW59S*9ftZlAMus41eY`'(rMDM]KEB_e8TY+3'(dX#!q'!V:6b#lf#iIA#_D\Mn6ai_d&'(4ksgu
%9lUEl@qn1l1TJ4Vn#SgSGL,3>cNTN%eGmD;Fj8"8[g!M5V4SgAdB.dJ,g=5Fd^(f[I]kgN6SjjHA)DU8q#s,cjZbu[X@dJcb9ap/
%d#e$1f;!u.LmfmD68\1-\k2SHe?:8>1cH5,a!J%]kuQK5/!6/qIaK79RrS@8Eet[&,6l\#GV!2n5RaY-%hkfL'+U:,LN+9ti>AV\
%$3'iZeLS)K]mb4KlR&%*o[GYnYXpGXbS[g"eB5^E\.220V7s[E\\S@!AbVHV6X9Z,`#4^Rc[JcKfAgT8D[@X_M^"OV7V`ohJ*?@b
%T84a<KP>l(HeKfo<&f.&WjT86+?BKei5@PJO0Hu_h=J"dp$MFmQ*"8Oo!kf)dIBi%/V)rp@*b(_f+7>_4"]$u*j'?]c[Xa5^!3c9
%]`.?<mZ)">/09tdKAKecj.W04:7!%dA".F]qr."cVO-koX?5b:+"W)aZbbLrd]6G62GB8lNhXBsX0f4Is0[34`bf5!.FR$'P&%>n
%`bHKq/UuMi&-)=mm>%=M;17?TX=bMUhXHluA](ni)onkQkgAON`8i*ElK'-^Gb_@Hhh)re]/)#Hn6aQD%NAX>'/nT7)Yi5W[H7,B
%f6b7KE+!?EJM$>=qBsQ]#1%u3W.4$DAFNj23>`.h1(qWfFim)NHCf@85pP98U#t=i]lRaCI<`:g(2h!hUo><rG`]\B4g#U9QX4P(
%&"n]5`uAsK5<mkHHgaV"9P*POF!8T.b&gWSqOdVfntkaBZBB/:*=l\PRY!llKm_c+*u&nT]`PHoA]ccsN8u1TK3A'#pE.B?i;#j[
%5Q+9i!HaO8#GXYGG"U*,mmXJ+hQC;^UC'4;oq-GG+,Ah7Wr".!DYX>UB'k.I2U;d.NV,`=IelE2pR^d)lgJ_Fb+1\?'EPtoh(+'Z
%p8@LD`O"H?Xh]aRNjK(>aTKA)e,gTPY8>#Pffa?8KsH;Z_q0lhqoPu$&$a>_/%'!,_PqjLntc5DXgQF2o5Q:$lg'm-GIBD6"'hGk
%]s&BYHnF0&r&Kkho#m$%]Bd*&_iN&$C8ccGpBkirm(Z&W>lWdP];+$6^2M-b_==[.mc5>5HTP)KW,'(/LO0!0]7t34akU(gG0f$U
%/$BJU;%K_YZdj!X!#D]#YdeO,^=1b[Z/H0N/@"iMG:PN]T>)/YeQ9ra*tI'Jq0IV*[EYQ@md6>o[N7S:E^=ggJciAZCVb2%\$^AN
%nCAK*lE%00Ir2;0^0SCdEjiJbLYXZ^:?$0TlB+o`MriC1m\=\mdRN?\f&fm`)R&4$CY>#Ym2,3>Q:Na"X&cNi`$m?H`l:Pg)2#EN
%4t5'0Fe?M]bFcVLf_eSdC,/.5^hEK0/_J;?13UV-ii<7u=V8KP2lHm$Iba<,?@<MFT$&LbhUG0*B"4X*E8`^bo?XL9n\lO*S<hp=
%T&r%@^sTU.-f.Jfm=(j5oj[[c7O,YqT[E]RfcncPp\ErWn7D4Tlb1Uur6nm95;p5.`*:ks/:F1DrO_fS)<!LA6)U3mO$D1DQ4<*I
%cfF)d/\HIg#*_5th:YTmk?Luh3LeFYf:CqHYZOq'pRFA$X=d\k(Yj`6/Z?P(JF*Hh^N4%9mFf,KV<qmno7m#=6b`'`dI(^WmpL,C
%f?M"l?f]5;W-(f:L,YJIO%\6"bE(!OfqTaaX4R'c%6lh^Is6D.kg'-fV%[7i7O,FT<-l+EE.L]S6jo*%EI.'n,U9t8H?+60CeV#b
%Co_orc,E3PM7MO&I!(H-^955cg[E0gQXQ=YDu'A&(-7-ghEcTNosY18XR4?[f2N^ZQ:l5RfABA!<pC4P^'7e[WN]D!pu9[\i_nmN
%7He@V9De>LQ^)ms8A;(+mL0h5NP7S=VmtL(S(#pak#2)?!&a"t_S3MPja"34kQ."H*\3]l=h<(7^#eo)RlA[k&'p/PMXR/H$&CY>
%khc.E-M<E_R-F8cL=rMoZLYfi6d0".k9jd%+V+tRQ1$rjqXJ$se0o[#JZL3hl^_7VPPoFe@f?"+&*2L$.C>[a\&SdfbmhhP::o3d
%?_9FrKq4LR=6ln+*RcQ@@p</>mk0@teBmLbq5*e^F:s%L]_O#Ah]H<Apq?R_!,R4i*t.JBSO^c.[)g0d'`IlT140qiZY`'/Sj)\8
%EDdF@(H)d21>F+$nu-[$[YL>/CCN/X(O*<FKeK?.`V%]n(O)L-m6^UC]J.&jiR.DmpBTH<XgM'a(_5ck41EgC%\qMGT[Q&u;!+-_
%2XQ9\BYH`tG0dJBb4]2RQ*oe7f?M:4o(`[KDgm(;r><kH"'TcPLEZZ++=#e4YJ3:^(`85soj82$q7YMQqT>;rkD&(.ruCgC[ou4C
%F;(k4*sEUE+uYmo+/Ypn60%K<o_"\cGN>24H*K.R^%g=IQ'RH>2V0#,^%W!^o&Gdjk0?nD<+t.FL@+@*',aWI@KD^bHOjr&K?'gP
%K.cqOek+=mMVGfthk&`[](KgOHfo1ZFOKU>a2i*'qrm934<44%<BPQh,g/aU2eXp:%,\AT[<;5]pUXp_k@^XS:[^_[GD&.MDQE4j
%p#:-r[hcDfLZj9fNnWJ[.9cV+Nl5<[nIaek,3R@j_nbT@*eLZhr-MjBCcL@45<E4ZHeQ#?/kTt$_,%JZ"s^8,dO5(Z4*S$h/\cUi
%.RT0ZL.]ii^M_^0@lLCA>NOFJeS@J&bP?p'q"::&pKqjT4FGp9ZjS5h(N]c7Ihc5<`W?uWf'1?C70iP;KDW,5/_QB\X1>cS!Q8u)
%Wt3DLTN/5_B3T:?[(]\4eW4">[/Qfk6Pj'DUS6kW1d1lKhOrn!D/q0kH26^$_'%Bb^2,XeqH`YKe:FQZ-PQ'u!*.(rb4<YX2l>,a
%<P3eNd+W.i3o>\iHpc>@Xo*G8fNNW0g@qU=TDq`$<$FHR\:]Q"<ai1;m['5_Iak_*FZtV:S_A"\S,8]*g\r#YFDc612M8[Z_\U=S
%(OK_6VcQZ_p[<`Ys4pIEUbPodCXCt.H(&^=jq:$kol+tlkJ8A3nE]XVjds2@p%[f)FM3q]f/7X`pO9Wdf%>:^)X,)@m9dL+E@q2=
%^=`q0d0?rP[.c"C'IBbSV!?(=gP6luK6d'uIV34dft+cEektJ4%gpd(XNM-PRt]dGYE&qQb?G?-QerUu]4Pt=>.NMnWqRR'>sJ;8
%,kI0UoWr:s<h4k0E83H2FpM!\TAEUTJ.^GB<_iosG?>Hd+-dld2<$E(OrTF$r".gN(utKt>O/10m/)Efg=9[!P@mRZ5VM(RaO$Ui
%7`sHN_Z%tEbg#CI<iR+%dEUt7p/)u8cJM)id2ruVfUl?pL3m7-q=!3hGot+?`>?M"caDNkK&'a?Hg?&2]m@)04$Ij0Y(h,R<os>C
%qWaDk@$/U@MjD'KUC'WndlD6^-_8+\_`LPkjN<8NhSTl59<VY_+T6LB3odTJ^'(\;8KJi\=r=^&^JfMX3q`F*CJ0<;li,?TO#FgK
%HLt]_D6'[i1=fI1RaUIml*R&Q3HjjE5$=5]96;$P7e3B(pM9.R1t=[3^FglGd?Rn;HE^j[*pmi%QGp]3&"c%m?uGf[8c4X-]_Qk9
%f_Y;QE/$;2*g$!#gfcaXBemm=[j^VlccF5gj[5F6G70,UnS'Z-F/^M$g.g99NI)VDG2IpXqfMm$r-/`OgtP-c=!_R9KnFU?+CSW%
%^AbeS`&A3*@8>nU[mSfS3``FlXhEs9JQ1X\`e1[Od\H[!lIs\,<uZj$BcGg=?UnjEe])d\7GQK.UeJNtYd$*dKq29unD*^/,BCXr
%NTohIfIN]BX-LTrGB@gHDgoI1[2HF=RpSCM]`[)sr,GF+DuRA>cek"n.<#06@H1Q&qlB,/WrLH#Gl@,??+.3!/s=+9*6*F8[_V42
%#9_Q@5A`$&$r/b:6YG'`Jbmupe&"DMpW3C)Wq,K_GgHiVIBA?JLN+i*T&@1??9*L5qGR?<`t5_i+`dTk%r,G#L@_iu[U*/jD)[?-
%6Y:j[^]",Vf#"JI!9[tgdo+q.5q7KSa#]rT5,u);I'Di]C,4?4-T!/Ve0rbIK.3EZ$GVZMm9$c<HtHrro'Q<PU%Rd'maek$0/bG?
%hb,V@SQNu6FlPu!=1<B[m.i.RhAl\Ud?_'Y6/\!aG\LT:)"#(nd)5<aSDR\ao-Mkf,qhAagjHdP_Wk?1K!f^IgT3Se!DU8>hmj]?
%g\cFX4?Z).)TMIPA,?#)KnH^H+%Q/,SgLoIe+`<'P^Fj$Vf;G-?%II[D,fLr106]KhJP.SoJ!B&c2F2gfAj#/j%[PLdah8m4ma\?
%07Cm;M^QV0oSpkCZ`"]%.buN)5DsRI*EfN]oeGEG0DFX4eB7G6J)EjJXW3MpOQpP3n/Xiud_e9rQQpWFR=+F.NuEb&HX&5SnB^eN
%f)]4?g9"UZX5dQ#(u4=hV;BAF>?igoE,d<3*QJVrJ>?GbN=Am_>b1;4=)s9-fDCEHD^q;QUL*'+-bVh=$jXH$.a_2PUbV:?o`lHV
%^o6!8aaiZign8eM\]s^^9HQk@Z5HiKG3b\L*Xq:)frF]@LXGYhHLtj))<^A:p""DCZGZJK/fOtjYLlC;)I?7+kW@u08)opp(Q?-U
%:8esCR>%u;]E>g>>oLP.^XB,^\sGSZdEN_Slcn&V"scRhh9'H=SU-WJ`Gc>?IhJ/!].rrRrk_P!7Ao9u0:UqPm8giFenm@@'$)As
%COK3$eOD3(Ve]p>$ZoP/paO0ko!D5)kIBkA:+Vb(>^m-9%=7?dG5",<)VakeP1'M8O8Gp;=6%G1O`faeg9+1HEg^>'o$a]-<Ya+!
%E+QKfRR]0qEim/6JsfVBIFX:]$eY0_pPp]*,U0IP3?/CHmJ(8VoqisrlHA<sVp6bk]C"WN^KgRPFb_c_>V<@;oGBoA3Me-HQOnK=
%AdM0-QR$bCb2ai4Be?bt2+h5[?%_CDT@DoQ<Z/jFP5I/s+0CQ9f#[-jEh/2^TPH[ON;'hAM[r%B(n]c'=@ZrEG';u#O&_.*/`@)g
%@;7*LIo^rb<ZW.Rf_<S@b;+2$dPQo[9t%6_Pn#1OX!cSd/eoP*jc]:[;2U(dh=pF(Cd&XdQjbbTp(l"E!ce`uCXfpNc&o0(5.pI8
%W,Oo5OjUm?Wt/QoO6e'W)DM*W(--i*jSQT_`hfZS0%17s49*jsMJHWjQ%!go2J=/@.eQ7HMbGR["!^*E"p5Uq%cYEXR3q$9])l[b
%1+U;>MgU"nN)SJKp%M:;1)`jHc*Su`4D6sEPk&jk5G[sA'G'?S.rDO40#eCakUXi]Dt46p`dWS@N7<9N:9X2mUnQ-,gqs[$i5<.`
%N/n.)l+iot''`+apob*I_@CUpkJ8emU?1Fmrj+kdF5gW2g`ctC`\oH+qRc,-394?@#YMGDD]M.6GB'W>*9[u`Ru'<Ap#46Sr\MnC
%UWWJJj5VMa4PptIPpXfjK"aQ_=jjQrR+BWj6T=srE298C?'Y5T;be1l6X.^gZ>dIh_"?\^7YAMN)0LXKk6S?r,JN>46N#2S)%$Gt
%<JnQia0fL8[f^BlcJ)d1ba@^S&2Bh$Zk:7ANou+$0Qa"G7\pbH</Q5&EC+"K%"MN7?rSs$-Z9$WX/]%oT$=5&\5(>WXM!XeWp=+E
%\M44SeJ#%Ok(*YcI44;6)ZXoSX[">?B7qfFH.$=rE$#'?@=W`E!XAoC+:ETZn(=d9j96Thn0Oj'$lgVJb?GTnG3ur#T+E4YQmSaV
%$1f6")K[N#J^A0B&J;S]#s89j^e"OcN1Up#&8!@ED[2t&KF9RtbQ,m'(ia6bb^DuJ,>CW0>H0]g4;U![eQe/='R?&l8Pn?#JV&9:
%0]\0$JV>8-d)'LMY)tIWjB[P`$4@^:0Y_!hY"PjI.>?k+2<qfF6A7kFkiTcbRXjj#im>a[P+\`dJ\Zk/C2+eE-[fYl%#C06P/C,S
%pp^`a]Ek=Z&GQWaQ96Z5.N_beEb5\k#L[""?/K[M78+P=<LF@b2+Zs85''F$Jg$LlRn*i3[grVZOLZhHYiE9Qb#!>?%@69:oE.$2
%L0A2ACP/ke!HQQi@;nN"RL41##(_3,L(LV;Rj":=6laMhN;+g*\FNpqG(IR$**cVl`e[6$;_K7B,%MBkJD""8]eFC_lIl8]mXc"^
%g_KJB1?>2C))H/)&=S9(rZLejXEu9":tq-OornT-er8]>8-fBETl!'AW%1+u4Z?A;"MecL#NdJ>?%O'H0.Hs(I)leK\TUOV8iMgq
%UkqJ?9X5Y-;,V"Z6DKQnrV.-^)s4UlQC]iFMT#ZHR&=A#Og`-C>+nck7/<SI]<9&5n%`TJ$7tEsjFn_C3*8g_MIRsr1>r-`pc7t0
%V)@$^e75mOZ?YX[::NW-T3;6EPob"h%4s.BYW?i8#-Ok!i(O?$k%-YtJOPJ!)\!KMYUar,3@JDD_3Q8;J1R1f%_@h+&ffYL-2$]<
%[ZYKlBO[D%*@8e:9%9rk_M-Zr"`BNC3%f''35M<-ne/58JsmjCUWR+lY+p=4C_.85HqCpd$?1O/NY8B,PJf,-3*=`:XWW!l9Ro`5
%[6DYLmVe-XE((+g>i52\$9[&>!"oe-(?sjs@<6brU'S:a,[cBOaHAA/^(4Zin7E":9$^A5*T@8(OKdQ&+i07ue--8+0EGDp3DN0Z
%d(m%U.O`q#nBi(<4Z?!8Acmuco%#6eV$*llJ[Z\74)!,1Kj&(&Aqj,!*=FJX?s0oflF=LJ&@J?MX&1kYLCXaKVSrNu_<1+I`cPNd
%UB5!O865X"2fqhkN\=[FTu(9MKOhkBm4H-gYWS!0`g:Ki3Uj@,BH%A!$h\f/=NRjc7U<)qk$A1iE!bSt7Jc4ub-;dd!H"[K'+%D!
%OZI#K!!kp6F5m"kh#MJ$24q+V$\fWX!GSLJE$66.@=])F4B0N9bK:!WG1E6NSU8)6&Ne@/]7X^f67ji%bS4bamO8,k`XH)?f<E]6
%2X\tq6h5c)SR^-oTM^jW=:bMfO'mbNiG&HF%&b^Z=<P,I2BtQFHX5>VI7?_Q;f"l'FDWQ=Hb3nm0529-P=_3]NL&$A9K=Z/@2&p$
%Z3<qB=m"!rcqR&sb8ZR1MSlfUg-@J"C4P6ML`m?'CPtSTJL2s`,UT=A>T?DDg4Ls?*W=]')[@2U6emLFZIqbeKqF!*\82/Nm+Wio
%L%;$rCg`Qg<i:M!O+B?F/FF?#]cF!G@A4'ldjSrBa13$eSIM9-:p/oS).6?&L.OhAK>WH/OI.5u@=RG\*9Mjt!'n5Z2E(pl=\Xbi
%cn5N;aVBg:'pV)H8J>).PtfIrWh\tDZ[h7'aImRu_%_/J'<KnNnekDbJ9k`=HSjA?n,C&TI;H8."J[20CAS1e/&:9l[Y+Z8\sZ$=
%V*b'>Ybq_lF"s[u(dUHnEM&!](UV;Wr45pr,$0&U<G%NY$ec8W=f&Za6KrJqc"7+oR8?$m$<?/fWRJ87q:0m14>I*CXH5DG`i)fu
%A(jE*W2'g91e*r?MC]S]b[5ua$8&0dDPA2q`Xn"KU+Zri+\R+gP%^/N&?("*`]Qji@r]JX9;+),djQVa)ti#UW9S4*e\e]?=g3T?
%pea3iiuM))1'1jQ$@U#8.#8MT4(ng\8*[2cHoR,>k]$V+2MZl8;QdM1>-+5.<+Pk7L1V2P1Fba@;Us/-G=AMFd,^lJN7"R>/_<qP
%#<2f\Cd+Z9d>!8+Iiob+Ahm<g'pT(s#c?hjP??tq$jn!b4\4MG_^\Ke"<[iuQ\%>lm#D4#\OVRdaE80Gp1/![JbY"eU"$pjMHu?i
%k>@bb(ll_[Gh=@`'m\rS0Frp6Vo8lLog"?Z3:SWm2&V9<b@qS`<'[(a2i<4E@%r[gfMZ2CpB)cH\bJ`5QW]`L`pRNa[>?5@R:qDg
%5^5#`H5f32@=_jV*r7RSR!J.LqbNS`GaSAI8.j5Lp)CH'abF=D9u$bD3X?@KdN2M:UI4bhSMrK]OI"4>QK9!W,LG3W7T0VfHUN.8
%5p)Ks%[7&Z%bnN0Du390_F#B)LVY^n,rU)*TpK0K'Lo>Q<[1u]];4pj&;-hGk1M_@6-_sg^iA%k!"VmELb[Td"If\0A^o1:UtAkh
%_<-g3'-g<a"UlW8#oK<k:X5kU.7&n&'2X_tVFUpF,+u26Zmsac<[7a!!Y!ac6d.7"QttneYT7IdkWt?7Uurj4$p@=[o#"3k1(+T3
%84)m0&eJPU(.W#$d>S6Op%#UN=jQ(GG68R%$8%UQA)t&$@qYm<%M\VF%7r>SI2K*06"BD=XM?0W5j#j,ae=2pPA(%'\G]`oHuqlh
%EZTrIJ[t!-LZG,%Itt:NFF8^;H$9`h#R1;h^5D?b`MO^cc*JgalJj"49*N[Ts'9$rcHZFj'C7OL61T(^VId$q9;+!S.6I_=of<+:
%Mo@eK9pu4u-o#%$DP%_s2NiWk(>@j#HRR&\Q@d7oJN2FYi,`]?C^>thE]&q>'sD[58qjAT=%3.BZj7P<%9>S47^+F>dj)rKLYb=]
%*%'F'?qB:USPV&]!=4fQWZkh'dOp'H6P`C<n3daH.7;?ETH@rjF;jIT8-Z-2%dN>(P[b$*UO>6rE0U)+dg0I!@MGm;"NSKS2&Wt4
%&XLE-YB@SKYR:r$0Gq`9W'DKX@o->]anR8O=Ia@n2Nn4&5^Tq2Ot/'jMZRQ`:mEHP?Jm<*^mB_)PFrK6^81<c!l7&.H%Mj8%OMC5
%/6bh$fY>44cmp;:nQEoKp-E*m:\c@>[W<,_N/&jFI>g?f751r5^!:T##]LGR9X\s&ECH^CC`"1Z&Lup[>KC6Q'l(\;^%o#F4Wl=u
%W"`oAKifrZYTWF7>SOg\$>L-sQC:[t>7uki_H1/?N,<!fbgSjP`sU=BFsTpGaLTk34qLL[!uT@,fi151$UZ4h6(jGMSjRM!%dbU9
%cH"BI2pb/8a"]?Y]Jq0MQ,$G+_"R7O<$oZm[)=p^a/MlKLH7h:Kn5\"gC@1F.)<>81*BDu5[QK-99t`)i3LO4"L?X&Fl3ol9V8Bl
%?Qh<=K+l39&Ghm`W1!3n*AM\aC>RRm*725%8DdMI3PsA,'_#fBp)LkI_uGJ"UDe``VNsK`"U`'o%B<7Oe<[6/Z0s_?YpXY#+pU77
%\d5F^5ja^XXCO_Pb6%obic;tF%'*0Kq[5PuPJANcgI_g[eM\k@VSR[*V#!WX($[KLYJ^XSBTd?8K93VVp_<9f!tqB,'VH^o7lpe,
%3Re9#(^PlEa'u\="!@aqFT_bLr.s!gFpA"Q7lMc7IfVr@,iaR9eqU&mXih!n;&o,:'V1E9kg?d3BdE`bmZ'Pr"3.'ei]`eW'#Pj+
%Ou$><VPB)L$jJ5JQNqDF!Je/nOQ\&lM8WP=A4O6>+'p/Td0Tqm9*$h;L<:%5E>M1ig,q)Td&LEfbk'K0F)aDh^nQfTdSYaj"gG!i
%#&PN^T$O="\25pb!iuD[XX\o+i%&[L/CYO0\!47o3[VD75D)ik8>d\NBd+7(@G)`2S(]etEbJ7h?JpmODifJm#&;"%FU]NcP=Rbp
%XZ23=!tq8^TbW.Acog<Hic^=kZ-acc0F`8Z4E>Zd\;Y]C7fGEDN<1URe]1#[EWQC//Wq+*ND"iT@hVI46WTdP.I^;U&&Ms^?nfS_
%Kn2#PR49YN4s&[<&j$Mle(H/+(3'*E",CR=L(rS$8lQLr6hCS-HN<C;iZMANJIB3,=t"VYJ.+fLdD;X1;sT+.!klD"Mr4*H_STmE
%E=e&X1>Q$I;gVDm1=)[-i6#Q!OuPkRZggG?\#OuGV>uZo5`D?WSV@[g^h/:Vj-*N]!tZuYgArEP,,>^2:6`=FJ^B(jTSkOC&3%cB
%'gg1q7OWYX.L*ba6T$u:#T^m[d"-2s.>U^iL^5IUP[u3pj0<(1`SmgG#]V*,2%[5Bn^qDpR]>)q#?=#$4kp1*f"b4,U)lSS"T^lZ
%i6t7*+M\kh^`kQFSI:@X,:('uoDATbL!RjiS3o)d:75rl[EU03!;YrZl&-R9!3L.k?eCccH0SfJm2Z!C%O2T>%i!-UdjkLd(lrJl
%hkHYq^r%4\(N_fb2[ehfY$.1+c]*Je.I"mLa_-)g"SaXag+u)ck\,QjT$)qJFsAM((pq>VoR,)[+n&5.D@<+9-%.CHnI`3)WX,7Y
%)8S*5#CR=@N>1;s0^@%gWlE&\UDK'^P];V)&h.?:(#<'!V*$X2!jB;!a^lpso?`dR.Q^>(<?'lH"s:`Z<"Cp6h!f8],I\L$f2M@X
%HjFH@%0`=r$T4?VCktso:JO5]H6F/#+kkX&S"CiG0O\M4Q>0X.I<*V#PVCY?"e[M^#7YNLGIDZZdMu-L*8MZ3/O>5?E0EO[;.njI
%0_1jWN!0?cG!H+W5_\k,I!1.8X"/L@%3H1OmTC\WJPh4/?,jns=/hoj=p829iT(:'`;utL/N[^)4O*s"?6E6:kXH;>Q0E6Bi]/2B
%\V*LZ7ZA,V=Lrtn@b=<"g@J-%=dWTBiE\*WpO%+@kJFBU&d,S/67eHTCZI'Soa*d!68>#!PF3O3P[l4tBMb_.)4:Pt)Xr0NmHRV=
%?b*K+-F7M:;#,>Wq+E%_0lGnuhW%H>K>J'Tqsc_ALPC5Mk6$P%R$)A1aClDn?q[gC)BP3I#R`-f^/Db_,4:P;j.Td[K)f$_YS8K"
%'rhoa$pm@]9UMJ<=0ioK#r]<K4F#ACV"O66)jmWcEr@QD+FKDf.P>,f()S`c!D_]%L6t,Xq<2F2-dZB89/\@No%l\ZmZ)hV5[B8h
%ck6BV$QO=Cj9R#+,5VlN3`>G7+n!-rfGqJUMDfYG@>mLYgC&;BDA\QJ)D5PneA^H,^">^-0W:A6,W<TA73c?CZQp5uZ62LsT'%UQ
%/m`sJ'F5@B_W]qrPbu>3XSP)<[@G[/G`Y@L@8cDh=KsI^#$n'5>eWGeU7:9qXlB\K><i>Kir[0:9u*#Z$q51:$%QEtL'IM(<njRV
%mLd%oHeV/bg-2kFLpXRW3#Lp#V,VFW^rV7dpI@F2-;ELaD);J;OaQPI2d1cg@*=E#A!Ug3*D:>!SjaCIRj,YAhZ\u@!U5c5K:tl9
%Xf7DB'%J!4l46S%!"k"4('1]9/C9)"Oe1EHCj!Jn'J+<0@Uoi7:4`_eCkSo,9"F_:FY_0[[g^pKG%jVB'ak+N>nKHNNBt;@JEO;H
%Rdo0?g0+W7\6.>Q,m1T_"J-[>I)4fQc\[TS]XA$NarV.`U%CFFB_!gu=EW-C4)D88#XflR(EX2SV$i+HL;$,DMT:6$KV>j-JR\_;
%LL[@p/bC]$]R`OR0[RT?MimHJJ;Rdd#uoH&h874UE]apt7bo&+h]69%\Tg5,(PP"`(J$LC1E$T)./b<+5/Lr/`h9mRKJC2kkKoA#
%NcJ$go!p0)g-1jN.rlJ;d6ObM;BkG%gKu;)_@EX&08J.?0E\,;R%_/L>[\grjPXst0H#3rJqXIG$X\c\#9Gn`g3fTM&a0J'5_o41
%^i_JHp]daoE077l)[[4&8Zo^u_csO7Vrf(u00gcg[31<VO6]:RU)8SCZF)pZTWR#i!_KXNq2XN/S/tkSRO9StL-?qjcU3?fioJ.l
%dR4^l56]d)U/=jrfqXlVTc!IDc5B(@1cK9f0!C8n":pDn0)M'H6Nt\@:\j"ek$XR7VML75=Eol;cc,ZW.jBF5Zf'N1#1tB?HdNnd
%_^LS/G2/sKMX-oB1cT+=eOK^-f!Fg-b&'!DW2^k\PU%rIdNfCTK=YXWgU:/J+CI7o,\=(A3DPM6/"`.`-rtIb/jP[q,0cfF[CDWm
%TdNg@.)<6O9hAQCqI%LPBbjr\*PZkLU>X*P7YnL'nC=hP=9i<^'A"&i#tu(^1kk[57k%HYa*<l5DNfUqki*4g&npf'P'P.FPI7'D
%OZMdq"0+sG.8g-+8=M[:2C:o/8QFCm,R^&o2bl+deGq0H%M?`YQN9I4Z3'%WNF5.nh=C!p\Xil!c,C[r<9UJ.O$SReh=bpZLk`AQ
%4(-@-[.8c'h2kTuCCAIH;!KSqg(Ges?>bunMK*n+VU#O\+JbPH)t`o+1kpX28+km:SiV&e-/Ss'*F#NuHCj+CDX;bVl1,9fgA3hd
%MoThQ=PDO)<0jE2<<`kV5jBcD_k.4nla)+L+:Ae=;3U9SFL=`<7B#O'NJ@B8NiN-f9gCskQ\4BX?[-2Y%J[^?7D\+*=D3W^E>!ST
%0U9Fo:XD`S%im54Y6#1i/N.s'^=,KJ:&OF3N42W'*a_m>IHOaJ.'OkY*>u/r:IbqI]d<kr'1!2u73f[<)'*,;5c@5HNmXZAmrB!3
%p">dldX[.mV[9lV$*"7_Wj]$[Dc"j7Q9Kf)n5pbC[a`tXp-]"J^71X"$8lUNj,rQ73.1Z?B:N6d4Oh27;O>6sKTPrP3[G'^!KISV
%Cf8W?^*2gAel8GEKBh\'T(/eH&"^A]1-,T]]`WCiH&BR)DA;H#\>h6R9>]J7[UN0ucRqYH4;:!(7$9.$*%&_3eZl6;7MR-D=PX0C
%MX%GN!DbXBJ$DP9NSkHQr3O^>nfE(el?.Z12jML'i<(d(9L6CJAF4nR%^&N<]^O=8MU]1[TGaCt5#\++*E?CVbc4O+`1F2R8bl&K
%]f1mPg7\PAF6dQ!TUU-HktZXhbGV\&WV[NW$j1*+*a/?5igkiO)1'sUS"hc>Q\,aW7IV`fRNX:"e$hguFK6#3)\gA&/+hi*Lp'38
%#j$l;mc"=I)fN@sXNP6\^gS#o2Ti2c#6r':luU6IKA'tg8&PTKYj6nJgWG4>s$?jW71QlT1=.EEbf164F&;8O!2!AZ36'1Y0&nic
%!r=BKmF1U&P%F-B*OB=2<(S$#4p94TDMZ"WNM[?,[('QVbX)a4-S8bW)3&tfQD'BiSY3!&BeUF:C2&o!Aq<D3K5-3Phu_LY#8\C(
%FJt_TammW>kGJo#BnRs:.CeTRT'De364"i5M"$o_Xsd/n$VunYg.->lol;el"&VEC.q3<`KA:p7`+'XX;$C"BHr_R@7H'[L[!$]E
%CCj2SIPeuE5_P!0[OM$KN<.I3PFU#5?;adiA5n<kWUa=5T+;TX0aoCR7RQ_77W1#Ya-8EUa#ub\,!2@rZDp#JUeN09/WIR,If_#N
%l=qdAj38W-lnT-/Vc'*h;;r)1j%l,AGc>>3R"=IP)AQb5MVCo<4baOUX2Cs(\E5<l)t4e(%H9es&Lc[rh?+W$?7Kr#V*YhlU47#:
%Kl:+21]F<bN^%i`Pq&Y+9T>oC,jmAfotZ`fo\`5QXD6ce5H*"OmY:",&5TNgf5j(W!<&r\4G/W,`],Db)i0ppULGuu7e:ADj8S`?
%HAG$:$jKqQB\PdOs21'MH@7ohpP`\&;*lGMp#ctfA?sbp+B`LbW)d-NOBPgWGKF<88O>bM(g,46Rjr;)6&Z9e:^nph8WS7P^8d2&
%/)D3P4lO(ThjX<0mtusVL.jS/'kr85AZMjL)HjPNeTTBM7Zno5eIj=ZD't/-J!;iKf,0(FLMl/kTZ&'LHuR4=q<>gW1tN':<B<*:
%O&6VrbK/ik/_uG<(cN]Q&8`LjjH>f_dXrmHZ%FR&9(o5&Pm351X/8>m<0J=QKE/n@r+t-g8a:u&,q+A'2IS?RKiCc@(`/*1>hi;1
%W#em+0YlY$_U*r:)>L'PVNI)iN/O)<EDn)=.LYYb:KHB_9tUMdFVpH@c.$V;[Op>I9h(n?Wj4b[D&k6`6)aPk&N,gra\3Nom^\XS
%1RaL!&CK^'!Hm>`l#7d\8k,u<)'L[l?!p:gSKL+gi9*^S]oauZ25@m/-Z(W/0aL-Y4e:;RN&\2Gid9o.;3l$k?Qp-Hd_0o/nA-`k
%TZ%j';H`:.^cn-D&!I+gSsnXc)up?!>=7e.<YF-[HjYM/m*I.k4:2V&3)XN16o1F,-Xt<9iS?]YCGr,`/9NZZ0DUc$LB.IC:Fq'P
%OtUA(_ge"YZ;FYga5-TQ*<lkTie9T%?[MBY]Q!A?O#4X-Jf%$;5tm/DHg#T\]Ek&u!t"IG.?-IknThIY\*FG60@0Gr=199u6!5fX
%K`[.OBGH1P@0:b:2m.p+)L,_Y1n>b("P?Z^lEQXRTI)+*4skWDA&ZCdTYl^f:X'T0(NMbJ8JC)hk@Hd@^bP.5eaGqJ&emf?_kVMd
%<U"fH*+h+oVA$n@2$QcY'@=c]-"/E?hSE#.9lV]j$8Eno@l+R^U:=r3Fkh@r(t(.UZ#ZoV%3`.Sb\nBMUG(9-5ll0`\Od4h3%,^M
%#(JHX0Hs"?eaR^4%k?3sn1(Z_j+p"bbJuS_3<`=Y'PN<Wa6QQH$Bklc,=Q[h)C-BW(o`fj>tN@DD57%4;8]'X1oLXa:4\k:\G_fg
%&\b)P'dJEE=3VF-:l436&F*p/hb<R=A)\2#1hT1.`'6AWZcp"2=NjXuIY&CNa.Q"D!hsf=#%c4Hr#g6mA"c^iC,RnNAkJJo\8Fue
%gjXhlOtsn`6t.l[An+XFG0Ed'XsZLY>eE_15ucjPM\/7f0cu!'Bcn%0\<+C@J9ZGBj#<D6fo/H_;ukLe8>U9(V,12HXIQX3,=[Fp
%W5k/[V8kbn+n+@]i.0[&R?V2TR;QTU[5!P/`tWM($"=;g!VL]$VDM"=Ns=in5!W1-P%&Z:Le%)/;__bT(k_@oihk_O&(@IjpFria
%Sh"<d/dtlE;0UfPPT3f$P68BJMucB%6>keRH>:mKK,3N-3_O_i%#AKZ)9'W'(g<`:-a;bA\kM/R<4Vc`B64hV2**EBUmcYbiHJB<
%Hm]qpG)FW?;s?j^]a4*U5n_>"L\DMd%@HS];_f-":B@S#%bn[]Zm?ig!!<HNir!6gn+S#X1!J$R'[r1;3^LS$6l7uoj-=-%RCC&S
%Gb_Sa>R5TQh*>X/Gs!hFj)#cCk)u&"`ZngdO1WkkP+DYlS0b$$r]D49`%ArafjOsIEQ(Z:Tb!8u">,h28;uqk9Y/%&3*lZ\SSHVn
%4@MS!f0E6@`umRi"&CI^$?$Y^WNdkEapU2%lR-[$4PdsQlUa_U@a_EqG[,5en^rUGX;Vuj"80__M:p`j-6B"Ck$@Oh@`m#MQ[/tS
%S"e[`3gpsaK'6.3bUdAd6+YGXV(*'KO$sh4#14lD3N5V5ZuMJ9>ZQbVf;E8D[`r@H^@;CdhJ>a&7u;a),5?Aie<s3?7.VU:6k)G+
%<A]Ga8rN:m)+,<tWOcj>Gfu'$&A15d(*F*Z1Be\)f`^i"Z+@K5<$)JdeaZon^+#sqNV$c4iHLt%B]4Y\Oi,f2!QCO6H914&int!+
%(dZ%/*\F87Lqtj!:>h!4`/@M:^$O27)i,C:1>`3\mdWbF2Vpn4E^l)s.H:-_Yplp$THZ[Q.GCd";/T>JQd@HTQ&>FT@uo7BnLau9
%#A$&<ffnrq[N!L&F'U"ZSdLBn'ki\rKR)N=ZRT:g_mkJ>h*BI4Wa%1]6Q^0V\0]op,k<k]:E`/m*&TJTQC/p<^VWlj;sU3K:qJ>+
%=<n?6\NG+@_[MHf6rRN9Dk"\q`T&Fp#k:7l>o4]qN%he39:/WhQX/%36AVR*]f=K6=sGX_GY%,>[)_RSLcGkG<25GBdKIN01/Jt.
%$+6`%eHDGX3u5PZ@Fm[D*R<A/ZOieU(0h!BlK*#&lFm<^[n$0'hehsbFTZaGB'Cf4`?=#ro_;`4/i7!Fe-XH5-,6HI=d)CjM2cV[
%2%=GW\Et,c6?.$51A$_F.&-s[BM!gn\@:;DTG#Tg^<t>10K#k@rR_nJBk'd@mh/:-57<46^dUZu!Z:Isd3Cm'E5JCp7587*jCa#)
%<#9%1<F'[&c>(hg_3>NAhgeSa+[ngC:c04bn):&H'15?p7dFR#e5257P-cX+O$9Hb6g8dYq3)$+%,rM8(o(<doIq:[AXepGJOiPN
%?sj"!#mt`F6NLO227c^W0f:WgQ;\nWdQg67P3QbC4&MA"%XQb=)@52$OBU0QTS&<6ig0(_KPq9bInpN=U!u?tDNNcagIB^MaNZ6Z
%(]auB+/BM#EobS40c>s^%M[A!\E6="8.UujoN:X`\o`\HRKg;-Kc,NYX@'j#,LR)"Ts<V-;YVDL$(l/@JN6hdUdqK$ndt!iHn!8>
%nZE51&X[-r0".DRN/eXeC7m,u$D7m)\g+4/[?XPu56^!QF$4)+;ptrF7\CN+$moHnd&ROD5Sl(P)8tR1S05eC(bs]WJ;W*$;t5gb
%4Xq^?[U_-&ck(o@Fp_/rBXs"U&PJ^H,Q__28rhqt@Tech;b25AaYGTdA<"Qn9h=rM(2H$eGVpF2ZKO05kQ]j>U-Ea<)G(Cg:d#"r
%C9G'm)H=DgW\>JcX=[r#d&@5H1iM/IXI\A]'p9VVU=]nd6P&.[VB$$keLrrHE!/@2E7J/>H<c+B*W8YBh-E,hj"0+H4_CMq)@er^
%!B\ZJ<u!V@V"$J(J;q%mq3&IHJ0-[UNL->qgA$obf."VJ3I2Z?2t(k'a:^<?eKM3Y]I5`X(Xo>P@3[tuKI(=t+Z^K$Y3E!"F!7EX
%^p1Dk@leuSK*h8UAicTBGg$IgiK['^Q3gI-`(9YcRifs3Lj+.KQm@9$c770Q%R.k?Fo)fFR*@IL5\5/VUJXdJM9g/1/O9FM<Hs.C
%FGc$%20SFlS?i`uFL%*iW.)42=^LJ8q#1%,)nKc$@lDG+&9?Nu>bT5Ucc.nn-Amn6ogsSA"Bg+POU"6G&\/j6Tc0YX"s#GRU*E<Y
%l\#'CfB(%%(cNWP_o<MZr'\QD$jX^j"9Xoi<H+[*40X6b;IrM,0d3bELDn%7"E^Ef9bkTO4b8r7%P3'%-Je7b-`g>neC2`>OXs7N
%KSXOQ&X2PC`_98ClbTEk4q3#S<1de7Q\*3@lKOJF1:3aV7<)/8:_Rf"<uZ(5piOmshqdnACb4jrPdEjTr,c*Woc-IVhH!DXEP;7d
%eQFXiI[>\G;;%i98VP?KF_uLBaV'K_^a(!f',*a4E]i$B=%K_<np>c,9+uVtA4$K\<Do2Z/3rlaq;MO5$h4BB&>KIKK4TAY@FHas
%@?B:3+jd'4r\94SqruKE+nRJ5`q8-q_)(R)5H_kA$S54G44d+H8T>:9?Hg=REqm<%@>*XN#sus'37jo+@\+a6dP1q\1SCE(>!C1G
%+s,S@`V1DFHoslUoL]:9[10?VngP"tNg_*PZnOcb?ORJJoLKBY%CeqD'o;$pl8_`LPUHc.qjQWA'?^`BQlJ(jf>]c'9`d?F]gE[M
%!b+e6nf4Y<:BlCYQZl=0UjV6@4Cnr\h.oh2pcSdS%n$]:$$4I_(FE%ULG4=G=:CMkjVluW>K3Jk+aW'#(El!9=Jdq8R%sgK!$X"o
%`o_=.$)`_GW'U6XI9S)ZUL_R#(jYQIYUi`f@-VQ0I0CfPZ:+JIOX2-a!TSf&A*o3Y"+20,8e#]CG\J^C0u7h8@SS3dcBh\c_4r'K
%$\PmT__=AUSoe9P)PgWk.ZpS/i`-W8Y,u6NP*2,tB@.>X`F[`6.>MdS+m<+<I_9>mOsgCZI6`IkI6!Oi!V;jk3ZXOf8isju`+Mrs
%Vhgs8%S:D<^ZC)B"C(BZHS>4I?NU(K*J&HlYsCc_4Ft=EL!Y076q$8&Q^Nk,^#2qLl+G1(rLla59@,(dq8Y(04iX12qL&/?o/O%;
%H2+`TZa\r+>23R-:F-';+X(H`,WeMKoKL>pe$"QELM:K<(GJ&k?>.24fTtS\^^^O^"bS][6Gp!^;"@3SXq#$0`FEYP@bGE?P)Y,E
%=O;=W^1Xn==eG.\U_P[+j7@%'0>;+,`dH,VWfnoh[IB8PoSF$i>DlX..@WGJ1]m"[TlR8DNaU"N7<X%7P86#nEuH-O#ECVd&&X\7
%g[P=l7+)a..WN>'ce:ANFP3@(Srt?QjG-tMAbZQK!IK?-b7=@E>6=AIUmoki\TiN@-^V!.@"K.V4gQm+%(./)aU'%KiQEGc-F*l;
%G]8m(mZ8MSj(CM/n_l68=nXGmPA'"*!^C(i"S`bKp=5XTqUPcj@G.#M.Bj8W8i#DQ,J"]p$3fPX6:@!H$'k=S^1;e_!3/Y(i]A($
%hMq>6*)'fXg<=WL,src:iP6f^pMeCea&C=X.![s.8Qm2]5;#/O1^">]j/Wug,LT]F00]';l#IQhjq-b8HT(fm%4,%qaP=UUeS$%,
%Y(?(AOol;+4Hgg,3l[ht/$%f2#`YRGg:ZrdgBuL)TSGE@<7T1V"(]")855ei)L1Q/$R_k%=IF%O9+lUc_q-6b\AI`Y+MGI_"]%(b
%@g"IF\Xn6mX?a/m"J;b@SJiX-Hks(=`e'^I/fXrWe5W50T2J#b<<nhCp`61fW5b5,2*$mjbr*!b_EPm1U?'gqd8/60MudY:*-mJ\
%,\dbD][.U+Rf8,*X-3@@`=2;Gd,G;K0VNUMQZiSF7@BV<5i8V!jWdTo"\NbY"pH>00M<`$:jjZU+s8,#.jqfSnXqg;L,R)`0j,g5
%+_77G/H5h[D=iSLL#CuULK>X*2!(qF?;YjejMU&El6S'8JHhNNoGJrNfaYC9M0/"B;k_q1?&u0Bq\Xl.1WmRe;*;W(\.#5R&b50K
%8ubNbNfQ,Y;1C[A6I:h3(QtAj$qM!$-[CeNdSi'"KpcX0m?>Mt$[UM:-2J4<PmH%W34sN6]Z_P,&`U\/)_XXl*Z8IPA'*h&HR=5t
%m[N/51IipaL_;(Uc<uFJK:&*OLTc2:pZr22cN:)$jLH0CTu%e^ln%[$B],pGigk<cnImcLRh)_@$T,k+`<c+4#2*Z:cr9>bkbAdM
%3Z@NN7N>VWr(%S..>TH9Sp)dB7DP6L$06=5?>-[ec(eO9%^tQK`uQ/rJl"_s%0ZpY8Y"9<=&'""A^"bQ(mbhGSO$*)m(d[c7%lkg
%:sT'7o"kIP?%X,l__4E*Mt<!VdPLPjQ*X]+Y&aIDALk_r&i6*8cZ::#as;XrFSIPYP+e$:9/#S<g(*A",D`lOY6hee+;H5WcJrQL
%NnPjDHk]622Bl:upZ\'OP\b'b"X1Sc/ol,<L[1YicWMrAi4c+rL(msaEYakD0kbXVDL):1(iq/#,^sYt.R_pF\=DF^&A_^g/CH\-
%WHuA,)]u^kqRJ:jO:p#WOHg/Z:XHY76g:W)/mdH[X4U=HCqN,2WDuM=ci\9:iJsRDWueW&K$R%O_)dd#ode7OSd#:3O%ootOShMc
%[GiA[Kc;?@B5OQPn<>dIpV<IFA<5[=iDOVT8K>F;7t_:LHGpq=7-3Z&&D%;@?>/Yp@/LRu5aQml!\H9A:H_+d\&`@lj%&9OoC5.i
%T9p2fGS95B&@FrY<;@t3W*.!Vn<Q<fc))cO7:Ggjj;_WNA8[D:Y6mm-=&XZX+@:]e#&Q9\2-]:9TJ0O3d<Bk@K>U.33eUZua]oBj
%$"MO#."0F/>XBE?q@TCM_6K4=q8ousrNnO-."s*p$p't'SbPW*9)'>u0R_S+8Ar0^=i<ESe9X8cl2f3?djp3h:`*u,2d&p3;q+_;
%CmEC%?EX'ThUfrC(3Pb3eISj4I'b!j19Do8$j5D6-tS[W_,B^%NPS:!D`WYW';73Q$,Up^0k02-F:l@rP`JI==j-`EN["ssGD#Vr
%HLJj096V=;"aY:$&O@Lk]_E%-L$LF]CXY@7no,5l=enQ4SE/5MZ'9sY(+EgRR-.(/CGVp]-RKJ2l1Lhemh01)8IV;<`qE;@K0O>B
%oL;6pD4&sdbMp/VNj6,L#gSiVm")>9,-9WI?)]HC`d90/C0;N[89S9"[ZU*?/J?Dh[rFaASU`db!DL'[#`>XR4_-Tmai),*8@g!%
%$k_+Cqn+gf>YK>,`+G$FWt%8CRu-NbYGLHq/2<7u$?Qi:/1Cdo;!N"bU`LL':_>9LVLK-(Vlatk8&n7c9X808K:hAfMRklkLAAZ9
%0eCKFX]*F,nRH_^-O(<^#R\g#bn0aH1/3=/)C>m5e'+2cpmE$n-..XK5_JS@W2c#q&/<G=6,(PhPE(ID;kRZR&C-#u8.g;kdFJf/
%&i[[\(0tL#@b=ktZ":2:P8$7&-.7eC9#hUF"18Ueca0_iLKZEsPrTBojL%FLqFmAbJJ?ZABh@k6j`JN7b#YWT9]0<ZO&a.l*^N<]
%26W5H^;@08X`^@-!fOgT`;2u<RfGf2p_D.X,6`[+AL33A1WQIn[RA)33]WJo,?BPdr(h_q2GoqL.T7Y@Y5!Osk?#>h!s^a)@1l!L
%;!&['WHk>g&bPi]9<A$\$r4d?P>)*E`VF$t_/.Ql:d3`Sn13.)N$d9lk'46mlBZ6o"9s0R;d19V;H9]7j"1it=7ITn3&.HT-LK2b
%.jgPj3NFQH^R-'?R:XK0NM--P=gFl6k3TmA60W&Vjq?-nJABGV('Ge.8=nHP#_lAhCG8*]'FIgZ$g,IIA"1EP_;s5C[Hka@U8s:'
%6#81t,TWG]<EW@iRD`,fF_l[R-rcL1WP4ot+Q_h+"3aT$"'cWa&^GGa#j7">A"NNb#^nqh^'s'I9FSF0U5HGkZp+$=8MZ=E8CbU0
%Rc^\;=CV%D/4`HFAed\UNn4,%Ci.Gg`$Er5P;;!S8PI?U4l%#u%A?>j"XQ+4;k[bQja@tDR.r+6?J3.lmYm=o`8f6STD1j$FVIO\
%b#h,iY@T8p`%0;0PJ'!<]]g.Nqfd@K-XNIs"\$mI1pfa3=W6QOG!WMW.]]Z@/-/@K@9N[%a0eCSk8]Z7]N0DKQ)1)FFeU)UUV^GC
%RF6k%UoAOjA#>b&Lq*P99>Ci^@YAqA"Fl(ia8[PjR'446,'e7HY6<eZRnqdicNl,/fL+9f6d^#;NL_?bq2INbM%8b*M*[JkWPt>D
%),>SWWV3kJOJ-m9U)EMUp<=jB@dL<j(e*o4%,/->ki-5r&<OW[SE]#Dg1tl1HD#4lQ0NX\Wt.kN$GeufYE)J%;_$Y!NJ:DC.'YB9
%F."^,L`=C"Zu)O'f/-p!&=#.pP":nEKi0'I_e;YO@jW%Jd'OCN7+mfqB#N\n3EJlXm1R;iM<uT)U(IN-[NpL.RKmDE,!m+4A$aZM
%''o5jkNgBT,MAJ3^oQr+r@G2U10)J,2DWN@XjoH3Uq9+sO]BrH`c>[#9.YWr4<C0/Ad(a1Ib-SL-2Rk,0Di+Z3q`rjg(D'-c_jt'
%_-p7i6c.4REs,fRYN:9&S0:&'d#l'RYeX9'9/N5P`Fo!7WXVNkg(QKg;@9(c2Q"5NE9!j+M,_'Z=1Xc/i1@)`YO=j0#HDrAc>Vh\
%eEQC=Edfs,h^HCVepr5XOL2)C#2jluC@d<H#AREm)C."O="^#3PKh>[CP-CVfc7)/Gp8XQTX(QCm&iR=*@ADH)be+6lliHW>fi9b
%QtA@VpfXW-#e5X=^ugnW6l(rfV:k^4fM@%Y>f/mn7W`@g&>(l6"Hk&D)2S6C-?Z0_gd4'n8V[%.IHud^LIc^7*t6'XXj*af2XRs.
%9-`g;?mPQ&i7,QpJ9l1e#'r!m(NUG*W<au$D<4,s^K:Z6@P5:I1s:a/ai.]S@Y$`Sa$B4=851tBMJ9N`=gT9AUBb1-3!.Qd3LJFf
%A1]TEIbd:D"oPZq5/MoX5ZXI.4$-V!SkOp-ZZsWgl`0hY]^.%V/eA`SrN7r_%cbPC5r^5jF#>`;g0'&J"B-e[m(g5PA:Qj9q`R`e
%9Qfm$59Q%sUom6,1G?B;oPDX8E;,oPpH^\L>f)ETHSVnUT_L)te7CZ95h_X3$O"o^SU+itCbgJW4O(K$G"[+KRdBAB_D9pt-l/0*
%XSPP\TqbT)QAK3(\^ZjjV@L6s]4j.Kq?NA"AF8j7P<dpOK&>A!0T(tJ%H&c;eQ\;P$khsoM-C[GNs^3@1beZff4C]1*2<2N/q73f
%1<N&#/EP<Nf;1C?/=,-u?!S.h22duN7/^l6XB"L^P$Ki1)0D42?)TAUFt#+(<Yo'k+@-H?mAUShJm>.k,j;t\Ar1kcO`cb([@9Xt
%9/;q]8Zm<INFWKdV!c-:2S!m0d?;,%R5Kr7'."tM,sc^*!q#cmW]bLJW=)6T+Vk^&<`9"WYqZ)NP_tGsb'N`tHkle3n"XWA7&oss
%"EEt:5$*Y2+dMGrTgE&:*42UA-sK=7HaJ*<D[/Fdd)c=G[i'oeHMaH8f*C[j)MifTESkjmT;.H,m.0pB]"cNN>54Ucm43>4rotUe
%(h88VJb]9,2f$\\?+9^0,Kr"#XBYE2iIlks55CH:Ua;Kq>%)<LZqI9*?Nnm1\!;8A/7`6rhU?J*#Eh1BiiB5OVVrF</l*oJQ:+2L
%`DC'+#CS7I&-rg6DqY]F!+:/Wm2Js9/G[?_mK,Q\)b/S5i66&I456[INC'\kZ_<eHi2SYNHR.2[,A`>nlf[B=Ve-6:Ot5C:YEbi<
%_%pZV7[X3p("ct:(s5umDsgrc4[<R#"3jH-WV:gE/6OL+\ka$o0A8;85'O:M'(WQ`5+o49%,+8L*2>9,hpHDk+YI32GTaRpU;is,
%.^uJ)'Fn60^/bc"0G*hfYd7N5^3o`2aeN1r`+;P<P6dNpjiUeB+:4]O"qrT$XHnHK@S4`(ndksA+PX_u6;F@"*CM(85-qmY,Y+7<
%27qo45hH&ra`B?`MK]pdC0S.tR"m%h[*_03PU`eQAM_ep=K]=hQNB\gnPu#ckmC_ArUDEi7i\C[,u<dc9k4HK?$=nqAGpAu8<V*Z
%PejJkdMBBl:4@?g.*Vj-afYg^qUMksc'[Au9FF&?`Kuns+:O7d(Cb-%Qec0LOogfed:NB.%*ZbqROoDG;n<%$hn`P00Y/3W@M#)p
%`C+FJ5tuK=XhM3d5jOLh5:]VjF>8=sS^dEu'"mu8K^pi"8^=^YoA.VD7IBTLLW2bnQi;h,5FK-kbWk5A'JqUZS8XGKDX$I\$f!\6
%K\DUpU:CHqS6:S>Ldh1-\Hk,70Wq&$b%,UPK4pI;ErN=B1^?scFgG-UD\JC7h,Y0,CO"=#jT\l$R,=L=9*sQpe?mcL7#`>$jpF%g
%i1_6P)hEOmFPQ_A6'GaO:>2S^"EKnZQu(f6'3EYKB_rHrG>DSQG;<8Wqq*5tD0U:Aa\'jUfU7D\G$iucJR!*ZYY>n-IrB5ch>SrR
%o^(+9%`Fcb[WFK4VX+Kqg\`5j>DS-]#d`ZFqYqN[[+]+=e[!YY/A0(8%6KolnQ>1[h8^>-FjS1mM#3p+H8$;k4p[jhmFo"oOi\#L
%_k#ZNA7^ke-&]lFmBI$+c>uGWYtVRg1ku'LBm\.!%h1:'qi5("]Zur=(R#p`L%jpBraTW4TJTfC-'&`Bd4L5,eh,U`-.uDP;_bQ/
%,p:tR;FnF.bbsBNn$HUSp\%ba8!h;.%L^/e<up6.UfM9A]u4G@10kVeFXH8Pad?aG*+Wdq>s'AlAlWj>HL=OAng45e&kQ"r#"8_"
%R*CYib'\XrC(tF-Gq'8o[TiA-L3-Bb3X,Zap(=%`KMej&PI<Ofc-%[qP0)ZffHAa^\K(r,RRb"lVYR.2%u-i/Xj=O1&?IG,XqX,n
%lI!_oOC).1F@"T@q&O(6Zu8!3iT'cE/^s+-DGK'fF1G0ja4IkSq,$9aVTYD;RBC+EU[s%"[lto3F#ikgUpB>*koWjU:L,mWPFq`N
%:CCH49:.lRbGNuoQtNuJkN:g@l$2X=5%Sl5*arZ1>@%>S']L%XV*2GC)HY(l`VXC2Q[N4_hn&1+]Y`r5@HM'/C\[*0Cmdp&0u@O1
%<i"lYWS<MOSVD&8>OCDHcV]_t2C4@)I2Ks5bqpchh<)9:*JKI@NRHS"/Q?I3pXHRp<gk11"SnX:F@FolkmV8U-11-Ng1JJTSHE2e
%l)8]/aQ+(3'IoPFgSKO8Rb#X2@QL6</*FK**)T<h)E+.0<&'gccAt@PDM=iaAXQ`J&(mZRo0`:d#lUiJ?)#@[-4Aj6c<b_GL,k.V
%:^<q`Kpo=c'&6]pX-smA<8,\AS)`$aehASc9blsaLUX!H3Q54]Je4cHUQfnXkNHeh0TqaRS_Hhi1.AhWH<egK.-TY(A[/#`G*,LQ
%R1A#+44B]=6j`?rdToI-$?qg_V)gQc]M"enSXTi@A^d=6QhVJ8!@Hlr[DApK-4X65c+%.ZF"fjMYWc(p'>D`D@-.k2e'/A3<Y(DV
%K4VtHra7uO[tS4)3Oa]MOg1Cq_ihplaLc<P2b"mJ5"KREA=UeMbB--t#11!lMP@m'?fdji0<bDg\CXLgg=eH4OgtFALbXHoNS)Xt
%UDU]kE:E!klOHm$#R[q\b[gb1?SJAM)Z_K\;+c\92'Su:,MoYC-8lN>';hM`4*PI)K)>55A&<$*f%Ca(GL&qdFhlMYPJ@?/'+!&]
%nQe\u:aq</i^%YHf+^]V59H@5F>!q*&-L(f_I!Y-Q0)J)[7PYpk\U?RRdbjCae?6TbX!N8\D6m.1Ih-C9VRbn&3WS+hCZrc"YJ60
%B/2s7=,J=/oDqWZ9?(A[.ceH:#Y:7;J\AS05t1&fl<Y5hV-%4sp-9]gDci<l6te^,[,WZY;1OmhQ.]Ia1Hjj`iAkFr@LP*:L(c"V
%.X.qp@13("7hdlo2ADibFIWtX+l"coHm6$R\6Z'B[#akN!\S)$Wu_i*[%j?ubpU;/3upSuL/0NDMp+iFP)ri\>CY1;'=2mUdmD=M
%&4gLU'9!5cl8@N!a%U0G2FHoL4cb,f#6?<<$:]k&lCq<p`eeVi^9th'cXU@mnFA^kb:QWdQPrFjOCQ0\\0]\XGVHtbB,?[NTVic!
%U/D*H_Iuq;m]',s:iV=6,EBGo">bFs#NAB.JFLBoL#TqI`anTRo=tcJWSOQo<>T+EX!]i>FFgs,"ED0(c^/(Hn<]7epgR-1+<:jS
%f9Eb%jh9b"31==Wab'jE,A_1W1Q]6<Afo*aQPTK`)]*!s*ajX.hn@TM>Wj:GIP7np0h`3PA13<s$()@&'qQsN:I/#MHR_B"`@X.H
%HPP+M9O>70UPl\[g+0`W@jGI:`B%DT5)^7UqdR*XL1r39cHa.;0,r@MO/fn]J?5HpmjmoplF,dBD%ImP!(qnE#/Z,"7pMLZoX.i9
%4I=,`H&][>9#+,.YaP=8Ag9QZ>pA\/LJ"Lo+]BtY09_0s[V6,GR)rR]Ds0I=Nt(:V_eB)O8od$ZK*jA/?n7m[(m$RR?NlK>Om>n5
%1USIXL3(dLKR4*gQUQWpSRpW0jI;cP;S+/i*clpZQdYh2&K&prhE[[,,f[["BRPF#Mh.$>ALf2q+h'D%NG)Ya?p9YIiQV]aiV"-2
%RL*se5C.O1?URPTlACBkZP"90m-b2OZeC=%kP:U;na!a4MTA)ogU1S&d'?O+FuVq]d[Vn/_U.8_S,VLg-`"jk^3DNmL(gor\@]5X
%\,"7PcF_o]O=AEYmauC/2P4,922.(S^"-g[J6p^L4Zl\i[<?/<s%k7?7hTo'H7rWSL+n6C<$#%F[W?srUr<hKAXX<f6b-`nRYC;@
%KS%Md&0nZ)Ghp0j@P(DhFmf?86MKJ&51X,=a.,<bMnICeF<,JmlT%)ST(0f8Sgd_m50QH@J1_pgB!0X1M6YsM$"0(FqnpkMLg\>B
%aCWS5:uG4*687#mKTt"WYq&1QW?sr*hipAo87lai`KZ*og7dg=i==:km7InNeb,MNju.$3e354[YI3eYdnJAH/\[2'3BXY?iM<Bh
%8nMJJY[cdX'6_oc'h;%3eNVK.NH]N8:rl4&8s+O`_7)G[L^]D,O8R7`a"$\pSt[?-N0alk`Oo5f([RF@)SPMDOI[nD;*(g7<u_T^
%aQhl7')b_pjLl@IVNFnd&0(KO#_`nL+9#to7(ht@[d1^/,,q`]N:"gsR=1n3eYQK[OM:Vu=\qjU"Yk!LjWL]\D;"Qp$AoGj0I+L$
%Et<fs1\p$\$'#V6^(q(2@]3gP2'BZ^O"%!JILMA8h:LMNbZNPtI!BIJ<J_C=0LSDsj4Dmh*TfVO?.bYobL#31muC2D$8_L^pa)%F
%$;/8%UW5oR]m.)LRdLJRGP5e3^6Y;X%ml;??h8SfOCBi5j-Lc7*Amqep.4chE2[ZCCtmnH$`(B?9PG=19[+.&5P/EjEG4:TUJ$$4
%As`kj6:dJh<I<jl@<WL3@FpeJ!tg9fH:]P7q.[/uf+>XIMtbR?)mri[P?b`@P0=,hjrM+LP-q<?63\p`eZ?KrPe8i^jJ4b,Gp:=S
%3rCIXfnhu`ea:>4,FXM3A]G'.Cmo1,(h`84GTX7kjHbt'.Y'@YIOfJ>!0rBkWWFm5POFbQe-*uYT3Ne38sRMSa(jPG*iYaUU\R_o
%k6]3]R?$\cnUTCm:mB7)6np+0I>r&eq)O`?&":X\);)Q+"hgb"q-(VfAdpP02]J6O>Ruq-inN40c,0_55&.TMgcuP4l]?E8?DTC<
%PtT]2dM+I(`&/K3`oWD$j^hgd5;8)`17&R9Bqat>OFGm('MFJr0J>$U1gC<`Dsd]Vd+$^Z(bUKEA.)c0m`"rY,#p@:&7+6nDt?'D
%!OlHjV6Q`H$.32DJLWlC6Y`7\0i*(Vi20!GhgO/82TJ4th4D/.FX#>s.E-'@%1]q%ZOH,D,D%[=?U$>D@XP9=lA$KQA2-I65'AU&
%K8\!FEK3."':iQiR+[!T_oTa3a2(k1TogD6O35W0I:(:dp'=YYeC2t:\E3:kP&bhbbtJ:Pm`QhA;]a$H[dkZQ@/9mjEKSkpCG:pJ
%OH5<UcVd:UeNabmZ4/]0ZM^E&>UXR?JF'5dZ?Y('6K2Hur;'9a]>hB24"DWijEeLa.D-@fI#D(/%SX!;AZ4:<NFs7bO7hWr#V2nI
%Xb-'=+>s&89[+b=SMe))[1\Pkj?9l?44mQ9I92&f$+?,a([YJO`h]C4iN@ol22gAB9&b;!RU7MmeQ\Q=L1kVb6KO)cm8tn^CN,iG
%QE:U-m%*9FCHc-#JjD3SaMPB8J:6n8HO"@m,">AMn)X!"ic3qdk-^Gd'l,U>-VN6AdEk'olR@p,YXa`7<+0:O2i%![od%.Q[c8-#
%=c9'19X[]XVgS)BFtnNu<(B<f9ZNU;"5(_3BZePfD81UdWOjXgC,RSQPrd\%6PYo^:/Yo$bEmp-_g#A#gMT+5Do9Eol,A=>"5\Z@
%O^YBgBjNf^hW.SVX.q/.oUdn<-mID\]akg&H5cJj0G-?/1!&np;:SCc]Fh#Kb`QV^OREFRP^tM8clk8SVeKK86+dfeT6g"5%6F[C
%9[$C4dD=l*0@Q:8R_UiV6b56_9cYbBE>!jGAe5b""9G!4`<ma_RcRlbT?sS@3$1G5r<ZXZ@iF+qDTR5Q^AmXQVF^?#d0p9!'!B@#
%@u;fQ7:=08ORc4)W/U]]5n=M>qh]t(@.L-oC/^D*i3CGCKrhV0)&8lff0g@[82Mh!Aa/Gu-5rZe*3sdD=Nf!B$'LoD=J1]W<0MK9
%\E6CF^r2I/T#o3!>PXrd_Hao$7!D_o7m&2AP=tVl-X*afKhC:1"@",Hbn+tU^3FFPqM+j^VQ?9I@^GT]i$.^MX8Rd[BUk]0/'/6b
%iWh$@`[=#!Lq@3%@SZ*Z/-nY'd/KsKK4"gB1)'ra+;u57D)bt8&qIX(jfGrp#0pQ!&\Wg9'b/D$</hYa45oQ6W&>\[#]cL1dKek%
%,1o]JZNmVV2^A2bb#G:GJ"dfM=TtUS&g$95KRsAm<5JT"+1853/UJE;%1cLa.*]Cq&eo!VL'-]\>4_"J@EEBFFL-q(Cpmr4JeM%>
%R2<\m6Qi&4rDC\['-[9bl/2W#e=k\>P^SrK=0H4tH0FC%.1K-kW_T0LQX3rrcFl%lTI"E[\LZS.Q"BA(@TfQ!G0b1XZ(^[6AIDR1
%,W`(D%+PoC_7[Eil\3)<N#db6TU1Eo'h^_jL3F0RpWIS+*L+k1+si$n-N>V\j<N:EbJ\GVSS-o;@D9/^KeN5O?I<6nB7#Dt,ITXW
%?cSGV5n%9-l@!Y"4si+8RkWa'Gp3K6)OQk>8kL4mkhf'69:Wmrhj<srhcg`<CsC1EABB*3W'R`?B'IF)VS"DU>BkX>V!ND5E=d[[
%4#Pdco<G^>?Q_Y>2k7s"pBB!C8og0XGK=5\>>T0Crk7lCEJfgR0S^2#g3SD[UX9<3)W13Fjs.Z%Z.<f;S^(]7G'1"WHauu*d]3FK
%_'!amX!Tbtbdr&.SV6J^Y%k&eLAJRd001&55P^;4ph"D4h!+&CO^LS@&$]"9nB3*H:0Os%pCaQ@7:B\P+S/!$8e?HWW\&,250'B0
%Ca);8Ka7AC=n>OC\(XN\GBXsg$#AS=D+Bq`/4VX7FPBm.2<AWCTn%4DKZ*recNEc;hSYq,HSP#&K3J:dY'rY12nHRH?4//ZLZ4[F
%3CPjGW!iHU`7mlW?,GTW'7Kl@=:@A,8-m^Z\5.R)-Ua]PB1/tp6,.4W]nWgIa:k,ej6[45q&/LK(;7I>KdhNeg>d&4E2=V&(*FQJ
%D]dTd?A@c_[,Y>e_Ru@>=mjO4+@F^/1S>SZ9="WdBCNBf&GP/CA*GCh??"hUia<C;b"D$n)YC(=X"kQ_#;>6`3Q3!eepGd"^f0%V
%``mqB+'DkkUY:*,L#Ig1/^k^f0uY&@5n]Gupm;amF$,X;%QpDFcSRh7]XK6@;XNLUAMEEiq>+IA=I-_qTM03%I@rB`A0M^W25&mn
%5[)rAS9HI4)gb@6=Qb[u]naV:H&3G$p>oItKEGc`rr1D])[tdt)=@aVTl.1VHu!IG61]#ahh''.dL/*%A3SiCD5<+4b4Q*=#fS!b
%FqasG6:>H$$D/Tj]H`_=#q\t,\3ptKI;YPq$;3rtLf?`F!H-E1Nu%r1c0WI(bdV$GCte%?&Pq=eiD,"MV4$@!Wm(r7!\JmCBd^"K
%6[CMJT>7q=]Jr>8]@GE`+:]c%Z:1VrEn%T)O`9hGpF3$JB2Jk<G=mJ6Lh)fQ^<B\U']6nMSQFOZ7Dg$6?+*l;H8\%uC==GgqBT-d
%U7`s3m4<g`$sB='QDui&$SE#53qFB#6RY1.nX`]IQ;b<&#bp7AFfnIOjZK4kF?,BF;P*GU)GI#%[!-7BaHg-QEh(nq;YU)?m6IT'
%-d)/%iiEq<HMdSg=sG?Wh!27I9dmg<SMLNC7qbMlMHec>)31sB.[qfd2#"GQ'P$$d<-Pk"WnJI&T.@BZ(9%>6(=4hG%(a.hVYMbp
%]-4RT0*lZe?$8!j&s:RX8?^.jKGgI)#-Hjf,/_R1oi'cmJG(jg<>'nm/g\S5(PgK`)g_a[KEpK9Q0mCd?=4S??0`9XZ*Mh9b39r\
%2H@p<\\VKj?U^,c7N/?-$cUibbsmgH;Wb;A@Eh-5gnNTb:g(XgoYZFo9-_np7utgi!]!Z_'*gIM*mpT-$FeQ'=oD)%T@$TSs.965
%`RK:;d*QEZb$$N,MZ/Qh&tTgbnn>beBAcF*:!k@BeU9o2!Og!S'SF:M_L5.@:?lc9##kSl@-ZX:^&.Dp]H8Ls9(]SA<%(c,:>4>P
%WR7EQniD??8jiMEZUr%[i1"un$6Ap^q]RjI0?8g0KV&cXd1Kdb^XN^2liK\q.0`Dk9#0^Ii1$jW2ArA'")GDTZ"koeXoDVADGB>8
%X8i(81(k>AhCXiK`?A@8%R&K4[@B61N$kmZ$7e.=XT(5.(-&hS*^0u"m4--@1>q\*%"!@;_bSgbkdUP,=:0XZk&XEAlqB[AEVUu*
%-K&*RRZpA:<-"@4df0h4`1?,r'lBCJH9m`f[rJ$H&b+*c1!Y>KN6RMaf9osC9kSbq6(('9$nIh"f8>T=f,l_*ne>TiGjGD(bHTW3
%HOS*n]VduKSK?PK4i$m+&`XjiUWZdY5ClW!fMnL"Ys60%O0.UOGl7lR7\4(j)fP\a@C_>P(n)Hn_#IS9[#"ZKCn(fVrEn3&="/q<
%$%M1ngm9<Hm'Ms:p7m"#NNX:eO[7A9RW-b;!"!1\eW1OWl;J%-!%;D[A\`M+P$pSn)MNU[DW&7FUg8$=mBn%[RWqH0:;$9!qdiUX
%Isr3d%;ei\I6&V:FLIB[3W?1p4NF3A#!3;#4[m85kkARH"?f4Ad-7JD)Zd!#6>51(6`kk*ZUP!3^hsI8I29[ppqV>&G%TNTpCm7f
%KnF1Ml[6C\:CLSIHn.fhCf:=;oO8@+gmN7EmZ4m\NZG9Ia%6/=&#&(ZgZQkuD!mfkCoX#*cJ1ES3\0C#gT]-]/,HCB3gNMEHPW4D
%pFJGG$Ta"+43-5:'dCT\EluaV3n<S"GT*o$i>E4nB?71,#[#Uh6L.AaCAhq?2%)^<:7DdR%BH;c#2]t=C;2Fd'L+hfK.D0/--(k#
%-P(U0'oJ0a_j!T6M+*b8hGia7dYH4lFa0N4q0.s-JRltlm@pY60Ua0ba>V4,r^t<CfO,<$dRaehh^MXiG>O;<.dSfa]qMS/1Oih@
%"deNL*%or>gXg"Y;rSosQ/I1q1b`%,8@=)SgoM+Uak8<oh&AZcaj1#G6<?Xg+")&22HH5.5+Sj?N(,FAW-Eb-I4hmjRHPR"N2oIQ
%@S@fjpa,(D7*#TcZ"OX3SAE@.$&"g^!\V1Zc,)!;GWVdRTeD"(S.(b,Zj<u$`o+.8PLNLmdkHlc">@iENO];AVA*<=i-RoE6!Vjs
%l&L$V\(k1S17)ocB`Hi9:'>c30+WO:M&YAS^*d]iA7Yf5#`/9PK7o/?*esCcrdDOQWX-7_hgHGn5UVj0J)E$opJ5JqD(qZ.cTjcV
%5*6$e#qV3No,`\jc*FTR^^?1=iPMjPYN5:60(sTtA#l-BkR.T%Q&+jDWWaG(#JHTFW0rJR%^dA:EPqYWrgVa.DioN,*u)sg7eUf>
%5SMXp/28HK&+m?0Z2?Ck`YSS@UiQ$ELSPO(^?[_A5&`s[Zi;^R*=Q0]e>F"+5>*UgUiV2N-e,6I3mkq/rXIIC88`W1&d,3Xf.l1Z
%"Y'og?,j`<i.jWNo5EsjMJ+au$!G#EW94)=0=X9]Kn$t!A&0JcX0T)s/,>C"?NCc#%+(gPk.f$&!8(0^,]qekYcm?dO()DARX5/B
%q$["(#It8J%qN2U1(Jm\pa9i8Z+9XOQ1Xlo]Kp.3$diY!8i6O2rg<FsJ>!l*`V<5TF8Vo#ks*1;-jLAt0)q#32J-^QASZ6'6[sH$
%=H).1mIJ$QOW'_nnAQVR,piY+8f40T3'X56_^`Kd?od98N$go?,J)+ra0`mcNrt=.QRtd^FtnLR.i[H1*ZDF3XhcgeSkhJ0"s)IW
%1J4foG88\08d\I4*nWpGWb?$Gp#q+A&D23jNX,jt=MX$eGlNa:c$Th+#mB'B]aad511&?USJ,*sX1Dn)*N#)$m/@"j2u4HLrLAfe
%e<;l<5ZpZ#9rNOgOqZ6l'8qJ>V&TlJE?YuV*DcLWHar8k>Jg<6,G@n>\<$Ed`f,mU*Y]:4f)tAkBeL4*6`df)?odOmBanr#qt\I`
%YbEmc;68q!^:_S6mgK/8(q_ge+9H"l1X"H\pE6<MQ,pjikWcm48H[cH"4>Qld72dYO[=GLc-CdU@DQYddC7=cdVn?3F$kZmP2pR6
%?921$Igi6i3Gf0/:ft+@f<"(3eF/R%"^N)?q5jeOn;217N:XdJf*79f]qXInps^o_P;=FhRMC+>s'RJJg8lc/s#iNHc<;GVY2"YK
%:tSS1SN,+\k.Vl7pkFd+h>W/e[4Gaa\)5D%A1.<%Q9"lPdL?.W)(`#A.PA]h_Or\+g&ik<gPne"()'G&GWZJRDqKp"!)$H4hm^d*
%iJ+:4rc0^5UWA?K":h\G7@r[,%.699gtD[rEi;_4`M(7IW*fOfL)VCiB0*&gd9rE>Tol(6>V;V9HR/"Q3E$l@U%fS=XZf[#N)mq'
%CgXGq@:\?6e\X#mmlaRqRtQ>\gA<kVO4R+XTt['1(ZgZ?O?+.D&b5Zm""SshC]YU/_&[Br58.Pb#&$4+Iu/MmED;YaO[:*+J_c/A
%mK`I_#Y/juIL8`7Q<#AI.fJ;80OjXj\5l1dHgT[b0]R=a^\;c(.6m/'O4Q6;@!@I>!C$/^Wuk&r)pI@<1Tli!O9H1#$01^X$=eHC
%S88dt:_=2pFi%)j3'p)i:q3_Ml?kkD$BitXlpi]#1a:sK-F;bb[9M%4Vr=Er]\!2^ThRb#_s&G>"N*SALCS3<8^>bW2COWU*O)\g
%-br-2&tW<bQ@[!%AJTqqUY%S]K91,6*fZPiE7\[,+iXZ39?\9NCQcXENkr:acKtsq&d]]c8A=D/=JO*<TX_jh]1I248V\4'Obg&T
%G6U+s,-k9$Dir&unD#"ErK9?%K:dh6Osm&4Xt(\pG3s1P_Vr$cGKZPs;Q6lN'**;!Y*>f?D+OjKEWF,!JA@_bDtA"6<t]dO?=>g_
%I64<u696'`Wq>]l>8onI_da7AR,8b"%AS*eVT;C5_Ls\B(-NB2coFn\03F\WY(NIZ6I7cW[X\@gR4NmP8F0endN+\38UG38"BSMQ
%>[_Z:!D,SOVtc=8PGVZXC6>L"2l:/S(e6WSgPi-#-LKW"V7HqS#(N?GC&'q9HVrF+4+6.b)1_[jr,Y\GEA:l``5737((5><Q7RHt
%I>57#H.lRO6T5SZ3Y*(4*K-PGWA)b47Xi!s2OI3)SfuRCAXU4JI<r.!PN7OamTC0(&qT8FHj_-/:Tbn9Okh`tW#AYjHuY68ZfP_E
%4-RQ*]Gauhl<h_[4.^;p%43$L;CUVIr6&*pPafuQXlQJb"?<.mM<@O@h0(>$m6!&Zi3Ut%'J^iq7t_qK3s&b6T80@\^i^r@VItOq
%5K/%]hHL[=VC:fG!])32ARa6eQ-&:1I>X7>M+A47":dU9K`K_I8N\Jqdm?p>dpj*1%sRhp0_q+pKSF/;]EekS76(Q7XIW/3:@AM1
%0-(<hVrXUp0.8-I`+(;Jf'be.mON0eWZXY9MLY)h7NtWU?$S)U<D-AF$$sQ6)%%<7J6Zsc+%RQ>62OG!jN80F/5LuIVl#!mrGDnL
%OubI29ONqoA<P%j5Y=N&i:<V!ZVd=:aCUk"b@Vs^KQh?co+BgS8_t[,N.LeT'^:bak#4!_0=1ea$*pm&Q]?M/\@g/i:Juule]/?i
%Aq32n=VJ;aa8f@c8J.NPjBXA@mo*!fdIZWQ%H1k4-F(8"G!QA=.auSZ-<Lg.DHb>cKPZ$qS0VM=JHmmp>LWG$R-)cB]A)q'D1)G7
%;tJQfL>l-kIuc8qH305\X_99,`=A]>Q+XI+(3sM)3-$`7Q't>?hS<WWXu?WiKbr?-bYcdnn)2cjr<S(#r4LBUdL6BVYXi<&d.9F5
%I=bdE-,OPVp6o+l5mO2d*=W_1pHjNP#up&+Ml.L'oBtSEEWci&DR-\F(`??Cl+hNS`ds*(O!%.^KqrJ#Mp82'E=uiY[_u\M+@1j<
%=A'LMTIeY!?d)<$'`h;E,?^[A!a?9KE\[X*4'%1lB]TbWL5NYMbtDX4oZbOgK&@b\MVYm&R:13[Q?tDg1[-l%e3??0B'QIBc8)bR
%`ITc)=*msl)9717I/NVUKO5s_?Q#7Ta=9"256!E4+kP(SXi\7#JS'";r"_NjlR0&8]1?M+bq(eZo/WTBV2^@mFP%T$a1A]<fL:<i
%F)a_;C<?G6`L(dcQIqs/e1/n:h.L1D10`2oWC^.9MhqnT2WqoiV^jVMB/SCph5DdD&5961huFFY[rED',oSH1H6kX.DIM\@Mr+,8
%#pl9s\WV(UQ_GW::5<Hp&aaM@5[rFfA0AHS]B@1Ak35T9OfGi-Fg!87;A@Y<L\K_mA9HeCOD0b]B1raOfWp%E'b;%RdLlUsA:["5
%*Va:#EJet%D/e8M+>e.Lpp*hP2m-?ZK3q1p=:jroLZBIR>,Y;^A&U9rC,\<fK7kp;ho7HI0rQ]/0(RI2"hLEu+`%UL''iKeFf8V,
%;fM,k</&V$k&(G")&[a,1fM=Mh9F$:)(&kBAVis.[0n"**.Z:2Etnlg-q9CpB^SMn\]2@+-n]PX.M^pLh%ioF+P4X2HLIKpR\2^X
%9aJdV&p%-/m(;Uf8e?o.13/Ds>-Y2;M/jPi<]5(60XB=;!*0@0PXB\Q%n?'40*re#809n:YYR'5n-#?n[\N_lK3n/Zcf-np/N&1d
%#/Ui8%$)tCe(&"u5oSeQ5hKIuA,)FBPK9285?)a_X6!SO#Tmcu3`p6t00<X2aVGnea@UsKa<%Ck+dK_[8'bWS9sG;qJ:c(6)3DB/
%Z)L!,%dIA)Ua[L#N>r?7*hjWI_TbN=67&qYd>T3WV2Wchrb#'4Lo+G*l6>*lQ4<7)O9$;1U3QL>Y2_VfHTfuRT$#tgk;"&si]Y@s
%keTfaUA+)-,Zp0$JFtWM#r[jG.ik*Jj#2&tOQ<J,bKQPc<I5fcS(3al+d.bE_Su.>g7?MCNV.GTD_BN(@X>B"SG%Jm`2Bj#i?p7/
%^\P;l9k[kA\Eq#+B\fPf6'K_5*nNH,2`%<&@B6qV+as'tjP0Hm\6j&Vk\GX\p$Y<SJE;)3a+QX0X_J)&IB!JffnA,M*uJ+QME#\/
%&R/c^=cE&a.k0f9.;C)6,<,0&,2X-di[tSLmRhKECNP5n`Z)?.4$E//hYR!d>b0heT`G4=XtH*0fBB4jK7'm@0cMC`_jY"9^d_ct
%%LC_kQP1+1j"A/$ghN(&os1QQNKfD!SAU:?)#Rc^L+/ci$:q8G_1!iCk7iVM$<FD*5(8!#r?"."#&h)RRclSi_]mV5AkI,I(Z\UV
%&<>+t/T8B(63;`%[#9M:'j@qBUEb-u2E,@]p1'&mS$AoO`#9XY%J-;hj'V[#B*(siOe+F_/C=\&G)d_/1rI=US3^&oUoU[2M9U%E
%0Jd_G3^jbk3&ic^\PT0jShNK/"-GnK;V9ff\g`N1pc-@<!#UNFc.m,;PWU>Yi%=r9Nuqt#8`ZOR*:JBR.GV!M9Ws!&Z3'U#b5?X<
%#UCNqN5Y3!3$:#@h`"Lfl+X9`B&hD(#i:2^^,&T/5=V*U7nFX+'ct`V[>WaUJ*UO1#6dsI9Xdifa:Q_sMfHd8_'6Vs!6JHlN40$'
%HbVin"&E9):p\=NOBiqV*3)o@@?@KD+61dRoV)UfOk3tFi*"qmo3?q?Hci&IGg*AcmX<dt8EBmrSK7c"]A`k[iPY%5G>#H%IBnDg
%0>f!E+AY$b&HqePkdf#L_`3-A;&cbYq4`L<qFb8Z7H%i_E5Lr[*T;q5Yk+5@rY5%Za1*"K4H[*aGWT1h!)-s%f]m`Z,le"UU#Tu6
%GV(&C*tH.4BkcK\>k<2smhAT#@3\[I*:WH"V_]6%2dXDk,3^nW#.Q(<3:a"eK.uNKg:3&mM;#\nZ\N07A1@SJ1p#d&[]OM3kmM$V
%a`^")BYr\f!%YQ$>fEgc4h7NK\HZH06mt*XbU$F(O1:>Z4>`&QX$,Wo8%>bMEf%?"0[d'hW=b4A]Vl:6USHsfqA*hI7;<tA_pKkl
%s&dW`#@B,E),CaA/g7^Q'1`sn'kN("W<dp=nWpK[J<S@J%E7a4BIi9uFd'&<?C@-b>W=^?9o5P=,46bEoJl;Ye$ls4U2KlqZu]oY
%+hoAHZlYeWE,hB<N_>aER7XloN3TicA05L?;ea@OY$d8\BJCmC:>HJ!5N\PW?)!k2be#lG&7CAq["-)g5#ST%l1^ZX"Dpsf%GtI,
%B6#:sAJVCD)I9</`3G)s9?nT`&Y%8Z*ebncDb>2uoT_gb4I?j>1R*ske.5JC+eMm@M/\VQM;1S)a=M)%Tf6dc52R%#e5L1L2LadZ
%r3:O"gS#T6VLdZn@XMu]Jl5NnP@o`$D,?tNDHuc%I'WsS<*[]u4$cd.Y-;4PZWI?BSrtC_8K=G$ai]nSQW,Gf1QjW?KD\=f]IkqX
%pg_3bU]Ni;\n0+R9@5gaR1:%'HcjS__GhL/='+fbXP?FD)1`7`L%='7GY?ZD-_FfJ:M@icIf`VrBW3/iVWfMC1B>?92MITpJJ@Sc
%M:u8m`&-u2;&/e$-k5,K_aP(RHgtG:3YB+YjCB\e(isMP/--#cAWqd2FLHLB3R]G^"#dtg[V=W"!%-,9_Q4"uX?rQ-,%NtdQ9`<D
%@E>Y5YY58@p_`t#M4eUjb*[38DljBnO*F+#ims#51\aT&;WAG]-fBX4B7dei3P_.#i8_Y.dC<W;ZtNHCLNubdl'<<>Rc/-J0Q;qC
%o#Iq6`q;Y*fqBN!VPtgHJ+fQnHqUGE(5pc:fZFnNGfc4oTNlma5F-+>fYbof"X1&<dKWf89dpf&X&9Th=J]Oc.CqFn_XI-F1Ar(=
%+=Nmg7[MLrD4\u.ELGbn7spGMU6.\De:n8)4U*=u>->O9/tA=ON[^E;1ODOPjW#%()8)Uq(mnL4.a'H1jm4tcI4s&PQ6H">I:!.L
%fiSfLr2in4Jp)^!klqS1acrc/l@EeDTd%N0>Tak0fap,C6%=b&68JVSc9WBK[N'*&#OaWNV;hAUXLP>6B"4"o75AoI/jKXPEd!m!
%b0Vs31>O5?A?KGc0![m&"n*S:5Y.B!kTUCrae&NgUJPQd;(TX9=(p>MZ[YM^8sbA@!ipmcqI@X0nb)q7A#'>6#`<FBH"r#jksBn,
%FP&D(\Ho?U@+S?-e6iTD$_a3L&q.&EMqkiEgXeOHbp&3'`g7>PZCWo?oFC#%>%$Psgq't0\k"iDnrX/qDN[FMD6n?L]X//2Ko<`G
%%G["U8$XAY!][@Dmj4=Hb>ff3QYm^5(`t1Jo14R":;?KV2!,<YC'08X<5$B(Gu(]`kqHdtK+SkllrVZ0oA\"8b9gUA6[N<`Am*>m
%.=.jKj[J.hC,X<mZH@3>:RQfseLHJuB0Gt4grr`Mc*gOC%l:/)%MWnC*!7=Sh7Mkp[[jX1[t4<J>9Z(Im8TB_brpaHn:p"AVuD,R
%9Li#FiYBaE5a[S1N(pkjCt*8s8]8K6.UbV9%PH4EW<FlAV6X#>0p%PLH!Qk2U.I":0m]h9%^,lE^=>8<VEe`]+C3[9ThSYm35h$r
%ljLZ>B8M9Q]!G/Fc'lW<FWc!s!UqiVa`=3!:2!s@'AJ.UM9<ISUS:GB8uZfKO4S=WGUSV.FS`Wm'X?;`@4?9K@a=UX^1(;6^*.!F
%U#"1NI.AFZopj7"^N;Cd/!V;h^?TJ0,3C6-+`'^$ZKi$hUG[A[Y*P"Y(LXNcJs<84mbmG'\n42kcgnZIG*-gW!<:g?2T!XR;pkdm
%82LdO0=sfX2>/lTA-U\sd8]sa*"hR3gE=UT]CC>dgQi`IM^?)3d#;\C*[6[!,u];KUn8OuF\1gZ.Lua-[+ZQk'Ym;$+7Qglp_lj<
%RjQPf%pRK.1JDF#KXOl4M!c%89EZp/nH)L+fOBXZU(^('P^\N&508pWn[AM1)$:PZLdXeCNS/ks6KF:<1"36'hB4*SrP8*Q+S@S.
%#oXd\JFN3sQH\.@lQ[jc,(o$5#doPo"6:c(%C:(Ke!goM('6>NX?hM"64j('RY4pC\r]fo<\&dGeW,W^o:\LU*A4;3%12):m4OSo
%m^p3']Ac2&A5c[Oo`dsj<=MYZ;3J"VP6p.n)bnq`6>=)."n#[@`9c/;Ur\<LP7,pI8_P%YN"OtsVNeJe#i3A-@>a4f+P$6Z8R!Tg
%lVc$Ta^GOe1emYl76D#U^4_H81hg\_L0e2l1(q_&@P:rLa%Ul1(nEH$T.7`N\r'L$TutR\gAFAdBp#R?/ooQ_"LNMD2!a,lFmZeH
%!*t=,I<.+l!u'['2H:.+D"K'KVckj\\QW]d5I=P<H`(1tm,C=aGZc'"8p!+"nE>"m,P[Z`2.PRK!7Da^MkPYAQu/K7!u[Yh(qtfZ
%W_lT*Y#6BB]"*D;Jt9HL%$PP]/IOL9B'`Dh$%KkD89qu@C.oO\1PZEt,,]%>AKa&9/nZ$rmQ/TFNA-RWd=Bq%D@U#nRT9$pKM&LR
%RE,G5`E\*n$t'tf0gp"F0XW618#slQZF7[EMXXeE^cY<:$K$DABp,ZaV5*F>ZA:&!#2C>O0LtgY7XE^36;Pr#KPVQZ%i'P<BF^^=
%TQ6Hh0h<R<FFUDAW"t_>H`Zg2_!%%,V88fp-p4%O&I?1?BN)URCQR-M=YcqE@?cStbK(9dXJ#sc(#?nkpI%DsF^+X?l'e+WYm]^i
%>lD@14W[,Vk^9J[C.4s3#X34nVd]nc;=V="P.b]r;nHSGq_(,#1#!@IL9sUNRJ2W'G$X/M^m0ia[IKKH>18HpftQ62hd'LZ$>4tN
%25CT#g2GSC[#\Kd_M0'P.UV)@kaKO3aAkij6sV)BNi\3r%<F43ni#)_Ub8mX5>Z]d*C6ikZCGT!jtQbI_WsA6s)u(Xb"?jN?#"[/
%WL$L7T,6b+:>>`oMj<q*3,L<t<uAbf9P0mRln;D=nR6RLnsPD3f3B8r8nVPY&4/2402?ik?0[ji\2M3O%NPe:,o=+Ho[Ed\k903_
%^"Gb?<qe>G!DS)C4^1d?(Nc,,<Ln%(#m(TfOeiU;\X`EXkt<sdl2>,^8PZ3&"+0QeG+Wk8V@)crO(k$GnKN,QZqo(S[kRNbBC^sF
%,bRp+(hk)tB7Xfn_[*BICCb+H(7Wu04+Us5='fR*6n:5[,1\l_<":_jlHK+uM8q2)rm_M?Mo$oZ%/I!&HTUEoklB'&`4H*[""i7g
%`&8BY0=fs\s%FoBR,Q8;32MKh=%.?+/<$lFDt[[7&nip6qSM)r][McF3Oepf^p-)74$F-<<d6G$Ja*Jr%1J9=DRu6IT"AC1T](_&
%5Hp7NJ[[Q02rgWb')fsXVc/uj#oL*B+Q=^faD]\lN]-!M"bkg;$E6?h@3%ooi/bmbGoWrTZ?`Cr,8@VYQJ<.7%V5VJDhN(6]2V[j
%"!9XgQR^32(O+>7bXW'^/dsbGOqdTb!X/c[.9*dl[g[_\^G<"bG0+`@X=cH56H73bS:?I<[EQ1`>D=ZlbfT5\7SnCE/1A`B\_eYn
%&X&DWi>uc*:&nB(UIjB44etibUkaTo4tc=<!`kYW:4m;MMEp;q=p/V!hj-"_Z>^S$EIsn1!_cLtHgnC-*]h.^krk-JZQ'a`"W)cI
%=M(U/hOt8SPn&pG#d+mZ^0mS#h&MR@U;hO6*AtBaQqCg;j<#<R*OdA_4`$%PqApu[_%RHNk#C1=JGir%c38^Sb/`R)L(+rg(;3UZ
%pI7][h2>ZoWRFUo0)%Y<ELWR93EU3oEYYp7S<pbDFF#?$MnF-5ca76ClZq/lgMNN;S\$n&:"]Q8=dQU2HDX[k5FM5C:\Wu7N7),+
%pMrVK(**M]q>h+u<YR6RRCtW3=CDb%HIG6jfJEFp+s\oA08!K8lT_C352d&jmW+M7,N]WVguFfF8JnM]gPJREdNta6WY\S_HE:)W
%QGF3\<0Sc;THZbo1kLk$<"sL+Jn*]&O'nh0,c&l$I1);ORPZ/N+lj'f_QqtHM+HdF[E@K,"<(>.]f_`,XW,^#+\&6G4?dLmDI&8*
%Pt@J`%OMY6-.2GCCUSuY)C-4$3)*,"moq%fY;Gl`ic5,F@ll)pX'T&u.(+eEXGTfsPagkDa.uCLPY>&U6;4NG35gmEMY8YM_OQqQ
%<9C/(dS4bYRESuB(GGaC+r_qjaH[To2/SqhS,c[54i8C1<6a,c]t7`u,c%jm5fjA$KeN>)9iPjnr[aM4[s0=SF!4G;at_OG.74l[
%[m;BFV5pQJ*p^^SaHi,SZ6i!QAk-mV-/0q!1(J@6.m,K$Ki#:Fh80s[(YBUg78O]BHgDe*p#M:'\_ejAO5.R[l-THd@[A)%$:B(m
%ME!JMXCTE/X3`p(:,?J3Ye>!h^Q`@_[$%dVdPB9f)o#W;,<5(qg`0I(s.B#Afj2BZ!$jJi4GS]OcsAO]4)Zn"^2FmW]?WBd=E$Oh
%W'OrRio-(a<Aub2/*jGIfnkI6I*#s4XX2HFWcU&3X6uj67Vq+M"\t-jdiQKHf^qq`6AE+Z?F0KJ`l3U`pF83.M[lS<SUL),'R),D
%^1,aQq+6Wf#R"D3Y\_Q-@H0]>2^"CbUZC"/kJX5E"G2LV$"W^:)`mV*;bl8\h,9h"O$K/a)-f!85J?hohpPY_1ZebDqm*`!>ac$H
%Xd[mEE'?RV8b>ap0MjA^k"j5d3;="CEo5V['h7Xf#YS,%&*CKfpb_ViVJEciPs(dPd7kA(RX*Fj:kMZ=A%md=8L5+<o(jp.BkMGl
%#!;%AT-@^>,6:fS>V:38J0DX/Ba%RTaJ6^ZoP#TT5VhOf3nq+DS/@t02\Jf/=]LAPU?a%XjDKG>c%:`o?roqFfJ&V]"Oam2G(p_8
%=oC`16"dR'bhA-JDVl_-;gE7A7#>=nmmN-\;s?U]CV5RU@Wa0O83\Vb,Hf1X[_fH#HNLfebGI0l`U4nu'WFMV=kUBLJm]8J?P;Du
%TVl@!6=+`U1^1("+1!$%l)8bi)UaT"#`WREI5)K.T^mR$3kB*sOstB&2aqiW.OfoYJB2bXZR(j4U759sL*blD1;)B7'#BL'1\Voq
%mI=EoM%OT:Wou=G*\6_A,!t*E\*:2RFNks0on&I`&FK3*:(N(MW#Y&*iC2SKR6aZ*SuV"-RP87jVmDK"fBol9/lQ44H7"`=.!Z>U
%<T*UMn1V)=/SZp-/^V5H&Thnq/Dg'Y\%hS,WMH0<(k+p[<k>^oN#,Kf=1f5,Ln^Pb'i3b@Z<6Y^i6(a<H@p-I"qDZL9:?:3TuBg4
%.7iPC-bLc4JSZ4F"'YO7"O#@OF]Z$JhMXLYl@hD7=U%];*`sG!G\1%$7M3GK'BF=Lr2/IsiK)PP13eGT72dT^ZInZPm18fh:%R/!
%<DC%W^!r+lRPYbQWja13-\TY@orP/k61iSX,Y5H!CKDBXp?_'kO]E4[IV^O8!e^9SX^G[Xje]'o,^/FKqsQu-!7Lmdm*K%#Wo,(`
%)/sI9^D3Wa'T47*V;uj*bjc55X\>d20FB_&^lJYYjErBWB.LrVfDs9I.3(L$De5NDFc-MYrBeH[GjQ<QC<W#nJXesfQ[ZW7l#ji1
%p<kT@KrQg)_Y:W6I[7d^+R>k2mq"NfO?%:%UIp+69ThkD37D/kd=Jjg-rN5onBn(T?N9h#k4r<epTm@qONT'?`F=u'OVq4FaS;G-
%;V,-@^5sKs^\3T&i(LhPUq=;3Mod@;CVS`Ko^@LlSCdutY:ca=8$NAL.5+t7$B(.g$i!o&YHM0W+X]$n5qO_LJFK*acB50MA+h";
%^&A.sq)tQ-VD;dVZtY\S;N$b9`t4X&E*69S:`ZpFQ+!Y$L?;Y7n%JMQ)ca]d%UKk3GioKd/40%E"+P.aDid:+A/;++'O$o<%6b&n
%'B;kJ+C0rn#c,f?5;7H[JQW`/Vku^UDoR,?XD>oC8c9K.Kp"1&-\Q2FaV&HhP&Nqs&8"_,fl582T(s1XoPAH=Btkkuq5Hr-CK"A&
%C<7Z3^`Hf-=1gK`kEC"OTN>XsSj^;:9>D7gWmjAV9h5oN5KK7KoL4Ru^mE[ADbKFePI[>.jWhD$#B"Ir/5(!N'HA62_7(&73=<Vj
%Z*D8kI7C>l+%s#lNG1=O]'W8==6Cu;=bjJ.9bP\L"3$gB-s9:ni?R&aOY2r;DaC4$s,"`.+PT7PpeN`Tm$-uW[3#?q*/>?P1P#TD
%?V0qrAPWuXoJpkP7f+RH/WaEu1&Z"=O)LlAP'#ak8FPr@OT:#p6i"OEV,Q6*][h"4P;84VdoMbnmh9:d#I,&D[<RgAQHbh7:?2&)
%ot8\E-OQucpkM0:+2RRJruQ4aWjjSmJb-7$O!:64S\;_\Z%&FEJ7j#]\A+=_nu]k9$p>*hIn!370@`?KI>qn.*./5mPAB;R_4T+R
%^e8fKWJ:Ce$!>;jk8t$R\nMJ"_Y]tQ;o#_#W.9uJi4237qHR5:4fe/r.!"Qu1JS5g4gd`N[-TSpC@a!4P_1dd9SUbqlI'.9b!rpf
%O<f.kBD7"P^ZA]$^s_XST8p>M=G1Y,I00.oB\<ub!;E,<IaN_5s+a=t0lPA?98^he$l!("O/7m(&THt20j9V:-u[ptn(t[D67u%C
%!=ApMd+IE0^&d*^!/1G7)rX$.rVD(OT8<Xb;#e8^U$2i%k.pj.qYh`u+JOO"QPgc,g@6(EmY6@%dKUF.'>%kO=)5]1C\M,t(5]tj
%7kSu))*7O;7RY2lL3MU35k!]<rbF$5?h>eob`gBj1B?k9Q@t$>p^K"A4UHo`\\-"K:5s"cCO!t@0OL4G1=r:,OYGAi,!H-'g12SR
%?ijLUg=Bg_,H.LZ,rP=;$pnd9:;Q=ZL:k_9[R)5o3[ho9*4!@5Bp/e`er2"6"CuW."SilI'AnEI\(Dr9HUE8$N<tr(n/*$WOs(*<
%!ti?d<n%3,)T:tgf.8h&GV1;PL$#'m(!I;hKrFIW5VUq[0n5./&2/D`klHQ.O(9qge@RJhUJZn5TB#=>r<A7HKue=_ZXoA5.$+lF
%SSEV0bsCKCC=-.>:UldH!6E>S)=ku>>ar7'%:fMK8iDd&?iYcPB2p?lPlpk9k5n$5lk;9TYtl^n`7WJHV_cGCf>&\2a"h-m19eZX
%9V5%-)eO%I3r(:1^Sg::.MP,'7e;cl'E^a!!0&ZPKqR8"*(ED_at^YE!QV)e=7[C3]d_ac\>8%Hhg@&?Np^cR^H^'MoCJ+8Tg2#l
%[cf'UbVk8G8)G")=o#iOkr(>7dL,;Kgn,K\A%C6gR7K\IK*s-rOCZh^,egq'#YfVH(UGN-IuU:.S<rtpQ+K0fHKLq+&O*:8d+r?Z
%)`Ri`]kf<^(n(S[-+);](1q/.80iZ1]g_"KK\o_hRJS]U8=FrsC4)C9gda@>AJ-,V5iPju_J>S9%%;hpYemhPBSKtLR;TVj?UN*)
%&7(Tt7#0W[mIsF:glj(!S3:$_bB<"V?&Dsojk@YmSi$:GY#Q?$r'S2Hn$lVfk(:nU0S!$@!=FZ9O:#GbIO9J=pV;Hg0F&8r_3SaM
%6T=BWZm""/%.L+d"KO@7*["Xd)cC%WN$5s)=1hjW&<gjDr\%Nr$]mQAm9h6`3(02VXgq(rTBMBW1a#n-n,XMHSAID37GaN<L1HPR
%JtICH_P/c5lc\cVJRtR3C_]o,C"Xt33S?p$e'b[U0Rsf>?O"4hQlSlN%HN*YO3=&Ui:JFa!u$L"W?bt!++,m_lDsk!cJ=[+q=3!a
%5HJo#b2FAP`=,O2\Lu/sd)t)ZJsN8bRkRg:%'g!2'EZ)_%Hj0lH(0`srMPGIP7^Pcmm2]rGPWHpkmS87B4-VDMlBHU!X83;1`]T@
%VMrm1mS)a9>>(6\CEF'AQ;e.=.P^!`^qHQ[?`?%[Fh1r1=),/r<p`E:KI-cW7(CYh5*d]6OUrXlZ^&[TG'&FH*!01kjthWX1/kJ8
%-:3J<8Xo]Z0A;HN4>QU"SJrnkZT&?CO^DtLFT4F`+U!^1Oc0bDg3`_Jhi@qi1$!rs0rDME'O0.!."mIj?)PkA;$IrAI3Po&r+]jU
%[61bc_#G&i<E"FD!SSBh;.IC?[@BMrcD:0M-c0)p1DKBB+O^^M;)j%$SjT3:HQ(Q*?^nr7"C[m,Ccdpf@M&jOH.h?5OrW=Meg2pQ
%*9SVf6V/17Lg9]*_Y!Q@VDN^n[1i3cMBk04,Jb`c?ue+l.R]8T7hW9DpccVfJIf`[&hP*CD7a1U*]=PeTRfI8=r=Q$ID('5Za_Hm
%0RsP)(<5D8mZk^A(_6O-5cE9L>nUKD#bKZJ8"@:YJ&k\7DN97`X29\g.hb7cM.M!i[lA";^B7&;.G2ICNt_USnsdnreLo`K-c9il
%']n*lD.?T3#)<&qae"Dk#s)5"DQ(&EA))jq94M'FM4g/.1Us*>fRrh&pDQ@c]VuQ".&eTD70\$\A)k<FA+B/!Hu.HnR#u3U(O53B
%AP/t<Ep=*3cndaeU['q04I+L?&KBJC^?FLXU`oZqhq7`Y!JF+brOElk<L:)qaq%*@e#)?O\kKh^6!Y_o'osMSI7AKS%2G^B7!4#u
%Oiq<L+/O4?j1UR=bRs7)X\_49Nt!I%7i3M+()mcn/[Uk[DY),@mJ@OA;\A(H&A%\+J[kc)M)K4AJIaR;>uK$.EtgTY`Y)%cs2OEe
%-^Z4KLo56+3&C+BFCqZrC02:[!rVoYR)kiKVC"@Q.GR1VLj6ZZ3AH6+F!(q>mZbd0YsEb0qUt'oA]dTp:9k2PTOn#ZkkY?Zf%D9.
%;%6PO3F/)`oOH/>U>id@'p4-cFs>Zc2`6I(Q]=BV4c@SgVoD_R/[$>OQJV<i=HR'F)5j?&F6L1>!O9dYT#g1DD*#p"^Ibao3n;*U
%_T0R4r.rn+Q^LBN+;88_OoHZ7FnjL`XGT)qgu7$N6r;KW`W"H9ZHq`GeFpECe83U/?uL_6,[COYN\`J0Vq,_%<:bl,<uu_nI_Xl'
%$UkZlp@MUJ3[KmIXsL)UnEIGNEAQ-J@$oFfoYJ<>Mclp*)r^2Fmu-+>J_CKVj1am,iK:*-1nBXkN/VPsF5r,PKHRAM\7tJVa:L:X
%Hh')D&r*'d9>c;G(G3^e-A2/M.2M+QJM=@37$(?phkZ/B>;&mSOkP_uES[K08Yh5p\;DJ(Z!<$ZVMpA"Ynq('"6QE+ah:mTo<e.G
%Ua]d1&R"cj)W*3C,W;.T+=XO/4pU<V8Z3U5M,S0-5scV3\H.IO_AS9Z4bJDQ_HPtB60]85C)A4p9U&s4$kdH8,E>V:TA:A0L*%j.
%i/EdBmSXlHoUMZ2lWCe/O^1PMA(5HrH5WF]Eh+)'Lp86V%M<19($ZQhM!M[n+[SS5lZ%_GELl:9&2iV9I?"k:hdMF&6\MD[>N,oU
%"A0*G_fph@0bDE^GD<&J`hRppO2]ijFVu3l@t_Y:Q!X_%b/54>#kS<M`A,4is#Q(8P!"C@\dqcm1Vs]c\Dq.R(o<a0L'X^CI4U$p
%)WK*S6\GRsXhG2Uh!2'YLBpt]g:lF!inK[-GNQht:[l/3CC00kTk8pA&Y)rm_ptUWqF<6Pr]_]cPH&Fcs!Z:iJ@)R!?P:Y3*pOh5
%IpHN$qS0g=M.qI(d`uV-#bKZ*gM-%fZ4UnRaEo%6E]=!Q"6r"=]ViY#\DrU-cr1QX_)8bg<e+G:.;UPG0q5<OWXN4iT\:gR3!I>S
%-I'`pjJUli1s0`2Z`hR!lPdp0RS(`D:^8uV-Nt*#+1%uqn\Y/'KeP<>KfZ.X0/).:e5'<,DB<k\M0[[`nD:I3eehL#/*N/rM#07]
%[ph,*kb*c`;53HKi0Q#KcrI-W?Q9dG?fFjL62Qc%]l>O\Or7W32$X#Z2&H4a_Lp*"+@:&QZ?k2mK3B4D?;^"s,l+#Q?%*`^hsDCm
%s+'0Pl"gY(EKn-`kq1"1YNIl3WbpbGJ"kOsYCf<*ja7!RigZkSjBY!8fM%'Le\sBfO6o-'_@C+a5)7?dp`-TgQ2Ou`LYkS@L29[F
%1gYoq%cY(#H3s3o0?#RtpH:H%+C<EN*KUm)mV$Ue/eZu:a.>Gl0l`Z@dXX+r5'U3M;(1it<q!NS2:S)io)s8=Frdj*0-g'tMbGr*
%-g_S-[Al?>0NPepbYYX>pEaCEU$r:j]%g+0F:1&?W_-rV4rb9+8<Y^V5oH['YDH0a68%[6=8=nZg!FqVp]fPJ:/Zi<p*>i.XMU+U
%'Q`aUkcOi0JDRnD_&7m7&I`tV\5oEUm=sBdgg2^qi_"BD4"C$*Ws_2!'do/1^ZN?uI`_(%U.KA9V$4ePjZM8\?i[h$d/g4VJ4n_$
%!gL-L5`PBVTO2iZ)SI4T4kmpZ8C`0=*#J?s5u_R)ouR&0J"J,5U_@p(8u"B7M\BiOllu7G[6pKr\bBI7I^)SV4,;7OJ*H5/BZTQ?
%rMVW]18=d@O?oS\:DNWunF]WQOQ'q<#\EWc@VH&R?giQOKg/@TG@bOE@YZ*bX2T'h&9O0Y,IgB._gEU(*m_iZW>*/Hm<='+$otqE
%S4\,2c\(DMn)E?ffMh$O`n47BH&;A>cJGP&%Hd0-HU*'e;;YgbkZ]U6FXd15WK^p.G\jVk]".>nI,J6QS+/N"%M[7TLn5q7F<@cc
%P'mm/`tACD=hRF'!W@;:/q=emRacEk-0=-4a=k.c8'6\8&_RX47CIhd)/K!/87Hp^+!TJ=#j9&&WV0I5TQ$2\co![`c:n$M\C^]\
%IBd*fSr,%ee:MU3+)95g*tKP*cW.Y.m3$E57s%^O0+KD3h^Yf<gCj+s)R?t\@,XKQC?:RMS`g'c?7:aZkjjDdb)bamq$5\JFa*R2
%kWLPZQ+mQC5BmsHQPPpnYPYfjD9Etd[T&M:0WLT-j8hQ8N"ZZc;b7!W7*T]H>RX?`OB'bSc8`mZ^u4SuhkgpP*jdBu@P)#6)kBOT
%j-+>Ti)<DcHZgE^H3Oh;g>WC!p"aFSJ(.omhgTp5_6.5lhN[J)j6,Gp1'?9lf4C[#R8IumJ%SLg1=P0\*Ci[3o*^?SNSti<R+?SF
%,-9Dji@O-&qZ+@;.X7QEp<?tIFDrDCf7XH!>`'Bsg?u,c<$[F!g.+;OT?+SF@S+27bVBWE-#]E'':Zcr;uE),T<5E'K<*]"h>m\M
%.?H-g8(Zgb6.gRcI]2D'*&gU>6$=!Rj>7'%d^aP+0AZSPQ1dKW,B&i"[lFl<as,!\?iiR<E)/6&kTaOH;-:I9V8M(OK2,k9(e%l2
%;MXc,,cSoG\`.q$?.a^;XT>i\mD=#WhKp1=J'o=h0q$_qG()o!-)PA9M$P\+ekKR"SeeR"%uUoOkg?,W1?le[-k*OrR$FaN6D,on
%-Q*q49/WV?7XW&RFsM?%>0(o@@^R.,YaP'u>o^NsHMr0YluA(ZA0FPlY?0(#r-b5WZ0S]`-`1d"k5Nt6f-o*n7Xh2;"$cLpV[77g
%m=;2AH2Cd+ic[u.hXAM*ni$J0d0cbP`"J!qGp$eH,IYUc?hG[M,sE-b_+T+s)N>[_rRG1;CK9oO6q[pG:B\K\@7f"eq[^'UL#Sa3
%M&VX:M3M3O5aTe&7`R7S$ckp8?s/o[6fHn5&&%aeh(6.pP:nfWmfO!mGR'ouU]ViRAeqB7`Jj'1m`D9eFm(oe)E)?1"r87d7tq1]
%fQSV\HJIQlWiNf+`dgs?OK(U3cs[+]E'a$QcrN$nBQ3T6Msm)b5)XDOP:j18qCi/JWeh7DbLTC5d7&)(d%:OM-eWBY#g&b1.u%;8
%-%PKVDp'+u.h7,\J-12Oi#'PZ(tG@e%LE(;g`a@YZ>Y?,cWdZ*Dk/4,b>Mas-XSX/N:ZTAj-+;<?:07E-(N2>mQ("doTFE57,Om)
%:Y=UaW8_*W*YEI[<9\H,'G/Rd5N))T&S+-fR-LO;4CEfrebY/7h<4?:=h@Erpa.E,(gDK]CD*j<@2k&GDK%Q%PdT9Gg.tY(3_nS=
%WmjqEbo>IZUXs;DU=oluTB;pKE:Ft<bDg'Vo-)<2FW0i7IsB7"((/eeXE0$+BrA&grmuU&s!Lsu?RNX"b14N4+pB7P]?`/9."%&*
%qI^2Tq6ph+L.QpeLAXX+_0rnbiW9hZ%B)3>'Xt^Ef&,A(aE'dRCe:)Tdg.@Da`&MOY-f(qf&^Po\!RsG&o4IOm%2-%r$Mft>FXu$
%h9/u)\(^H'H(:6me2?)Xf8Vs(id9/+D=f&TjI,QA)%!D'[L`S)53@W^j3Xtt&mE$0K=&&,dLK`Og3IX&$^H/_M4[RE2EHk(ebg'o
%EiE/)np-30d%;\S71T7e/E&C28pKE>`DA@!/045kY1dEdlZ3:&kCFhb9pas*PjfP"-(M&^n/A5$#M-p@]q1b'k`+Z%\F?XMW-7=-
%Leqi%F5Ju]i3f]m]f=@d/`l0gH4B]c*TBNMiU\2Ji$]H/iW9hZI@t=_-n]W%V8'd2iGAMr6@ZGV\u4YMLAjoc]!h,1d:W:r#V[\]
%]36TmIN>3%#!);qM#H8rh_+<tm<TkQ)An>>h0A2QgH^:k0<`tFiFqEsLh7eK5+t*Af,6m3]2[fU?u^gM+kGC+2,n8bIdluJ(Di`@
%mfQPl6ZJe=0E&;0\?GkklE<ijOpCce1a^:MqMI)t!UV<S:nPq)31o`7hQSi0RRf"p*e_!qHRt-V`HibD%6VU`DS5Vn#6JKImW0&h
%99sRdIMVm457\=_iKC0!]`/j4"e[c8qoZl4%f8kaf^H1kV(Kc7Y9)'YIR&=O6?,2XU#%Ki3*CCg4:a2rjma&f'^LbBDP.d^](+5+
%hq*F8447j=?HT0qHbhq>]e_dtb;3XSEPBhRHGbbb>(.OJrB%tekgUR!h*<VGFQ944DZ^SqUsnnJPY_>QJq$%4B*bGS+e^mQBL9C@
%7li4d&+9FfiXQ[gNTb8Q(Dj[Qdbc9u*dIdf9?j*oh(l^-8H3'^&VF?Li-G2UHJX_9[P.2&;U`6/__,%%8cHENT*G^gEc&6Jlk2LW
%T`fae3)![?U1/g56,2"6i1o6/rb(l23r&3OoNGOU&,(=ODkiAfG6snhf*X)dktrI1VoDs82YniShZ&8B</"h:r8l8IE6lYd[Bbe3
%Jkl]FdFS_>q40/Rim_DJP=L<3I2'@fpl)pfLu_+7^K-0gZambM\C!go]7eMoCP<56c#4=@'A]Uj'lNY@oIf)YqH>%%b%c:*&BaQK
%?7XgpUZc"#BCrSuVHU1,'f,A^I][RaO.ph)T@%;*9OnSGO*DQ#5_gcT^JC(+4a*f^BEP(7NUgqRJUF=IiO>sr"8&]9W\h1U'=E7h
%DjO"A]m-4'W?afHNKr_+[J]2&AI>27$/EX&LGq]D\&;?d\%j):hEQA]0jq$>I13m"D"%Bh?HP*3#8_RNX$28XM75B$a.Sc-2"Y>r
%pZlH3FsR`0CL2a8_MoeR%O7spqdUI7FIsW7B[Fpf)Yu4Prd#CeYN,_h2;]Lrn`P%F@8uSH_oqi&g#MS=kL"0kej`#uK59CdD"kPg
%Ceb-GZLjXfK5Y6Q0*BDmTeYTCU7J'D33WlU#M.;c_!]gl&9oK3LopLP0ReIKhYiUp*g'`+@n#l&`6;pMbMR49)cZo'T1V90ZD^7P
%%WoLj!CbADL:K\1pBC]Q^pkV;lNg+Z`ol\rWZEjrQUQ8tW8[jFh'\k(pN`Fc*)7N_JV9nRc"Asrloh7b^2J^fZG#XJm(QiI1i,8d
%Zn:69Yr@^!P-F>,2MZ/4FNn/&rV%c_d,&mH)KqYVWX[q:iO_Qm9AFW4Zf@Wu]!o/M4U-7?$cq1EhT##,Y+GS=6FIj"CA4%QXUDbc
%kssBCG'Eo01F0U-#@s;u^qs^T5d_,m$@K/cm>-,6DK4HH:<3''[<oZtZ[hD%k%3>.R%-bXgVhts(j6VW</.9iBCtOHDl"NNl>"K[
%'<p8;YMGo9EG&A^ooIGiR],`J]eqpF]eopLC^gnSM`4UE$Tp9.lj]ZEB60G2.@J&:'FChP&_c(T+l==b)YV_eC-1=PA+,IsA,-!\
%\@*9f$uX]V6GIs/#c$E!`rk$77mOu3nNaL`6RBJ?6YjQa&R$6aNmRO6nXL3F]2OCVjq5tHHTY0[)c%c,#CRQ3[fNq>iAnV\%llfI
%:#l`/hF&EHD'AugS&b]^&e?kp4qLm1G*1/8Y`5/jT1ru0cIo0@Zo=.uqG-V"Cl^\YpdY*@IQ"@M;:\cofn60SJY2h^!Q,ZehZ&Nu
%p)s,:MjF_c@O/g`aBHA*'N+"S<X9;=`1XDp&/&8nG3ac)VB:`g'M%:@jc?lc%H3eC\.$YmLc`@>_<#53-r_,3h7?nGl,-_<O/cQ9
%=()LKnL-,8^Q3W)G-tFFJ3n;YlKpdSH0;ig0EO5[EXpD<4d'IjG!Q-92$VR"[L51aJ*H+aWsKE)heJC*7M3k'M7N6\_M]h#4:fR-
%OIbDSCm*o)h;Dj)>u+=/_DSuRKdn+;SeOK3e6/@Jaf\]4E=k7^7b!kCMR+qJpGDY$`d]2T8Iga(G-aRJB.3U4RX6\gk4@D"*/G&)
%ALrmR+jB*%+<g*or/WDsk:,oBH/D_'K]4*oe=%-[ZfZc$kKu(1o(nfoKU+7J<j=]%,-2^dV*gEKRL.j=h'PI-os26=#AqX_nF"`?
%\tl.b]2j^V/u%c\IltbI>99VX-rq9`Dr31lqs`1eQZ\u,WnD&=,dt^#JBpBD'MrmlM5uTY*@-"5\rbUYqe-g-pfYU<-k:VKSLr[j
%3lEXjop3XN<Cu4<E<hBo#1OT:MVHs3mr);LYuU;+:;s,#&ODbYkY^0,AA7"&4\"J)k)UI=],TI1>@io@NBs"an6cpqHn=\NEATSb
%)gI7ph0ADWa(7SUOA#5$H\sg#k2Be+b4U:(OF'$#8%D4P3R<@I)!7)^S?X%0NN;Y5\6%K8m4?1XD*W=Bp@:>ZGjF`]NtAURPbk^.
%Dnm;TgGGlgO>nCM6g<qYq`,QOi$T4rb@"a`/*pgdqMf.>7e`mh9+/h?21X8h:tFmK>A$/A,H,?7dj+ZH]YUpU@sAdq+!VIiih.=Q
%(\9/A7coeFRgf.QLY##iWO*$@80!Ep>2s'p]*iO_4\LHW"ma=j,cPjql00CEQ%R:*bD8#1YGC]=_Cu+7iMP;B6>;j%`R7hdeY-=V
%Fc@r:iB]lC>Vd-3TMTPl]n*(@n&8LD?PeN/d'scD*&tp)a8AU`&rVai!XV\:=$V1bSDs5D3VA+16AOgZa5b!jaIs<+$W*c\T\dI_
%h!W1/J)_FRrs``HeB=i3#tCYrnQ7":MM#nF?R)I*?R)8qZUQ&[PdK0)61>GcMn?=u`N_D$[kAHY]m0#5-c:B:e_[U!Z)];k"6?t>
%M'g/;>S7`G[<QBHLgY!oRe%$;ec1pPG=ab@#*NPi.Q<"sDlL&uNGNhNR2B!9KfSY$18*L2?.`lkHUm,G#]5/k9jE7F7*kFG2j?_m
%l5q9"jMl<&fqo2g,tC"-Tp>#Q8I"_8>:cR\G+M'i\CD[t*@TM(BP<s%(4,K$eZaJeT3pRm.bSD9E\mBEiZ_=?-4(W:I/oLWX?de:
%B$[JQ@tbATq7!P+W?]0HJj#sNA*DCCO2<gIW:ch73%sU)s0\JB2eS.0k=$t4+!1uYUCTZ#[;I?66+[mpdE3$`Xh9oh4;b5!er=r4
%b'nl0&dJ*9k!@4r:P=niWK`8DbcRrkb$'`BNL;<jir\V@<3s`ch>W6\aZt'WXip$"l>[5rglf?.Hf'Zs<gnRW*s5#1las)h-n1<[
%F\:hBd+CPOVK_4?rIjJ-rV3fcT@hnBQA18bB&-%&=fgH!1\2U,ao[GK\BB9'OV+n%J"q!m*0dF6](o/=nRDJ*Ka3P+ek6e,IHmJ!
%;VU8ToFVPoL0f6schQ/NP]tL<:GPJSL1bJ5cB@Yn$/PPU\jJkBK2U!PZT5UCqYK\Q>^*aU%`,Na->bCo8"WEc]4t^7AJY1G[6)P6
%AIdRtp2+[2Qc\Ldbs@r'Q$EY&olmS:OOFVY-ejq.cQV=c[9$)CmL:PnD'au*+N_.ZWqUW3Lk5YI0&qiD+8@W19*en_("JXSA0uSL
%jTQQTCH\>3:d%Yi*MsF9d$XA!9K3!7h]KVE.@3=$fYTKE/$'X$.tYRqmo[UoP/*'<4mYGm^A^N)ncu@,(]/al,c^P&@AuEaXLM@C
%)Q2`NZi5N1D])1BK]63rOm@&ns,9,gpH]ng*?P"G)3*D"hIIl+qFQ-BXsZ^>6GaI2Lo9b,kRf\798+bn7`'Te5c2X5dO4Gnbc;EB
%FQalrL'P1i\P#"TW:ZapEMp2"KD2Nt'L+$?T_aH=\^;X'ietXs)j&^L%9fps:_rVC]Jdm)L\Q.dgTorjm6Ir-KC7<9Br;2S>s731
%COB)kAtaPUdqI8_-DLF9=C_Z]EH6'ZF:cU5g9O#DO8=A<$>48)#6g#QU-6dp,GDC1kc3*^n(9V;IY9G\`-J[AB`*3.rBRV*!VQ/X
%dWVhN7`9`B)Y3^`d0485]@e5:9\d9WG,-\#];Eg"o\UT1mjS:3^]oE7VJpbk7UD+l.IKI$em<K\X;:'dP_QilpNG4W[2\,;hS/L;
%l,>:C[C<nt'\:7P(tm=h!g1TS-4egq&?fd8SD\G=ZPfRtM].X*`R;U)^:,maq,I!glh<q4i!E/B1(S-VWAIAQ2Un7']3>3^_W*1M
%bGiSu=5`GB2E"T)F=\.^-XCPg(aIQ&6.6k,&6)X5R@':!!YVj9LiXZo7c`LCL5tel3694b6\ZWkg!kt900o,TZ\:9"=,O)_f$!t+
%42\<O?Q].-*ToPhM:Tj,0@?r_qOl'b_0ihZq*+&&b0dSo8et-^II@X[@3Nf(5%L7&SGCME:k;$V8B=2**q^IB(1/(`IeMNr.=Mbi
%o[him3ScrK*F&Kn]iQ3p;A>D&L+EIAUI_o=c\)[)<oF_.qo]?X#et<_\PeI6h,ig'HO5CCA63Ng:.O9M53pfL%>hQtE]/l,fEG'Q
%43rV@H"l_qNMdn$lm6,]Ok;'#T0[G?C_4ZSp]h,2$_g>4:`/b=64#GpSEH!BNZiA>Zjf1<,,!kJ8a5OT=!fm<7iVj:2Z@IHIOb!5
%MgFi,:r8"j$tBdqYj4]4N_3lXUPq3DWh:Q11cbFk#/pUPNX=S?Tg.R4KEiHUrLid4q,&,0N4'THh_>sr&g"-`>j'(GHdDu8YlRMU
%Q->Apa\'b^mtDu6K<%m$4iL-s[F]_uk,?dMmK[A/1KIO&?.s@q$YO0IIptTJ&D3kR[@/opPpm#T=VrOn8jHMC&4'ZNDCI)2J_Ck'
%(.]jmS9kG#U;cOH:r8=/'H)&_q#E:?1I1)GH1[U:6AK5i60a1#I#scXQCrmnACLTiocEq0ZFMPeV,/Ain/%b>]+cA<md@0ZHOd=;
%%^Mu2G`\=(=WI",Zk=NmXIO"ZLE)"NM",`%32DFAi8(QeOC,D?%eaBsG(1MECEpYC^*fS3^5[YXWA_g$!^>"l9O+!jDjKmd2=[;o
%6$A'V(@.k]*Wuj=U,W>MMU]3WV3oAdp!0lAY-]i?j=HuJLM86ETUmPWqLin-m5Ts[i]Mu9A)&q,O0OiLA7s?3iV$L"Xn=ILF?J1e
%8^(u:]'S7RRM3'1*f#3Po(ko'#;LI<b!Nn64SKLFdUN@N-C0%"&'\S4U0fa;U!9qtO<2G#@G`XF@_M83UKFuIUr/hLA9&Rh.J+.g
%R^rl@mZ(YWfc@ISmG+)g",h)#Ge\0W#+<]'(U(X;_#a5>/au_[Im?Qu29cgK;.cPZ`VJB^^+$ZU=,+?2d(HsIm!_U<R/1p"o[AsD
%^!UUF4WoDDS2oUX7Z<YI;]N5u/D"pGf-"!AQ(l7*++uA?gXRb@5dB0umKT9BFuS:SlN=u2&Jpg'E4me`*3<5IpX9M'qdQbC(E`:`
%)RZbI=@'s<p(cmMkZ9@pBceE"<=;%^.4df`eq<DQS`4f?hYLu>YaB#Ibeq1+Y_]D'8?t[8":gcA][h3n)>%]Zh`8m?60JM1'6eF$
%$B*np1>-Fo%OWKp;m/LL#iQ6J%u.5iBs4*#5p1MUe]?SK[J=BUK\h`>!a9]8`.prU-68fPheK$R#Uj^QiU`W"E-2@r9;pGc*sRH)
%LBmF#8A?!7gISDgK=c9<XODs6cCRn3S]_=*Y3E5h@!;BWkg_%R."`K1TQ5)[aqQ$?ZCVbB3XZHR.1\Tj*WN_]`6(jaXkd/--GWBo
%Rj:ilKP/8]$Q;`*p/qSqLKJE!'I;YRIDeGe^#j]--I18U#JCq>\[G^^a;e42UL&S#pm(M$4ua@>`/+o#<FSh";AM,@A5%):6-]LU
%&?3?6TYTKl:u!,S8%k;Ighb;hTT`aVmKLHO5YJf3a<[E7N&KF,YGT6,EaLuN!YS+ps"Qb'Zdsi0(#&e4r5ceA\??N!fbSW"@ba';
%B]!j"RG+J\8:VGB,l/c)_5g7q"))jMZ4>:DVW.T;*Y1.7$N@_OmU'G7P1C'pO@hJ8ZE*k%EYR(u5a_q3#u-%iTksshocc?i8rj4F
%o#DOT'%8SUA*#9G)/5D>'gTh$/*e)nWo^+(:uigG+eU%B2MYsl\9-U8%joYe:kLKiORic5*lM=Y%Z2gS!tV!_TSt;FH4=>5O].D-
%R.DFUk&F9"6M=rQm#A(ROsr3fVF'AS'$MYN&):e27h:Qd]f_&&+BI6)?^Zr[l'("(S0M%#r5$=*aqtRn!CO9bglUu.AQ!=ED'H1P
%R8XUoC-G6I&fu]0U$O87Ap59N^bM;!jD"=Y8Zp.NE:$8IY?Tef+eDfoB)t#%B1,MK=nd!qR%rqbi.=(6beEGd;FFqamr)tlAp'qA
%!nqI'1),g]+Jg@0fbYghq]_IsD'"UfLEBc16bN^&C2&Z$V;->-(Me3V'R-3PDa^^YVmt*5Qi@!<5Vt3>h'9k=^C<T?m#`7K,h*8'
%=s@)A,F"ic8Nm[j9fO_6ECdd1ClbiI%C-:6StPRX72j]hBb<DV*d"l0QaT!Gels5NFRMNE<t:`T/O3b/ZuHdq+HrcF:g;_$,*Z]E
%AT:Nl^T1NR?JKGFWV86*l\F/l_Ln2\I)Y(T'^LaW2=M<h]CFHZ+,C(e=SqZqMkpnsc_Ug[ct$$_5khs3]g*HAPI;8g$GO%*^1)("
%QAteWlS[m-S)NYYk9aG%T;<PV<Z=nOh_$L&iha,5]tkh,#J9(1O4q^O2&G>6#,Ya?nj9;_C;L9]OVi+LWI[GsI^^*gj:pl]ZZ5MR
%e;U=..YmM>6dB;$$G2H*C><U6c4![kN()U7L()BBJKXc=8KFrl(K_DT4?5Q54e._)k1l2+qcbttQDs>uoO8a,QI;2*mhO)@['r]4
%&@)ESbYT%M.8kqk#/,uepE;fD<-.$`FalO2P\QsTSteM:f-R]D:e;TgP<mG!X5ajcQCfq,%I!o5="Ne=/BGF9lS[m1D7m#V!c%'M
%=-^,t+')K4!@_6Hk(]OqrdDQ$Kd8W:RYn_hVl!Eq-(mKNF^:O[oq'GD->=%jU5p;k"PS;ol+nE-#7sfoD%'PPc#SCLP=kJn?jRt2
%8,=a'@$!^eO\LsebE1_Wd_)I_dY&=jJXF2g:ONnpRDP*EC:\494!"sUpHUJj=@D($o^/!H=YqY4V--CKq81@%TS`F#J"qi7Rd1\W
%QC\!V6D/rXPSm8bLNe65&"i;PKXk@@o!.YW1\^hN:=#7-4m;\aZ%UHe.H,ahK5Z=S4Y,U+T)%KS7Pkf"9)+?/.XZI]Q^mM!c#Ik*
%.RN8=aSIs[)pL(*R.jI\7TKBt'Ic'6Q![D4,K,o/![irZJ.HLS+"2cU6iFS,02lR=nY_A*Tg)>[+#K5O)*K9j][)9o+sY8tH-_oD
%,3f%uP"BXN#ucI:WNhAAgpKL$gL?74\l?GK9c:/>C^I\Coh#ZITPdugfY>0IK%7\AM6J(1=h?N`+'#V3nmJe0_sSdK_sAE=rn+?F
%:\;/91GGTt23b]^H"8SP#9LI:r]F&R?FA/i-%&0X$!7lI*N&D".e%dpjET.g2]M?@2fRumY+g#raEA!>$df6G.h+>T8tA_:EZ+9b
%Pg*j(W-dCV',W#^TpX\u4>s#+OAA-f6%$-^#c?f4me_@k.rn*F!P+<V\5f(Y7$411V;<;?.;0c1cJD79UDo`P6)Yk*'tIrH3a3%c
%rp%^B-FOpj%FZl[3VECp[JV7j!bO'LR[5BB+##s-p]rMgF3=:K6bn^g6tHE!RNf=l*YQ?p!A\#_6>JAY=JB@dMAnFHAG!PM65#t`
%_@IN_UpqQGJS44Q]h^h:T)q^u1S=imq6Ho]-'U'WJ)u;:(KN\$ntoCPC.YroDk20Ed-AtHT*OuEgg>Md73)\'THU.c="./e6Ni)Q
%+D#5A'!@]LNLVe?=tjH?Z&R*aj?cHG,'B?(j1qeF?Bl$;9N6^U23;LO\m)!GQLcm3^T3X)?VP!h*+7B6SEXT@nfbW-c*Jb\JpN<X
%6;=(b5e.H<5H%aocr_>S3R$Hh(T"0Flp-;eU8^('2PEJ@-C!:qnX=JL&j!.1XkOgI8/ohT+NL\8o,dPWOp/3IYEq3]i?/0SJ5,8s
%K3Ves"4YKc!!QWXm+jS*Td*\dI<>AA*@B88<tG"mNE12;0oJjWp>CUG_W$fS@R:_bXasWI`[4nV-+G4V0b<#eSV4/;Cu/Kb7Df27
%[)q5EjsgEXVdT!;kPPB],8_^fR0EtdBhUlZP<#0_dp[_W$D[T0bYB0k9UfU^BFlRLVR(ISmTH*W@2$]t>a)b+9=14YD`7gtC-16_
%IRM[/<N[OMNEOLB%QYf"[A(eYs')[aZ@3srV3:6I]W)gtlh2iaBfA%<0E$`8ROqh0WH"?npCqGV7G4'2V4=><:M9'(E'39p9MB9?
%g3<V8'Vu\,]G`-5i5*pQph:V]2@_6\Ze]Q:Mu\cTRl7'bkro2g(kXXX3ipIi\2ng>\=ThR$'d'Yj)J&Hn/g\f8Pu875#N)A%2gVN
%$c`dXMITZVCn8JY0RjriLg`f/af;d#SulU97A1LTWZIcmPsc$!%*^dYLqdj0cj<V@8RVBj!es%lOKACYAkaZW]*r3VRDQX"C^69E
%i3#i"IQrR9K##Hug%haEB0r\;&3!0Is*nP9Z=D">AMnD*rZNXH]Ht%rfapK0KG5%-&5uP#Xr8Rk)ca?cnb8RHf]M<DiW?I1(!#.t
%\S^)MX?Cqp9r:_A1*'1`?F`cZPFRRqb<F1/C/qN6d'2k1`OU>4;S_;+g&,[0X_r,>W`-&n8J7qHQH5Q]?(u5ult&89b#9uhV('4i
%_M:Gdd8=BF7Nr-4@")qj&/uu(Za5`F8=0nfka"2>V0Fi-dLn\7=;H_d;\_;hMpdcBXl$/ck_C`m5hji5$iL_4l>BtbK_niU)WsD;
%KEYAlLS*t64',7Z<R8)tJcHWL?;'cpog:29'(/h&CM4ia07EWCql$I"mcc^VPgoWpIIbmm%.,9SN.!IIFIE&7dRpOc/g#"c-P&[S
%R":pu;<b*-1p!t/^"ZLVA&^6]EZfKlQ4KN4.K&Q*3`:3ek:D#k_2$ZfKXMeL_S8<&3GkHC%+n\_/J33E!7_5.fbL9crN(p4JDiQT
%)c^nW8<O212B`tC(a>99UYf4\E:Zjrq&$.;Y;lHRKlp+JREJOa>+c0rbo5Z^R\>9)M`62I,kS&YMN\=/q$QN1ae)DFEeu`PEgb\\
%)G-B$8l:f3!h%LR61XW:q_W(b-@[dZec$1RQ!3>OGtT&g1j1.!$rFWZ/fFL7q0gLj+$W/J[Y+ak,Y..:iA`,#?e7h!QBrTGgnceY
%rNJt-7&V;u*hC1Na"u/aBiD#D,Os\<_r7\KOr.W01;pr4A$!Cboh[+&8tI/?0T8;,?l<R^knqHp]6UtdhiHn4=r!&qW$`dnRFk\\
%nF/rK;HU%t>fpTG\0gL1Aa#U+n`Ro=2.Q-WL9)f.iA8XO%]rRmk>["Q%q2^qBiM&WVmqnIaIf#;Gd$mF'S)lH29_m_aRtf7K#$BP
%26)R8S0L:>.orB9EQIl5ZZ<NJ;9Ks;&_nY8ad/BkCFdKdM^M[=U3<:5b.*he0XXSuI8)9*=`;fE2_=&;[G31[PnEZVo[j1YAt5GR
%&Um@$Go_X*JqL?;MA(%CR"JA6@#[#pGdo_#_=EbC.bjU5W$?9[V'C&6co%rMT:`g.F/N@-J0)sL>/bu^`D\A6RpnkGN)8/mY+adR
%,i)IQ*Q+4&h,>5^[*sqG3j'$-b+\DcX@E1CWlHei(!+nd&>^[aioLuZfK<m+(64``TUj[D#:7.MQ>=GuYkA\q=r4Iol-W/7eL2b=
%mBT/tH.6"a@bSl3,3m[D0SZ`[MK"D!K-80<'OHa-!lk_mN9Q*G)PANk($^d':=dtXo4Mi3#9J/LN:aQ+/IM4`+n5"XLg.l*>#<mH
%%>Z_KFR@"@$IX)dD;%Yg59QdnWlTi7XYWq?V(.2a6M<gt@]L!)F02.,:jBAR)s=;$[PSV)qHB5U%&49+`DC#hTJ1<F]X%_VgZN=]
%77hpqa;W7r:7>Lo<HD@jIL(ui!`d:S;I^98!]P5d0"-&nUe(\J:EjN8i)U3**`0&9$n$>JBpH:hNFWbBQfIdE*Up1h<:r0e+G%)Z
%S!$AtqL9BVU>rtbU2pX,N4>+S@Qf[m1<4,(8+fbZ'O)b=QBCH;@l"Th8.dBkp*s&i7W-O/d$f!rC8cu6[WOqX@=.ddFG5JrS!1VA
%;Y:PV/dcF#-0^X2k&.d^+=h3ZqU(n3`VR_M9hqOPK$**HQHP#117PIT%*:!VFC-U*CC:Q/\kGV>$n@E&_dj1.\=ThAET4)YW.G`_
%Ybkh8cM1uM8t#iqZUWg6K4<Qk"YPVMmnP<Z)!S*e0N*nd5cgM%++VE#Y#S+[ePM+0ppilK2e(O#BW]lM?-Y#E8EIHlAjUKmaclI-
%T-ZL8,eu5f=BCbd^/2GXQF4H.G1@Q>!8!++,F.@)s.&Y;knp8oJ8/N6=R5P/aMltp9m,dOn7S#rcK)-'Qrao$.I,r,nSAsM.F#PI
%=58H]cG^1UmBWg%$mM@12i3@V4W_`nA.8r6&g>l+;)Om+/K!KM[e<tM@9NB:Pj\d$9q>MX93?0af.KHjP"$RSqaS!/6dVuPeZd6R
%LARCXpGK::*AboN0ZF!LO2a31Bu/l)Ll/r76aFigcrT??YW>9GPBM(?a-u`/7uLWAEO*=hMUlQ*RXM]!2?q5kN<VC02!W3ZFLuA@
%JPAP=_h5&1102U\c$k@m%%PA3aB+JMC'>HJ&M+\_PLNqHQ"H5X<p`f?!!Qud#F;NVTm;o8"eoU5jIj')g4=p9Ch4rPP)Y\#<G/hF
%7QMn4002Z?m'mX-=^-h_S4^Hr`5"4$!#2#tqAo;J1GYj8Bp)@'<n+^YBl+83OCB`]CMD\<[8YqsSp^pkAP8I)nIpog=jde$8^2B2
%Y/?&NP(+<KFmD[n%ERfLmq^c)Y8b5pE=4SIbuERji,,D4pk(u3DF*-!,5eb.a+f&]Z=TGBVJ<ZX#eu\.'Q[Qgl/r=?l=JF&^6UZW
%,a*B]?Pq4e`2\<L;$KS&7Ta&sGf,J!g@e\rNAWJ#TaccKXN<DVqujX6g<?_cQb]X&W69mG6BuWQY\5Fj*?adlIUO<ZJT*d=EdG9t
%.)I+D1FAS@P2f$go=bF:F@9uJ[Umse,%?*V@*5Y+P3QZ=dPrP]C@?Up_G9#J<YqA0C9K]qE=EE_"A/$j52=/jVUih1M(2W#P]jq`
%X>KuGn`Oa%YLZN8M:h7BaEN9q/%5G[)"!HCqGINW0o3`[En[.J2N(tp3cqds;*U#o9Y#%<0lbEQ)]N-7fkS]aYS0:(<8S!T)-V(,
%eLL;VZ7oX3$OI&W&6,',=n_4&Dk\EG-n_eER6Bb#a;,CH8#G1"fB_$m$e*_M31pfWT/#cI+/lm$fnC<&_W>(!9#jGlS=5Min;R\u
%DX2!1VpM^EE>%.76hO9p)&Ni"OfHQ=7e".!$`"a>I"4<nnd(JFK)ZBN+*.@<?EdH4b+8:,`aZOH#D.tBC3r,e2CZJ:OUh$4BTA_%
%+S\2KEZ6(@CWcL&S\V#NN0]PErHf6,nRt&3='m`G`e2G]^>qNM`sZ00!I4\[h'<'`)iM%YO2jnTZelib+h$N#cN\^)*;TP9K_0bE
%hYh_or"N3#P3@c-!U?iNI.ml8+YtG7ljjs8[.s+1Z'1oHZp/Rtd@V(8>)q+T4S'YiT&;7M(W$jFC*CNJoiPr/Y:Qj>H`7aK!Zo*f
%7,C@P&aT6!ET)E2fg*l<G8U#L+/8Md6_\tYOmrRP/?/mt^ToCFZ/`S2Bd)eM_d@b@A-OA?9g(;E]+3Tfg(i;U5rj#X*CX_aV("#H
%.hAfp[$P:=(uh@KMp&%8Aoe[/I_6aspG[!2NStgpoPSmWBr#W<It6D33Dk85H]<=9]05#sDr&gtmr.#j6m)#BNlP"?/sjU;DWpN6
%M&m+%=.D@%J9"`@5hi#Jg_^-V6AkKVdhQQ`3RG&W&KE3[a)_i\5IAD]8jf*5i+ArBIbcS5g.9AeY2:?qjsBQ^/4I+#j"TeP>N,bo
%kX37r0'sCK*mEinnT`GUo_uo@WA,J<^Fp6+f!Y'#eZZR3oG(*)<55-Z5YYTX9Xt5SE*:+/:hW.34&ZfcU45a\1g[l7)Houb+i2pP
%o>'FC+K/;3+XOgR+Y(.(YKIBJ:;mg["(Mb$VJ@_*HOYOlaeQQc"aU_Pfd-VN=@&QUC3df"F/.ErFUn&6jr<)3:uVOtcP+"/omN9+
%LT.-EBa/^sI!]$_9(s\kEm/N2'gnC8]^5Y.^.,S[!R#6m?QVQhNCTF'I6aeZdKmf%1O&D@IL8eN9a;%$1j%?-:HTdY`IdGGUX]Tq
%&,ur^Crh[50Y&#c9#dnp7iu,BO+F_>T(B5[M?4('iu9qa-f=uc<F`E9hb^Jf0.7Vb%tq)(0ODaE1/bd5Z/1%t>[nRX@fT-]fK0)9
%68<b%18sb:#$1-2_BWhrOdCC;!kLM=pYNo(2cS-n18%gkM2EsN'IRFRZIPO36RWu=3R'LmVZ?/-CHa'P2lY6_k8Dl2SKm;[?XZ"-
%+%P$jJ$,Ue3p(^?E<oZ2)7ld;["(RG#+8N*ldpdt*%KUhB5o&+h;ROFe/A5_:1sCX]$-9.Uq9]M![jH:&f9g8KR^BK77sM7@lqhM
%Y8ECj.08:%ZV'dhk!3@T?=JacMRbX6Ue7@i0NFhJ0E!::U:]N&o;/4=PtBK*DSRp]lW0m.n7WT_k!WsAZXYB*0rXOhe)L(LEUAKl
%S.6m+'EWVBTIq`lFOS;/ld]S_>^"bJds=e+GWCQDBjZ28e1H$h^N6/t#D)ubQQ%>@mcuLl5`^M!AjC3S;SH-.U@U"\&1JF^i%[Va
%.F$l\eboJB^E9.hMFsO.V^j1n2*AmZ,:a=E"!/iFf@(/B:n"//l5!`=GSUY7.2ZqdMHpSrrZsg^lqhe'a;PA]i/Tln:m@nSaR.;W
%h5+"Z8e/^P0T!<?YcqFlbVUTj@&Dqi#^]ahrQD35l4mH%WRRnrp'!C&P>.]>SQ0%>0A2Zuor^i$.ZSTHKeHGKnNu,\;jdoN.>4S8
%Mn6%:I(&rA=!I.75^:Yk0VWC92>ek^cE)P[LS?_XQ;59>i7_8IH(Q2'H_#0*J1`T"!:!.l.d4roKj9B8&lOrGTd!%$5=BOQJa-h#
%Re%0^Hf##'>$ae*5"&tQl=B65)pSBH8-.*K,V4j9Ru(2uHK[pl&IT"/B^2m>8F^28+Skp8cFQ,qFK#pOoJXaY9*$bFZ:pZags60P
%q8<_:p7Z&$e0V^a(JL"Z$dq<.>fr;*B>L3el%]`cm]:k6\13ghc3*oWaj]u'pCD%=C>R>0Zm4Y<c`hglmFBLpcm6.Z><jW;5rIpX
%mMW^N+^Jf$oT4]l_@Hi5HbKtUR]Yg:KoEBX?:q're&VSo$"[=#0BZtX@n31r="uPSKGm:9?:([W!Y?P!B19U7m+D4DO%7ej5rh^4
%Hg2(FA*a\;)5Y<Y=(rh%:t(Rd"n,M`VpV=.QXPHq@WN_ps)q^@m"3FD$5&*0?7EYJWdGgk(7l?5KcD2P<"Vam&g9d`&]U`Y2tZW"
%)%?)OSVjC,T8'8Ae`.TH]&b]Q#N_kkiOY%=;or%0=*0EoVF-$&2R_/Vgc"1R`g7IGFR:4l6s;/PSK-I>e]?/OklOaFOa8ur*fE^+
%0g3/PO3g"iDMDC58@nrdW9VoQq$\^:Ogopak+FX-D7Ymk]H!oO-n$hd/Q@lnjuQQ;LD6"^P5BSR:oUuH]-`c2[eBEh?FSjAM;=&?
%JOUqsPl(2iU"6>Hie8DAn=3\_iePmITb$6:,VFkE_Rh0)4<tM\8#N1[?8YmXP+9+=@&$<>JupPkJ3U]p.4=pPBu!CaZ,`0ed&=gI
%kWqS`bRj3,c=gH\^'Vcg4n$a,HPC`EWGT8<,B0KCV6/L433Lt=>N<DAKo)QR^alSj<OU]m2>)^/X?QZSP([`-BS_9rac+oM)d0si
%#irD>VN9PN#;eQtUR^L'Th?Str%=D`^5ru*]u*FWMl!r":^a5slQ]@MRM91"UIiYuklA(:aj3Ti7BR36VkCD=6-;T^Ems`n/s0E4
%;SNUK`-$d?9ArXUq=Lq7.Xr6-l]bR$?Pk5:IBL.J7>&^)Om^=QH\q"s@#;D0KY'#OCT%dk?n.nc.)^0GNhp;N>-VIF-uC5f=;S*N
%ZWc+sF]P.N';=2Je@j/?Ld<#FOY8G*+G\9Z_5Y&acCn'%^,C\pLYD],Bob=_/j\=H3D&=UanjfS(+8@rijY\]9gs5mg=N2C-$.?;
%Oe$Xj?B>afG*9D1\BZM8nkZbAO]6W]:=_1I"_/s^B=ON5@U]\TCrh:HUPIVjeAI450Na"PD@P+iO&T->mPPM\#FCCGpk3*>(F,n]
%-3ms7@73BM!@^H^:>/=R\nWOB_5V-@Z8=_?`72Mnm5!`Uk+_@G;bn1m=b?tM[?UZCjN#[-!`F/\`lR1<7^MVbiao.q_N1Fg6<lbW
%ASh\M$gPsG86C%d7!q]I1gMCUK6jc?=/VuJ0ITa(GnZnRa,t/N'B2^!%=FB!o,Ms6<0j/JKuR+^J*a]THY_o$Egpe;,;K(NjTbTi
%LY!g-!\]f&K\j`lcmg(R?IiXFKk[I_pq#H*"2Q9$R7+,`nOle@H5*AhZiQSt)1KS'?-J`sTT6s_(!GN)l_;.1344^1^C]eWKsp<"
%/O\%>R--Vb.VK5=?!Y:0X9$@?qETqd!PJSRPdue%UJudIbN_tu'(Z=D=0RS"(pLr(M$'dQ@()jJ66=j;>Y8E#)(d1]OTA]32/)ht
%,.M_:(7/&g2G7P/B]omLPhZR@R+J%&qF'(7p,<DL@:t7GD$jfc/XR2>OTfKm(jb&q\Gh@GLHoD)[&,YWeoFPl(FcYoBi^MTEJS35
%l`Z3Opd"FDOI*4Vd`**)0Ya*r=::kR=/ZKXflgL,h%2BAJ*P]+V%ug>OkM*5-ZXZA]-6$NG?bUZi^rl;6=7A,7!$iU@*7XtW6=P"
%A^+SpcYcg9;.d&@&]XO7WmRddMK@S;<N1!U&MfXrJ@Wl94hTj)dgp$H*kjDF?G=iB"c>t@of32ON<HkED<St'DJ0H>+@Nf\34)![
%bEnpukqTel^eqHa']o0;FNWa+!uIt%Y=a[^IR,Vu6cL]*X:"d&3Co#f4ar^;o2SHc8]NdgA@k1L'uY"mE\nF?q:aYeW(TY%GJM^$
%J,D"<LtUg297E4Rd6aVsY'@B$Aa/Rd6E?s>[6"D%ce5G1H*56"NM!>He>N6tLo$^"5?e&LepK:ak+VM4!CE[3Q`e&7ff?1T&!u\r
%pY.1=X1rba,,Y&o(Png.O$8)0@AUH9<[?+ZkKeHmn*a_)e(_MZYUB^KUe<od?#-;g9?eg+W2SIN,AB]hd6%R)$MQL-p0o'NCi4o*
%L78_nfX<7aQ&m&*>Z$fc9U^uG7#8"FJj0#t4!AALWN>h9?FjK1:jEUsT2gVb*H_lZa^/Ma:)QpKAY^QnmlBsp"e1#hjia8\]I^/X
%gE>ZH9tKW"(CN77mcM?.1tJE4k;p4:MpR#5hL8RQX3\8cp=e8&?NRFF2=JrsjmL'tV=*2PPHm<"=T"<[3lHEd!kQ.9,B.\40B5\$
%m-Q5embT;C?J^1aqg.lM-HB<HV`'Zpl>.IbDVK6P:0Djd(8o/P+$[DK=GYQT6;91mqWp+Ge_JL%>mc$C]7<;#g#)Z62"gSbcB03\
%!`5,>]=/<t[C9I?oCA1?f&LWN2!_D`j4:NefNZ#/XlX]il<>$K%'F_GN:Q"uA*W6*ju4aH<loi*"a95,VkSX8TPs(%_:fp*d-,-d
%h<a?k`?gCqB*;GWFeHa+kh!4&HX>,P%O5(Z#k^0u.\n#Wqm]jOm`UI=acu?BSc7K;;poQJifU<VD1BjP,t:&PnMBl0ehH9I/+'40
%h35;/B1F60%ZetbLUlk*ctijt$1?L$HYt6/TYh(1G/f%Pk0V&S)Q4CNf*JIe`u-scIO%EH345W=)0X<5kJ2ZBW$=7m3-lI@9WTrg
%KTp]tK1;fY0c$NWoU`6@FZJn_bg^1f\j#Sri64!M$6b>\k=pG[.-2B+YK@d(@f"IJ?L:@3iRu!W+Z@JLU!f38,B+[T2[JaJj4b%7
%l(*JIamk(N$<d(5Aq&*)iQ.A!J@%F;hLmAj#>@rgnO2oe/dAkIDnk<:'F*qO?fb\Ir?ZPD<D&#c*e'[^B;t)Q&;^>^GQGiWp*D;!
%9@=-Tbi6ei)<'sLOp5WE0:L$(5R&TkDWfoOpB:eTHo/LM@7rG4#!q.tFHlmU#9l<<MsI48ZA`e#\5bZ`X6FD]d0pg2$C_*#fArth
%mii[>W0cajH%?lh+q=uH1a/\>3Vgq(>'))@q*c+NQuMJk+o781V[$913alq@=3UOKX;&8cHJFe+EMmD["^ZhYDKW0^']#&99u*kO
%LPMXgVX+B*mR@8Iig&N;+(hM@$j5ND+Afi3=/uU0R^f<K0?-9[UAMi0oYuDq=t+L@ZaY44WA%-3[Y)fQ@)?/+grIuWZV')+U.6g/
%L)%%#9$</J'?Odl:@9WPR_DpRGB_mlQ=*oX7pf.,Y6,g&:^G^]CYHBo)`?2?_Z`:..=E+G4\VT+';2YCT74IHVhpd62Y?NA=b/W0
%554nu4Rqo`UB`9RJ>KKl#b'\@*T"pt$4D3ilPTk+aS#Icjsm^$;*ZDm&HoCEI%#V\KSJf@!PQNsJ1\N^3I2pVeT^bj]@48G>U9Q"
%Vb5#l%[7\fF_:sm+AE4\<ls$)`.C$>>G/AM7B,+h?H9]c(Idk:/eB:n=m\:O;RYlA7$iie5hSImXJ?HGdS&f6g"QX\;KA[qi[%;+
%.mgM\:&Zg%=IX7p*KUp$RL%hG/PF6W>j<96]#^].)tae<U6-DV=h8gIfQ.N.loB3,OW."G!-#R\]Lb\PDg^/u7o+dnNutP'6^eRX
%:d1H[[#0.qHsQ^I>sf^-4/b?L;2\q&c9Nhb[_0f,Ep"!mH*e,Z2en1i^CHU9@`O,9CZseu3!:.[#Mt@sb0.m*+YCE(.+bcF-I=$l
%_=Mg6DU$tO)Le"3ZF%[@k&Jn8/'S<PTY\#@iC9*\^>B^r(["Y/kUG9gFVG7P&8m^e6?AN8.i6?kU*d*miG\o\gD'r=S;%_[7FDM!
%0>=S=+^,G[s)3M:kiWVm*iKnmT.!%.LD?PMVPKN9_.TD6h^AjSDtK;GbL>hUlVj+f65lYmR7NIcMujun7F11h,7rsQ97MUMq)bu*
%W(=nL5e'F-_U#T-O>3=8Go.cTeQfE^!=l(j.ds4W2**^p!d3Ia`,L+QT9"WXA*loc@`#R<-h99&m6KK3P0G\UQP<o$k8QtfOI_[4
%ot?tZqmWHl`f"W@PHGq)RLVu2.m=)K35CSpVoPo-<$@/<)nfe;;s._].Wt+j;V[:8)t/ng2T`B#ONX6*K-9J02DNcm!`NbQ\%t3h
%k6'Tfk;;G2X`J%9n?uKdinD`'CT]XEN?3]YAo<AQ*Wo30@QOo[MP&ddmH8][]uPFH.mJ<1@Ib?p/E`Sd+JOZlY_8NG,)f,6Y,Y*m
%osM2r:QKb-_\1p<E04-p<kl@U\EIal;6J(*;J=(F>oH"I]X&peQ['6i<E7jP##<-_P)="o!Z]Xg(DGF%F`QV1)eYZLX`SF@X_;3m
%rC6\:@^J.1WJ`-o6()bmkFjOOq!M22ZRS1j]XSJ$p_R*$."9:E_/d>maXChLi!KW#_97kRa^P:&j@3+E_1og@=H@+V[\kQJ/K+P(
%YasfPBo50oA0DRWIFDcA>>q<An7)"kemkj;<4,0M6RUQC`mb#%*(c4(OBbc@'o5fUl.jB,d)]TF/d*j";P\f?ki^*%oUM)1G^0V_
%'K2[l^T:'*)//\`Rk30ETIqK%`'Vd7^01=Dfa+T_S7a[]+Va6DKI>gi0!/6%^1`cQ[0>WK^2mLMMs;ftA3e^LVZVq\#W)ea-;RZ0
%AK,JcUI(pO)@m@HXfJ.Xj.ggCL?Mai\7/Z>>'CdYHbOV[*:2app#?K/r@]O6YS%.+HN.<R\?b!P3j5!&P%Tjk]->s`0jnhmS3!>Z
%@O9Pdn4MoN+_V4#JWB87f16i4r#rTsr4:8bob`Hm?5]Fk%Yu%QlfRV)ks)oHma%B0!hh_->#rfm*h$Hm8@7%MV=B[@T?`jnQRS@'
%;<rML5`u"j,Pg"TABn'Y,R$j_XPpss`M=n)]GZ-"SKLi69Jgm6"[)'dK,mJS49l"ef%c-MT\se:USPLGin_eE^4<ka8W_aq71u7n
%m`#5UQAT&Y1_BpZ"5;gXG:2<1Dfuu`mSJ0tX"p8WQ`)TK93])3*ud/Q/+'F``b9OjGC!^.BoltPg4nkJ3;ID@bU-W;1L1?9(9hr#
%"tCp;4!XQ)mFa&"iA-uonc]Jm52Tc$.Oh%%O1_kPTc<A^g7:Y.m*b%iFgL-9U"+PFWkI608"AHcITF^>7'_J,%[7jH%(W-U4up,J
%3B/5HYBN%X:_E+BL/URVW]g`Q-CmT.GU^bjORFPhcIU=$`qYauT(017o9#ePht9N%*eM4l*\K-u4%#E(4u9)$.S9e=/&qiad^c$t
%9eq[r+*ohZLDBBiUj-Anq(FZcfW#gb3@8r.lhWWkp#7M9M?'/TdKlN=)NfAK.VH+61&Vb0hZTUq&UJ@>jl9*'+rr:Z_M*^?.o:-[
%[,e3B0R6_R>-JMdd]+$^b5fHa$>1)Y(>:F!ic0jnL``c3)%s?V/dXkGS"f^/>sEjArqDm?]((X1k:%0fkk@WT8gin"/X?r)3e&Q=
%\f7Bed#aS>_ioJ%A_\ph<TJQg^kH:K5hjSklM`hA,ra>rP"A_VPsr!)W2:#XcA5GV'^qgKLBqZK0]W)*=^XOfo#iA5lA$E4<OG;h
%;ME]6S@ni]VFdUMW!<2Ea^p`cGo<VKk"7WtUWVo8nj;gDgh7:g92_*TdfMi>8uHB:9a]Q,/0eIl1r`@7H\C6#lSl'(#?j8LF#0th
%k^^'APUTZL,bl!b*2NlqehPinUH?0PJW?sD0I+g"NQleVV$#Ohc$<%CRIQ/6f$E*&rn+r?4EVZPD$G]/&`qS61=\\;iffqs@81VP
%h]r@ed3=fsS@%2=^dii8j:WEhHJ-[%'n*/)W%Z3DdQR!<Q]m<(FC]cppE/;b`uQ`b[?(D5:_;h_pgmEKVOV4c"-f+##[6'9)M7.L
%\_Ijn!d#S:La)"V+H`%??XK^gi??ba>.%5-Y.lEU(S2mS$WN?32^mHT.%"W>Y7RIG!S<aNaR"t108<g+6C\I,.'kER_c6j0lVZBK
%(W2!YQC.#u&uG!l9r;\&NSYQ%1dT`_N2OSN$UU4>\k8V4G<p(5lc4Lp&"u-m(9e7W`6U^#4'J$?@s*Sr5Bn$Ak,IQ8J0gF/&i.OV
%l3uS+ABk=TZ%D'YF-c#`_0dVT?O44A>t"rk$g1g\;kODW*krs"Wh<n$]35\@AJ@G8Q"u+eDt;Qi/WgsOKL%m>jROR<fnOG;o7?$L
%$>b_=JlZ$9lO@\\nTUt:0+]l3!P0-7SAA.iK9[Zu;l+Wu5X->=46mYjZfm-fU?/]LJ4%[ChC'jIV:kL8kDjo&3]ZjCkWP(g,X)<i
%+fE^X;!@]0Yi"g+O6n\U4aDZ,GRo9aMUflEOtpp_-DrR/PQljg.<)g7.Nm<=TbM0_V\t:2!:0!?aZKk^>F=MEe:):iR+Cu)B6j7!
%K"S\_.*"3BfCFI;qbB4*7Pr!QF]+<GIC^+9X\o=Q=J!Lh,n2`ZES7!O?\P03[#a'd8*db-7=Rtcgh8_2D39s2J4,!k_RR;uk.%jD
%H`F:mG0DrqkHX1:HBu.R,BB,-;uJSLY^((GSc0%jT#-FEIAOipm+Qn+ndYUGZ/V6U$gj>"mu)8geo+d,[R6cANb^qj>EqQB)/XKS
%gRg"nRt(e,d_4W=;.^^n!AT[(8gC%X>MK]]MKZ)2*-PZHN(q]O.4n?B1;r8)%E3n7+t+E'JR#V\p>^*R<Jms]B!Y-,#Q_H.IH*E9
%96/DYMF=afMD,BRI&)]ab&IWr2:pYR.&TsT"-$(A_FQL6JYQK%I"Re9qL%7uga[Gb0*;=lBuOYgn^I62>BaMSiU(PmQZ%qN$]O'i
%])+`n%QBeW:"d+T8"e^EHOZKH/lUcc[4W+i?HPL.>'Wi#bQKeZ3ouHtiD>6#H<(g9N#3\7VKBps6<3GYm'gt$IPc7O6-^R\Ghihn
%$:ALgfNHq$-N@XjAC:E+7Eb8b=<`;-Y?W`6IR>'??T2(/Odn$&:=o7LS\r8h8da^[Q6MInM(T^g+\H,(G&20J[&rH*,*^[2?AM7p
%8QQ36]2t6V9lr52",<b/!*$\[8g+Ieh_U?bhf8[tDk!%A(nOR8T*u:!,>4*;bM&;$$LsZlod9o'`B\-'!QnRe#D3Xe&#^sB2^J2g
%.@AGj'd^9Ch_a8r<%@3'pK2/6)APP<r/g+6'4Q(tO3*A.h%T8/j`oV[>sgioEAlS+%uUgsJi"Z!LQ/3V>n-Zg634TKJMJP[OO"V+
%%]!MOLQE-Q+d%;CLO>!D(if(uegW+iA-5Ij-oR.q.rT:c]e)iXU"KR$N74)]%'8&h9k<tEL3u>L?H/<RIKNIC#q1I*fa?kFrOtrr
%s#JK.8s)%^Oe:FqK$G?K!t;-1]c@s"0[8oI0M8!,C_Sjo\i]:tgl4&\nZ@Q?\a<'n-8NM]/Eb8'<aIi&cNf8>q63!#e)+U._[d:T
%FRCjkQ;TU8og$X1Xg4]L3ZJVr*WYuh=De/h"JED?[A"+=e[=ZFq2OBf/PGIl*cELEL\<Y:aGo-t2]</*I%h+n3^/.Oc-/c^]/9WJ
%NH`PJrD^"PHFTS2L+L(/FVIX/<@^p4rZ'r;4id>KP%(+"e[+7kF:HY]RYIF$&!ZI*ormCq:c7UmjYn7%*o\,%L\QF`'`[q4)6,A]
%a']g3/qZFFBD6@0rYRD=jQe4Ch!Uh1;285W^6dW-X</lQ!\4"*eW0[D(n8T-CaQ@f*<6CRnPguh<^h?+]uup)r!#lHr%@rUSN0K#
%?M]W'.VA7lZ63G^YGd)[O[bU$5E-E_qVdF_[7Nr<^b;Ub.\UQF-i5[<8*;V`KVgTEfKH:LN/0mRSp_QNpK/@g"OM1K2`>XAr=V./
%bK^.">]=Yd":I3<HQ"A[7[D)Sr7$NLn7WiW"8fd+XS:HLAPR]%Q4!jEYb=2C:H+AqUG(i;fq7HY_aTGpU[F(UXp]&I`l*I[K'E)=
%@4,8.90PI"'aQn/E:mN"mfm;4_e]$*(19Ps3.p,JZQJ'_k)R>>$C"9V<o>RB^R:+S`S,3/KpW^VMTUrQniWQp`<:$A:sa88;u-<5
%?!>&>>sgh6<97RCmf"As\!_G`^[?W4miH/VX$jnlFuR/-pZFPfpKsE(s%B;#]`Vg`Qeh=?T'!Z4\BuKVd.t9N[8hL]8p*>?j+j]?
%U/&_o%d4ml'6OEGf<qfgd.T#,.G%k/&sL/k)D7:XQ+.DSlfq?aJ_-M#lo.iB&r#XhN(7FXEP@<X#PH.59g_,k!FO9X5CQ^.5]XO*
%L5rIoi,7?K[bZQh?2aROYDV>8TDN/0'ne[bfXQrrBc.u=0gc0a$i>0S/H=bBa$(@pED_2?5AZH-EPLprcL9WRDW(K)h2O)d4nm(g
%f41G3*%:o8JOq\XEu@07]2^d.$i>0Srn=A^T:h3r:B13HFa%l@Y'rGN-gComYA7KXiTi[adf[fL#[Xk<m=T.]TTG(;<G=`E6T=T;
%+kGR(>8J]TI%0Ddq/n*m1SS\[4ofNt`.ZJ6B:tc*KoPt@#BY@d5biW!lg@N\p%?KdaU[%C0++)bIn>e_/2kl$5Ij1"3`.@]M@`89
%V4?*=9(Hk%+p85o^`UV?VTZ@g?Oc5ZdDA.5[1%01]H84lR$d+#:E2V$>KP_sJOYjlQgKf]*LB]95MG2pjj-d3e>"pi9Y""8(=ll(
%fagjAB^:4U;;:bmh%c,mJ+qZ64kk5;F#]&8[,-k=o#`!bIH5p=3BYZ%p@5`Xgt/ek'QFhPUP@+Q="JU:0_>.Ak_)R2X!EQo38'\M
%`K4\pPgP$eRhj_r&p3)l6^0)^0c'r"n0f_U=RU;k7cK:l3+/PF9f$-3>PnD_Y&J*Z5VOf@?!]WS00k\B5Tj-O$$2b5*eU$TY'Mn4
%`<TWn-8aJbWF;Z5dafA+F@4J2/H7m8XEgL+g'rI9?/2G%*XOHNjV#G&$H]9<)Dt[qU,9_`7<s/O9>le,,hD<_/aupWl8a6q@/AK]
%/Y'3(=`a0iQ^7Q[/k:pJVIX!oMMc"9p*I8))5q'*L]#5U&D(34oJ`R6Nce]^me&qqM5n?419R/MWQM7<Y]cgV-tH-&qbE4_H<!RD
%p(^g^7F`8W7jQ>-gthAJVDXoY]I7tDY)I\+!;Rr,[?7*H_ki1<a3VIDq08/@XCBBK`?>_!TLV(GKp8tQrG\V;+tESk$dA^s0OBjo
%O^1C^-QuWt0d$at&9JfTg!2LK`t#>%i]p4(_iq!7K-qP.k-]&g8_GP!6[a-I_cAY.pTu$:O*)gjV!,riXuLC'Oe-3H+,"<SNnu%(
%dIF!X#KXSmOG"24$hu'Z54>LB%-W77Pec,o<KVT4&5)Y>7&]"QXAdI,1_:sY;t5E;N-17dkm-jS7"n9:aar/,SZaaXe<\F.I"W(U
%oh%_i,'$4ZD:.p1q]Uq``6@3[a].#QTLkkh`2KnbfnM\$89KqkTUu`/[Xf(@^'HUTfDbgkWh0!?,%A`;aB@#6fSEUq")_C-*De^%
%=$'7uJd3NlAKZh%8/iJ?Uj[l-N>DeD1`SlaqqE3clqVgrR:dYJ>RrPn\a1M5A984#bFi[(##W*s@GCVJ3#5P@Ht+C=bD2ZGGW2+S
%c.DeZnF"F"qC?*-/^.acVXTgQq:QAHKsYTAG(d5c>5S'Cn0X+fpr3d!>rg<-fe`rZpDtBSB(daBZT(p&M!K^jC<omL$<::>mo@B[
%=)q/UPZ48ICQG<>6=07*H8a-Vh(T<207DX>Z0td1BsdjSS\E\p-'<%^mF_!e8@=Mj0[^]"3KeEEK[OV`V[B>B1-r]IHbgeslu%8B
%+ht$h\QiQ"m?dB1@a,2;[-uNkbfd:ac.J*NUYTJt9"J%e)WE0.5jq1+3_1(05="\?S>\Y@C*S%lU-7ARc`Us)pIA:e&kOO:qb^1-
%jnsB'%Gb;MdA,*F_pjP7#:MJufgP4enSbG`=E[u\XqZ7!J%W4.XUJE.-do^tKt_@J--ZFj*6G(3lE'AjW6q3TpA4TFc7r9o.C1;*
%bf="%)i6arkX2+'B5\%?Z&J)jO-`2*_u5]2@V\.oBSTZcN7)WAcFbd'm43Kc\NeKEg_E;"%c2eOKcLMC=^(L#Me1`dh'J=,<TdRE
%mFT]],+3q[3g%IW+lmHU?7i=P<lM)=`$+qtOKC"(o-ttB*c,n!;duICd8@4cZC&f8c0:*m!B$-in[W\8BnmUFoJ+`@l8^7Y<I<%k
%(-B=d7$IZJI@a<`4P&M@g5M<k2brS.kD_B'g#@_c&!/`u0.8tG9L4eVU(nB3:rZ'!//rUTKX.I5C@Adu+9HXe><9LgK\.+LZQ"&!
%&+Gs>-cuH66h8Ca(e1>ueb,F8L!#\NS->3JlAn*,>H!5.rl>Db/0*lYI/\Ul0#0Eq/![N)`#]i_R0No]H^kJ9;2?bm'cWs)B_^FO
%UmXtuC>E)gflg=\[3q4H\JTD&G:mr^4O)[@F6E+Y[7.p=R^:!W0M]]PASXJ\L28ota#oumVZ>[`f6Bt'e)gK(4K%E8A"Km.5M_AF
%/#>HHdg=k%][8\LXJ9mp(bXWdaYU+.#EBVIPYi#3/]GgkC^7K]4enY,W\'iIT,D.l(4@b>e/mgHUcMTT7-U\ZOp@U$N?hmumoP?3
%;&&"O>"4F^ffTTJjNF.!lo9,g%Cj7UPA#,KJH3/:AQ7migAI!V.nKq^Im8f84[:+[WEf8PXV9e-b]acXn\"=L9@j0P_YGmOenAh>
%b1LE;Vhf6em!ha2r@]rgXm'Wm^P&I,Wdn_B/;)mYp;Bs7s+'fYWh^=2Es+@%R@9)#']_;\PP8K)1We__BSi]t6;Sp^j:AMU+mH)(
%Yr=?'-7hC.S!;IGS.2W_g6D`/)GOM$OoKRe]1UBMqgMVOjQ;s;qP(=_"=<k6[FVr(>Dbp4lCo\NJop<ll)5fJIn<*/C8JFjU$+F$
%n:=R[/#e`l**(Y'BriiNDUWc[$8rC<\obtsXJ[0^PhnFXJ;StKX/'Do%QLSlQ1Xtt%6[LC2j3o*7t1Kk>jkIGg#RBU+j(]NUEiAI
%oN"C&GUTm>_V&(sL5rQ07Ei;0N,BOq<LN+,X;p61CK\t_@k,DsYpP/XkKARbj>:)m:>8jGhrWJOhA#5+RO3dnn'/8m;N9d;l41bV
%'[g610PuUP^;oLYU:j?nG7?1bm//lr`2TJO]bfe(q7GDsY5`Uk&?5%QG6+YdH>l8l1snpK:#k'^<ACJnAo&mpr6lGh<p]pVR/R;R
%O"[^&FVq?g''tCk,'A$D[if8*fmsG;;bn;OS'%*qX(V<kR11l20$9F;pTZCAFg7IBpp=XS>ed;_8sas_76C@DHFoQ#6^1`hJ=$aZ
%8/*t!s(:Vf04d-Q12Z39X+<&#BqpYVB'H&TAZ'or/;^f<GLa8r&dP(RSZEJ&o8FfmW*@h+-D3+/n;*B$0dTc25m&EaCgWZAeemYG
%&B7RYn:R(&n*-WUjP4%6b%0h8()E3-(;EXSnfGIL&bZPgKn#$1/R30>4BYD/*=s`r"`nN(XK#Cm`qtNtJHn"hlhnVj7QG$B6u,d"
%#r2,3=*n56SF;j$P*jU3D'pt$$17*$X-(=5::532)S\mC`a/^("_fPMQcOi]#[0k*csmU3U]+Pc$$W\.WQ6]UGT>])_;QMnd"SP9
%=#&pt8afS!B0hMPIM@OeECrqJp"Dg3FfK(>P=R?S*Y?KS&Cj0d?9sLta6t!^H+m!#`8e1;B!.3WiAsMH8q#ne951)/?gTELEsV@m
%1a^ndo]mPXkJN@Gp'Bu'$.bS/'@bS?UY@n:Pd>5P@p5uoN2iK:'gVG/*_Rf`ZM'0M?HYJ#=J/`Y3USBe\e\FKd/D*na@fNu]]8h"
%0jXT&p'%;@:Ha$g$5/hh`LOT-h#JeGG?Ft8]hH>@pG+XT<U$;pVGf>@FUf7%g/EI/c3Pr[\]8s>ENMSRYrEF<3eXY?MeAagA_aTf
%9V(XX%qOh1Mj>hG=(8UUNW3Ib77^omGh;"%)^J="A>qAK1#3K;D&9cUi_UUQTCCq.H,]SfC4fb8817Kg]jr97HZXWXETPH-@U*Vg
%m@YKFEP>-X,&DY'*X<iA55GPGb=hS[2f8<urrJ*WM<GVMDt5ZFrh<V1J=co+ea%dtLk0%f<\[Zr5e(E5>>kkCl(+0N2WAlX-$ES3
%@AFk;Gd^D@boV_<m/pl',0R%TpRfggO:ubpcaUGlhi,\iW;p-'e*9Bg>STK3G3CJgA)4#G/,5l[:J)<PQVs&N$;\feB5mp;@59\p
%*TP%";qHh0@MQGSeB8n98VlYs*h")@%+D]R'+em0W'>HF4l5dSISk6E%%uZ2j39jmN.d']DFp0a"PJ3o-E#R9piCYF2tnj05]eZa
%>NDVV32h?bc;^BpMTR\kWhlPpr$:523\]bm5t]+Z%@3>8#rL;eZ4kajGQsD;.qHChf]TsTO3u/W5iP3[r\G9pD6p^>.U4`r^t<fD
%=0ST2ei%@lL8;7`38uD+W2,6/:Yu.O3<k*SQN*O>6SCSjgioo)KLaeL<>`rO)GD_.:/Xq41"!NcK.IA:.cm3H\5kQMg?U<GQ/Z!\
%F];BJhf'_p_+iJ6nd5Pt89#i%dFb&6@DY!#FR@eS\HHgc`K?#s#DH(uXshhb6;G+a\h3q6f5ksr^R_[V0?e[5s7T6<pZI%tn(W?f
%qg\OIT7?gs^]3]1hd4*js5RJdiV3BE\%hq:s7-!Drq(F7nBZU_fAD)UocO5(TDmrUs76'eI/W<M5Q'pCJ,YdaqV1I'rqX>-e,KK$
%L\:h"rq#%ILO]&r^\^7n1oaI~>
%AI9_PrivateDataEnd
