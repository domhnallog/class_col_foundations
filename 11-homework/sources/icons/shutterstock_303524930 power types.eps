%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 8.0
%%AI8_CreatorVersion: 16.0.0
%%For: (In-Finity) ()
%%Title: (fuel.EPS)
%%CreationDate: 8/5/2015 5:43 PM
%%Canvassize: 16383
%%BoundingBox: 0 -1 1134 1133
%%HiResBoundingBox: 0 -0.858398 1133.8584 1133
%%DocumentProcessColors: Cyan Magenta Yellow Black
%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0
%%+ procset Adobe_ColorImage_AI6 1.3 0
%%+ procset Adobe_Illustrator_AI5 1.3 0
%%+ procset Adobe_cshow 2.0 8
%%+ procset Adobe_shading_AI8 1.0 0
%AI5_FileFormat 4.0
%AI3_ColorUsage: Color
%AI7_ImageSettings: 0
%%RGBProcessColor: 0 0 0 ([Registration])
%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) 
%%+ Options: 1 16 0 1 1 1 0 0 0 0 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4
%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 1 0 () 
%AI3_TemplateBox: 567.5 565.5 567.5 565.5
%AI3_TileBox: 280.5488 156.5107 856.5488 975.751
%AI3_DocumentPreview: Header
%AI5_ArtSize: 1133.8584 1133.8584
%AI5_RulerUnits: 1
%AI5_ArtFlags: 0 0 0 1 0 0 1 0 0
%AI5_TargetResolution: 800
%AI5_NumLayers: 1
%AI8_OpenToView: -1215 1536 0.5 1781 947 26 0 0 79 120 0 0
%AI5_OpenViewLayers: 7
%%PageOrigin:0 0
%AI7_GridSettings: 28.3465 20 28.3465 20 1 0 0.8 0.8 0.8 0.9 0.9 0.9
%AI9_Flatten: 0
%AI12_CMSettings: 00.MS
%AI7_Thumbnail: 128 128 8
%%BeginData: 13519 Hex Bytes
%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFD98FF7DA8A8A87DA8A8A87DA8A8A87DA8A8
%FD6FFFA8F8F8F827F827F827F827F827F827F8F87DFD14FFA87DFD15FF7D
%7D527D527D527D7DFD15FFA87D7DA8FD08FF7D7D7DA8FD15FF52F8FD0CA8
%7DFF2727FD10FFA8FFFFFFF827FD04FFA8FD0FFFFD0BF8FD07FF527DFD0A
%FF7DFD04F8A8FD06FF7DFD04F8FD15FF5227A82727F8A87D272752A82727
%277D7DF8FD0FFF52F8A8FFFF27F8FFFFFFF852FD0EFF7DF827FD077D27F8
%7DFD05FF7DF8F8FD0AFF7DFD04F87DFD06FF7DFD04F8A8FD14FFF87D7DF8
%F8F87D7DF8F8F8A8F8F8F8277DF8A8FD0EFF7DF852FFFFF8F8FFFF52F852
%FD0EFF7DF87DFD07FF7DF87DFD04FF52F8F87DFD0AFFA87D527D52A8A8FF
%A8FFA8FF7D52527D52A8A8FD13FF277D52F8F8F8A852F8F827A827F8F8F8
%FFF8A8FD0FFF27F8FFFFA87DFFFFF8F8FD0FFF7DF852FD07FF52F827527D
%FFA8F8F8A8FD09FF52F8FD0527F827F827F827F8FD0527F8F852FD11FFA8
%F8A827F8F8F87D52F8F8F8A8FD04F87D2752FD0BFF52A8FFFFA8A87D5227
%27277D7DA8FFFFA852A8FD0AFF7DF87DFD07FF7DFD04F8FFA8F852FD0AFF
%FD15F827FD11FF7D27A8FD04F8A827F8F8F8A827F8F8F87D2752FD0AFF7D
%F8F852FFFF52FD06F852FFFF52F8F8A8FD0AFF7DF852FD07FF52F87D7DF8
%FFA8F8F8A8FD09FF27FD04F85227FD0FF8FD11FF52F8A827522752A85227
%5227A852272727A87DF8FD0BFF7D27F8A827F8F8A8A8A85227F827A8F8F8
%7DFD0BFF7DF8277DA87D7D7DA87D27F8A87DF8A8A8F8F8F8FD09FFFD05F8
%FFFD0FF827A8FD10FF2752A8A87DA87DFFA8A87DA8A8FF7DA87DFF7D27FD
%0EFF7DF827FFA827F827F8F8F87DA8FD0DFF7DFD0BF87DA8F8FFA8F8F8F8
%A8FD08FF27F8F87DFFFFFFA827FD04F827FD04A87DF8F827FD11FF277D7D
%F8F8F827A8FD04F87D52FD04F8A8F8A8FD0DFF27F8A8A8FD08F8FD0EFF7D
%F82752FD08F8A87DF8A8A8F8F8F8A8FD08FFF8F8F8527DFF7D7DFD05F827
%527D7D7D27F8F827A8FD10FFF8A827F8F8F827A8FD04F87D7DF8F8F827A8
%277DFD08FFA8275252FFF827FF27FD07F827A85227527DFD09FF7DF87DFF
%FD08F87DA8F8FF7DF8F8F8A8FD08FF27FD04F8FF27FD0EF827FD10FF7DF8
%A827F8F8F8527DFD04F8527DFD04F8A82752FD08FF52F8F8F8A8F827A8FD
%09F8A8F8F8F852FD09FF7DF87DA8FD08F87D7DF8A8A8F8F8F8FD09FFFD05
%F852FD0FF827FD10FF7DF8A8FD04F852A8FD04F852A8FD04F87D7D27FD09
%FFA8A8A8FFF8277D27FD07F827FFFFA8FD0BFF7DF87DFFFD08F87DA8F8FF
%7DF852FD0AFF27FD14F827FD10FF52277DFD04F87D7DFD04F8277DFD04F8
%7D7DF8FD0DFF52F827FD08F827FD0EFF7DF87DA8FD08F87D7DF8A8A8F8A8
%FD0AFFF827FD127DF827FD10FF27527DFD04F87D7DFD05F8A8FD04F827A8
%F8FD0BFF52277D27F827FD07F8A82752FD0CFF7DF852FFFD08F87DA8F8FF
%A8F87DFD0AFFF852FD12FF27F8FD10FFF8A8A8FD0452A87DFD04527DFFFD
%04527DA8F87DFD08FFA8F8F8F8FF7DFD08F8A8FFF8F8F8A8FD0AFF7DF87D
%A8FD08F8A87DF8527DF87DFD0AFFF852FD12FFF827A8FD0EFFA8F852A87D
%A87DA87DA87DA87DA87D7D7DA87DA87D7DF87DFD08FFA82752FFFFFFA852
%FD04F827A8FFFFA852F8A8FD0AFF7DF87DFFFD08F87DFFF8F8F827A8FD0A
%FFF852FD12FF27F8FD0FFFA8FD16F852FD09FFA8FFFFFF2727FFA87DA8A8
%FF2752FD0FFF7DF87DA8FD08F87DFFA8527DA8FD0BFFF852FD12FFF827A8
%FD0EFFA8FD16F87DFD0CFF7DF8F8FFFF5227FFFF27F8A8FD0DFF7DF8F827
%27FD09F852FD0FFFF852FD12FF27F8FD10FF7D7D7DA87D7D7DA852FD04F8
%277DA87D7D7DA87DA8A8FD0CFF27F87DFFFFF8F8A8FF7DF827FD0CFFA8FD
%0FF8A8FD0EFFF827A8FFA8FFA8FFA8FFA8FFA8FFA8FFA8FFFFA8F827FD18
%FFA8FD04F852FD15FFA87DFFFFFF27F8FFFFFF7DA8FD0CFF7DFD0FF87DFD
%0EFFFD16F8FD18FF7DFD04F852FD1AFF5252FD11FFA8F827F827F827F827
%F827F827F827F8A8FD0EFF52FD14277DFD19FF527D527D7DFDFCFFFDFCFF
%FDFCFFFD8AFFA8FD1BFF7D7DFD3AFFA8FFA8FD23FF7DF8FD1BFF27F8F827
%A8FD13FFA8FD07FFA8FD19FF5227F8F8F827277DFD20FF7DF8F8A8FD19FF
%27F87DA8F827A8FD0FFFA87DF8F8F852A8FF7D27F8F8F87DFFA852F8F8F8
%52A8FD0CFFA852FD05F827FD04F852FD1EFFF8F8F852FD18FF7DF87DFFFF
%A8F87DFD0EFF7DF8F8F827FD06F827FD07F827F8F8F87DFD0AFFA827F827
%52A8FD04FFA87DF8F827FD1CFF52F827F8F87DFD13FFA87DA8A82727FD04
%FF52F8FF7D7DA8FD0AFFA8F852A8FFA87DF8F827A8FFFF7D27F82752FFFF
%FF52F87DFD09FF7DF8F852FD0AFF27F8F8FD1BFF7DF8FF7DF8F8FD11FFA8
%27FD05F8277DFFFFA827FD06F8A8FD0AFFA87D527DA8FFFFFF7D5252A8FD
%04FF525252A8FD0BFF27F87D52A8FD08FF7D7D52F827FD1AFF52F8FFFF7D
%27FD11FF27F87D7DA827FD04F827F827F8277DA87DF8F8FD08FFA827FD05
%F82752FD05F8275252FD05F827A8FD08FF52F85252F8F8FD07FFA8F8F87D
%27F852FD1AFF27A8FFA87DFD11FFF87DFFFFFF52F87DFD04F8522727FFFF
%FF7DF8A8FD07FF7DF8F87DA87DFD04F827A8A852F8F8F82752A87D27F87D
%FD08FFF8277DF8F8F827FD05FFA827F8F8F8A8F827FD1AFFA852A8A8FD11
%FFA8F852FFFFFF27F8F852A8FF27F8F827FFFFFF7DF8FD09FF7DFD04A8FF
%7D7DA8FFA8A8FFA87DA8A8FF7DFFA87DA8FD07FF52F85227FD04F827FD04
%FF27FD04F85252F87DFD16FFA87DA827F8F8277DA87DFD0FFF27F8FFFF7D
%F8F8A8FFA87DFFA827F87DFFFFF827FD0AFF52F8F8F827A8A87DF8F8F827
%7DFFA852F8F8F852A8FD08FF27F87DFD05F8527D27277D27FD04F8277DF8
%52FD15FF7DFD0AF827FD0EFFA8F85252F8F87DFF27F8F827FF7DF8F85227
%F87DFD08FF7DF8F8F852FD06F82727FD05F8272727F8F852FD07FFF82752
%FD04F82752FD04F87DFD05F87DF827FD15FF7DFD0AF852FD0FFF7DF8F852
%277DA8FD04F87DA8F852F8F87DFD09FFA8527DFFFFFF7D52277DA8FFFFFF
%522727A8FFFFFFA827A8FD06FFA8F827FFA87D52527D27FD04F8527D277D
%7DFFFF27F8FD16FF7DF8F8277D7D27F8F852A8FD0FFF52F8F852F87DA8FD
%04F8A87DF827F8F87DFD0BFFA8272727A8FFFFA87D272752FFFFFF7D5227
%527DFD09FFF827FD06FFFD05F852FD06FFF827A8FD15FFA8F8F827FFFF7D
%F8F852FD0FFFA8F8527DF8F87DFF27F8F852FF7DF8F85252F8A8FD08FFA8
%27FD05F82727FD06F85227FD06F8A8FD07FF2727FD06FF7DFD04F8A8FD05
%FFA8F827FD16FF52F8F827F827F8F8F827FD0FFF27F8FFFF7DF8F87DFFA8
%A8FFA8F8F852FFFF27F8FD08FF7DF8277DFF7D27F8F8F852A8FF52F8F8F8
%277DA8A827F852FD07FFF8F8A8FD06FF7D27527DFD06FF7DF852FD16FF27
%F8272727F82727F8F8A8FD0EFFF87DFFFFFF27F8F827FFA852F8F827FFFF
%FF7DF8A8FD0AFFA87DA8FFFFA8FFA8A87DFD05FFA87DA8FFA8FD08FF7DF8
%7DFD06FF5252527DFD06FF27F87DFD15FFA8F8F8F852A8FF52F8F8F852FD
%0DFFA8F87DFFFFFF522752FD04F87D2752FFFFFF7DF8A8FD08FF7D27F8F8
%F82752A852FD04F8527D7DFD05F87DA8FD07FFA8F8F8FD05FF7DFD04F8FD
%05FFA8F8F8FD16FF7DF8F8F87DFFFFA8F8F8F852FD0EFF27F87DA87D52F8
%27F82727F8F8F827A87D7DF827FD08FF7DF8F8275252FD05F87D5227FD04
%F8277D27F8F87DFD08FF52F852FD04FF52FD04F87DFD04FF27F87DFD16FF
%52F8F87D52F827F87DF8F8F8FD0EFFA827FD05F827A8FFFF7D27FD05F827
%A8FD08FFA852A8FFFFFFA852527DFFFFFFA87D52527DFFFFFF7D527DFD09
%FFF8F852FFFFFFFD05F827FFFFFF52F827FD17FFF8F827FF5227F852FF7D
%F8F87DFD0FFFA8A8A8FF2727FD04FF2727A8A8A8FD0DFF7D27F82752FFFF
%FF52F8F852A8FFFF7D27F8F87DFD0CFFF8F852FFA8FD06F8FFA827F827FD
%16FFA852F8F827F8F8527DF8F827F8F8527DFD12FF7DF87DFFFF7DF852FD
%0EFFA8F8F8F827F8F8F827FD0EF87DFD0AFFA8F8F8F8527D7D527D7D7D27
%F8F827A8FD15FFA8FD10F852FD12FF27F8A87DF827FD0FFF7DF827A8FFA8
%5227F82752FFFF7D27F8F852A8FFA852F87DFD0CFF52F8F8F8FD0427F8F8
%F87DFD17FF7DFD10F852FD12FFA827F8F8F8FD11FFA8FD05FFA8FD07FFA8
%FD07FFA8FD0DFFA87D2727F8F8F8527DFD1AFFFD107DA8FD14FFA87DFDFC
%FFFDFCFFFDFCFFFD6CFFA8A8A8FD39FFA8A8A8FD1BFF527DFD21FF5227FD
%05F87DA8FD33FFA852FD04F827A8FD18FFA8F8F8FD1FFF52F8F8F8FD0427
%F8F8F827A8FD11FF52F8FF27F8A8FD19FF52FD08F852FD14FF7D27527DF8
%F852FFFF7DA8FD18FFA827F8F852FD05FFA87D27F8F8A8FD10FF5252FF7D
%52FD19FF7DFD0AF87DFD11FFA827F8F87D27F8F827A8FFFF527DFD16FFA8
%27F852A8FFA8A87D7DA8FFFFFF52F8F87DFD0FFF52F8FF2727A8FD17FFA8
%FD0CF8A8FD0FFFA8F8F8527D7DFD04F8FF7D7DFF277DFD15FF27F852FFFF
%FF7DF8F8F87DFD04FF7DF8F8FD0FFF27F8FF27F8FD18FF7DFD0CF852FD0F
%FFF852A852F87DF8F8F827FFFF7D7DA827A8FD13FF7DF827FD04FF27F8F8
%F87DFD05FF52F827FD0EFF27F8FF27F8A8FFFFA8F8272727F8A8FD0EFF27
%FD0CF827FD0EFF2727A8F8F8A8A8FD04F8FFFFFF27A82752FD13FFF8F8A8
%FD04FF27F8F8F8FD07FF27F87DFD0DFF27F8FF52F8FFFFFF7D5227525252
%7DFD0EFF27F8F8F87DFD04277D27F8F8F8FD0DFFA827A85252FFFFFFFD04
%27FFFFFF7D277DF8FD12FF7DF827FD04FFA8F8F8F827FD07FF7DF852FD0D
%FF27F8FF27F8A8FFFF52FD05F852FD0EFFF8F8F827FF7D52527DFF27F8F8
%F8A8FD0CFF7D52A827FD04FFA87D7DA8FFFFFFA8277DF87DFD11FF52F8A8
%FD04FF7DF8F8F852FD08FFF8F8FD0DFF27F8FF52F8FFFFFF27FD05F827FD
%0EFF52F8F8F85227F8F82752F8F8F827FD0DFF52FF52FD05FF27F8F852FD
%04FFF87DF87DFD11FF27F8A8FD04FF52F8F8F8272727F827A8FFFFFF27F8
%A8FD0CFF27F8FF27F8A8FFA8FD06F827FD0EFF7DF8F8F8277DF8F85227F8
%F8F87DFD0DFF7DA87DFD04FF7DF8A8FFF87DA8FF7DF852F852FD11FF27F8
%FD05FFFD08F827FD04FF52F8A8FD0CFF27F8FF52F8FFFFA8FD07F8FD0FFF
%27F8F8277DF8F87D27F8F827FD0EFFA8FFA8FF7D2727A8F8A8A8F87D2727
%7D7D7DF87DFD11FF27F8A8FFFFFF7DFD08F8FD05FF27F8A8FD08FFA87DA8
%7D27F87DF8F87DFF7DFD07F87DFD0FFFF8F8F87DF8F85227F8F87DFD11FF
%27F8F8F87D52F8F8527DF8F8F8527D27A8FD11FF52F8A8FD08FF52F8F87D
%FD05FF27F8FD09FFFD0AF8A87DFD07F87DFD0FFF7DF8F87D27F87DF8F852
%FD11FF27FD05F8A8A87DA8FD05F852A8FD12FF52F87DFD08FF27F827FD05
%FFA8F827FD09FF27F87D52FD06F8FF52FD07F852FD10FF27F87D272752F8
%F8FD11FF27FD05F852A8F8277D52FD05F852FD12FFA8F827FD08FFF8F8A8
%FD05FF7DF852FD09FFF8F8FFFF27FD05F8A827FD07F852FD10FF52F85252
%277DF852FD10FFA8FD04F8277DFFA8F8F8FFFF7DFD05F8A8FD12FF27F8A8
%FD06FF7DF852FD05FFA8F8F8A8FD09FF27F87D5227FD05F8A8FD09F8FD10
%FF7DF8FD0452F852FD10FFA8525252A8FFFFFFA8F8F8A8FFFFFF7D7D5252
%A8FD12FF7DF8F8FD06FF52F8FD06FF52F852FD09FFA827FD09F87D7DFD07
%527DA8FD10FF5227FD0452FD19FFA8F8F8FD1CFF27F827FD05FFF87DFD05
%FF52F827A8FD08FFA8FD0DF827F827F827F827F8F8A8FD0FFF5227275227
%52A8FD18FFA8F8F8A8FD1CFF27F8F8A8FFFFA852FD04FFA852F8F8A8FD09
%FFA8FD16F8A8FD0FFF522752275227FD19FFA8F8F8FD1EFF27F8F8277DA8
%A8FFA8A852F8F827A8FD0AFFA8FD16F87DFD0FFF525227522752FD16FF7D
%525252F8F8527D52A8FD1BFF7D27F8F8F827FD05F87DFD0CFFA8FD1652FD
%10FF7D2727275252FD16FF52FD08F827FD1DFFA85227F82727527DFD37FF
%2727FD18FF27FD08F852FD5DFFA8FD18FFA87DA87DA87DA87DA8A8FDFCFF
%FDFCFFFDFCFFFD49FF7D527D7DFD56FFA87D527D527D527D527D527D527D
%527D527D52A8FD11FFA8FD04F8A8FD31FF7DA87DA87DA87DA87DA87DA87D
%A87DA8FD13FFA827FD13F87DFD0CFFA87D7D7D27FD04F8527D7D52A8FD0E
%FFA8FD047DFD07FFA87D527D7DA8FD0CFFA8FD10F8A8FD12FFA8F852FD0F
%A8FF7DF852FD0BFFA827FD0DF8A8FD0CFF5227527D7D7DF852FD04FF5227
%527D7D7D2752FD0CFFF8F8F827F827FD09F827A8FD12FF7DF87DA8F8FD0D
%2752FFF852FD0BFF52F827527D527D527D527D527D27F852FD0CFFF8F87D
%7D7D522727FD04FF52F87D7DA85227F8FD0DFFF827A8FF52FD09F8A8FD13
%FFA8F87D52FD0EF827A8F852FD0BFF52F87DFD0AFFA8F852FD0CFFFD05F8
%7D7D7D27522752527D5227F8F8F827A8FD0CFFF8F8FFFF7DFD09F8FD14FF
%7DF85252FD0EF827A8F87DFD0BFF7DF87DFD0AFF7DF827FD0BFFA8FD04F8
%7D27F8277D527D5252F8277DFD04F8A8FD0CFFF827A8FF7DFD09F8A8FD13
%FFA8F87D52FD04F8277DFFFFA852FD04F827A8F852FD0BFF52F87DFD0AFF
%A8F852FD0BFFA8F8F8F8277DF827FD06FF52F8A827F8F8F87DFD0CFFF8F8
%FFFF7DFD09F8FD14FF7DF85252F8F8F827FD06FF52F8F8F827A8F87DFD0B
%FF7DF87DFD04FFA8FFFFFFA8FF7DF827FD0BFF7DFD04F8A827F8F8272727
%FD04F87D27F8F8F87DFD0CFFF827A8FF7DFD09F8A8FD13FFA8F87D52F8F8
%27FD08FF52F8F827A8F852FD0BFF52F87D7DF8272727F82727277DA8F852
%FD0BFF7DF8F8F8277D525252FD0627F87D27F8F8F852FD0CFFF827FFFF7D
%FD09F8FD14FF7DF85252F8F852FD08FFA8F8F8F8A8F852FD0BFF7DF87D52
%FD08F8527DF827FD0BFF27F8F8F8277DF8F8F827F827FD04F87D27F8F8F8
%27FD0BFF7DF8277DA852FD09F87DFD13FFA8F87D52F8F8A8FF277DFFFFFF
%F8A8FF27F827A8F852FD0BFF52F87D7DFD08F852A8F852FD0BFF27F8F8F8
%527DFD0AF87D52FD04F8FD0AFFA8FD10F8A8FD12FF7DF8527DF8F87DFF52
%A8FFFFA852A8FFF8F827A8F852FD0BFF7DF87DFF7D7DA87D7D7DA87DFF7D
%F827FD0BFFFD04F8527DFD0AF8527DFD04F87DFD09FFA8FD10F8A8FD12FF
%A8F87D52F8F852FD08FF7DF8F827A8F852FD0BFF52F87DA8FD08277DA8F8
%52FD0AFFA827F8F8F87D52FD0AF8527DFD04F8A8FD0AFFA8F8F8FFFF7DFD
%09F8FD14FF7DF85252F8F8F8A8FD07FF27F8F827A8F87DFD0BFF7DF87D52
%FD08F8527DF827FD0BFFA87D52527D27FD0BF8A827527DFD0DFFF827FFFF
%7DFD09F8A8FD13FFA8F87D52FD04F8A8FD05FF52F8F8F827A8F852FD0BFF
%52F87D7DFD08F852A8F852FD10FFFD0CF8A8FD10FFF8F8FFFF7DFD09F8FD
%14FF7DF85252FD05F8527D7D5227FD04F827A8F87DFD0BFF7DF87DFFFD04
%7DA87D7D7DFF7DF827FD0FFF7DFD0CF87DFD10FFF827A8FF7DFD09F8A8FD
%13FFA8F87D52FD0EF827A8F852FD0BFF52F87DA8F8FD07277DA8F852FD0F
%FF7DFD0CF852FD10FFF8F8FFFF7DFD09F8FD14FF7DF85252FD0FF8A8F852
%FD0BFF7DF87D52FD08F8527DF827FD0FFF27FD0CF827FD10FFF827FFFF7D
%FD09F8FD14FFA8F87DA852527D527D527D527D527D527D52A8A8F852FD0B
%FF52F87D7DFD08F852A8F852FD0FFFA8FD0CF87DFD0FFF7DF8F8A8A852FD
%09F8A8FD13FF7DF8F8FD107D52F852FD0BFF7DF87DFFA87DA87DA87DA87D
%FF7DF827FD11FF7D522727F8272727527DA8FD0FFFA8FD10F8A8FD13FF27
%FD12F827A8FD0BFF52F8F8FD04527D5252527D5227F852FD2CFFF8F8F827
%F827F827F827F827F827F827A8FD14FF7D7D7DA87D7D7DA87D7D7DA87D7D
%7DA87D7DA8FD0DFFFD0DF827A8FD2DFFA8FFA8FFA8FFA8FFA8FFA8FFA8FF
%A8FD36FF7DA87DA87DA87DA87DA87DA8FDFCFFFDFCFFFDFCFFFDD4FFFF
%%EndData
%%EndComments
%%BeginProlog
%%BeginResource: procset Adobe_level2_AI5 1.2 0
%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)
%%Version: 1.2 0
%%CreationDate: (04/10/93) ()
%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)
userdict /Adobe_level2_AI5 26 dict dup begin
	put
	/packedarray where not
	{
		userdict begin
		/packedarray
		{
			array astore readonly
		} bind def
		/setpacking /pop load def
		/currentpacking false def
	 end
		0
	} if
	pop
	userdict /defaultpacking currentpacking put true setpacking
	/initialize
	{
		Adobe_level2_AI5 begin
	} bind def
	/terminate
	{
		currentdict Adobe_level2_AI5 eq
		{
		 end
		} if
	} bind def
	mark
	/setcustomcolor where not
	{
		/findcmykcustomcolor
		{
			(AI8_CMYK_CustomColor)
			6 packedarray
		} bind def
		/findrgbcustomcolor
		{
			(AI8_RGB_CustomColor)
			5 packedarray
		} bind def
		/setcustomcolor
		{
			exch 
			aload pop dup
			(AI8_CMYK_CustomColor) eq
			{
				pop pop
				4
				{
					4 index mul
					4 1 roll
				} repeat
				5 -1 roll pop
				setcmykcolor
			}
			{
				dup (AI8_RGB_CustomColor) eq
				{
					pop pop
					3
					{
						1 exch sub
						3 index mul 
						1 exch sub
						3 1 roll
					} repeat
					4 -1 roll pop
					setrgbcolor
				}
				{
					pop
					4
					{
						4 index mul 4 1 roll
					} repeat
					5 -1 roll pop
					setcmykcolor
				} ifelse
			} ifelse
		}
		def
	} if
	/setAIseparationgray
	{
		false setoverprint
		0 setgray
		/setseparationgray where{
			pop setseparationgray
		}{
			/setcolorspace where{
				pop
				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace
				1 exch sub setcolor
			}{
				setgray
			}ifelse
		}ifelse
	} def
	
	/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def
	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put
	userdict /level2?
	systemdict /languagelevel known dup
	{
		pop systemdict /languagelevel get 2 ge
	} if
	put
/level2ScreenFreq
{
 begin
		60
		HalftoneType 1 eq
		{
			pop Frequency
		} if
		HalftoneType 2 eq
		{
			pop GrayFrequency
		} if
		HalftoneType 5 eq
		{
			pop Default level2ScreenFreq
		} if
 end
} bind def
userdict /currentScreenFreq  
	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse put
level2? not
	{
		/setcmykcolor where not
		{
			/setcmykcolor
			{
				exch .11 mul add exch .59 mul add exch .3 mul add
				1 exch sub setgray
			} def
		} if
		/currentcmykcolor where not
		{
			/currentcmykcolor
			{
				0 0 0 1 currentgray sub
			} def
		} if
		/setoverprint where not
		{
			/setoverprint /pop load def
		} if
		/selectfont where not
		{
			/selectfont
			{
				exch findfont exch
				dup type /arraytype eq
				{
					makefont
				}
				{
					scalefont
				} ifelse
				setfont
			} bind def
		} if
		/cshow where not
		{
			/cshow
			{
				[
				0 0 5 -1 roll aload pop
				] cvx bind forall
			} bind def
		} if
	} if
	cleartomark
	/anyColor?
	{
		add add add 0 ne
	} bind def
	/testColor
	{
		gsave
		setcmykcolor currentcmykcolor
		grestore
	} bind def
	/testCMYKColorThrough
	{
		testColor anyColor?
	} bind def
	userdict /composite?
	1 0 0 0 testCMYKColorThrough
	0 1 0 0 testCMYKColorThrough
	0 0 1 0 testCMYKColorThrough
	0 0 0 1 testCMYKColorThrough
	and and and
	put
	composite? not
	{
		userdict begin
		gsave
		/cyan? 1 0 0 0 testCMYKColorThrough def
		/magenta? 0 1 0 0 testCMYKColorThrough def
		/yellow? 0 0 1 0 testCMYKColorThrough def
		/black? 0 0 0 1 testCMYKColorThrough def
		grestore
		/isCMYKSep? cyan? magenta? yellow? black? or or or def
		/customColor? isCMYKSep? not def
	 end
	} if
 end defaultpacking setpacking
%%EndResource
%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0
userdict /Adobe_ColorImage_AI6 known not
{
	userdict /Adobe_ColorImage_AI6 53 dict put 
} if
userdict /Adobe_ColorImage_AI6 get begin
/initialize { 
	Adobe_ColorImage_AI6 begin
	Adobe_ColorImage_AI6 {
		dup type /arraytype eq {
			dup xcheck {
				bind
			} if
		} if
		pop pop
	} forall
} def
/terminate { end } def
currentdict /Adobe_ColorImage_AI6_Vars known not {
	/Adobe_ColorImage_AI6_Vars 41 dict def
} if
Adobe_ColorImage_AI6_Vars begin
	/plateindex -1 def
	/_newproc null def
	/_proc1 null def
	/_proc2 null def
	/sourcearray 4 array def
	/_ptispace null def
	/_ptiname null def
	/_pti0 0 def
	/_pti1 0 def
	/_ptiproc null def
	/_ptiscale 0 def
	/_pticomps 0 def
	/_ptibuf 0 string def
	/_gtigray 0 def
	/_cticmyk null def
	/_rtirgb null def
	/XIEnable true def
	/XIType 0 def
	/XIEncoding 0 def
	/XICompression 0 def
	/XIChannelCount 0 def
	/XIBitsPerPixel 0 def
	/XIImageHeight 0 def
	/XIImageWidth 0 def
	/XIImageMatrix null def
	/XIRowBytes 0 def
	/XIFile null def
	/XIBuffer1 null def
	/XIBuffer2 null def
	/XIBuffer3 null def
	/XIDataProc null def
	/XIColorSpace /DeviceGray def
	/XIColorValues 0 def
	/XIPlateList false def
end
/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def
/ci6image systemdict /image get def
/ci6curtransfer systemdict /currenttransfer get def
/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def
/ci6foureq {
	4 index ne {
		pop pop pop false
	}{
		4 index ne {
			pop pop false
		}{
			4 index ne {
				pop false
			}{
				4 index eq
			} ifelse
		} ifelse
	} ifelse
} def
/ci6testplate {
	Adobe_ColorImage_AI6_Vars begin
		/plateindex -1 def
		/setcmykcolor where {
			pop
			gsave
			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub
			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub
			grestore
			1 0 0 0 ci6foureq { 
				/plateindex 0 def
			}{
				0 1 0 0 ci6foureq { 
					/plateindex 1 def
				}{
					0 0 1 0 ci6foureq {
						/plateindex 2 def
					}{
						0 0 0 1 ci6foureq { 
							/plateindex 3 def
						}{
							0 0 0 0 ci6foureq {
								/plateindex 5 def
							} if
						} ifelse
					} ifelse
				} ifelse
			} ifelse
			pop pop pop pop
		} if
		plateindex
 end
} def
/ci6concatprocs {
	/packedarray where {
		pop dup type /packedarraytype eq 2 index type
		/packedarraytype eq or
	}{
		false
	} ifelse
	{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		_proc1 aload pop
		_proc2 aload pop
		_proc1 length
		_proc2 length add
		packedarray cvx
	}{
		/_proc2 exch cvlit def
		/_proc1 exch cvlit def
		/_newproc _proc1 length _proc2 length add array def
		_newproc 0 _proc1 putinterval
		_newproc _proc1 length _proc2 putinterval
		_newproc cvx
	} ifelse
} def
/ci6istint {
	type /arraytype eq 
} def
/ci6isspot {
	dup type /arraytype eq {
		dup length 1 sub get /Separation eq
	}{
		pop false
	} ifelse
} def
/ci6spotname {
	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse
} def
/ci6altspace {
	aload pop pop pop ci6colormake
} def
/ci6numcomps {
	dup /DeviceGray eq {
		pop 1
	}{
		dup /DeviceRGB eq {
			pop 3
		}{
			/DeviceCMYK eq {
				4
			}{
				1
			} ifelse
		} ifelse
	} ifelse
} def
/ci6marksplate {
	dup /DeviceGray eq {
		pop plateindex 3 eq
	}{
		dup /DeviceRGB eq {
			pop plateindex 5 ne
		}{
			dup /DeviceCMYK eq {
				pop plateindex 5 ne
			}{
				dup ci6isspot {
					/findcmykcustomcolor where {
						pop
						dup length 2 sub get
						0.1 0.1 0.1 0.1 5 -1 roll
						findcmykcustomcolor 1 setcustomcolor
						systemdict /currentgray get exec
						1 ne
					}{
						pop plateindex 5 ne
					} ifelse
				}{
					pop plateindex 5 ne
				} ifelse
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colormake {
	dup ci6numcomps
	exch 1 index 2 add 1 roll
	dup 1 eq {pop}{array astore} ifelse
	exch
} def
/ci6colorexpand {
	dup ci6spotname exch
	dup ci6istint {
		ci6altspace
		exch 4 1 roll
	}{
		1 3 1 roll
	} ifelse
} def
/ci6colortint {
	dup /DeviceGray eq {
		3 1 roll 1 exch sub mul 1 exch sub exch
	}{
		dup /DeviceRGB eq {
			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch
		}{
			dup /DeviceCMYK eq {
				3 1 roll {1 index mul exch} forall pop 4 array astore exch
			}{
				3 1 roll mul exch
			} ifelse
		} ifelse
	} ifelse
} def
/ci6colortocmyk {
	dup /DeviceGray eq {
		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore
	}{
		dup /DeviceRGB eq {
			pop aload pop _rgbtocmyk 4 array astore
		}{
			dup /DeviceCMYK eq {
				pop
			}{
				ci6altspace ci6colortint ci6colortocmyk
			} ifelse
		} ifelse
	} ifelse
} def
/ci6makeimagedict {
	7 dict begin
		/ImageType 1 def
		/Decode exch def
		/DataSource exch def
		/ImageMatrix exch def
		/BitsPerComponent exch def
		/Height exch def
		/Width exch def
	currentdict end
} def
/ci6stringinvert {
	0 1 2 index length 1 sub {
		dup 2 index exch get 255 exch sub 2 index 3 1 roll put
	} for
} def
/ci6stringknockout {
	0 1 2 index length 1 sub {
		255 2 index 3 1 roll put
	} for
} def
/ci6stringapply {
	0 1 4 index length 1 sub {
		dup
		4 index exch get
		3 index 3 1 roll
		3 index exec
	} for
	pop exch pop
} def
/ci6walkrgbstring {
	0 3 index
	dup length 1 sub 0 3 3 -1 roll {
		3 getinterval {} forall
		5 index exec
		3 index
	} for
	
	 5 {pop} repeat
} def
/ci6walkcmykstring
{
	0 3 index
	dup length 1 sub 0 4 3 -1 roll {
		4 getinterval {} forall
		
		6 index exec
		
		3 index
		
	} for
	
	5 { pop } repeat
	
} def
/ci6putrgbtograystr
{
	.11 mul exch
	
	.59 mul add exch
	
	.3 mul add
	
	cvi 3 copy put
	
	pop 1 add
} def
/ci6putcmyktograystr
{
	exch .11 mul add
	
	exch .59 mul add
	
	exch .3 mul add
	
	dup 255 gt { pop 255 } if
	
	255 exch sub cvi 3 copy put
	
	pop 1 add
} def
/ci6rgbtograyproc {	
	Adobe_ColorImage_AI6_Vars begin 
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putrgbtograystr load exch
		ci6walkrgbstring
 end
} def
/ci6cmyktograyproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		XIBuffer3
		dup 3 1 roll 
		
		/ci6putcmyktograystr load exch
		ci6walkcmykstring
 end
} def
/ci6separatecmykproc {	
	Adobe_ColorImage_AI6_Vars begin
		sourcearray 0 get exec
		
		XIBuffer3
		
		0 2 index
		
		plateindex 4 2 index length 1 sub {
			get 255 exch sub
			
			3 copy put pop 1 add
			
			2 index
		} for
		pop pop exch pop
 end
} def
	
/ci6compositeimage {
	dup 1 eq {
		pop pop image
	}{
		/ci6colorimage load null ne {
			ci6colorimage
		}{
			3 1 roll pop
			sourcearray 0 3 -1 roll put
			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load
			image
		} ifelse
	} ifelse
} def
/ci6knockoutimage {
	gsave
	0 ci6curtransfer exec 1 ci6curtransfer exec
	eq {
		0 ci6curtransfer exec 0.5 lt
	}{
		0 ci6curtransfer exec 1 ci6curtransfer exec gt
	} ifelse
	{{pop 0}}{{pop 1}} ifelse
	systemdict /settransfer get exec
	ci6compositeimage
	grestore
} def
/ci6drawimage {
	ci6testplate -1 eq {
		pop ci6compositeimage
	}{
		dup type /arraytype eq {
			dup length plateindex gt {plateindex get}{pop false} ifelse
		}{
			{
				true
			}{
				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse
			} ifelse
		} ifelse
		{
			dup 1 eq {
				pop pop ci6image
			}{
				dup 3 eq {
					ci6compositeimage
				}{
					pop pop
					sourcearray 0 3 -1 roll put
					/ci6separatecmykproc load
					ci6image
				} ifelse
			} ifelse
		}{
			ci6curoverprint {
				7 {pop} repeat
			}{
				ci6knockoutimage
			} ifelse
		} ifelse
	} ifelse
} def
/ci6proctintimage {
	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store
	/_pticomps _ptispace ci6numcomps store
	/_ptiscale _pti1 _pti0 sub store
	level2? {
		_ptiname length 0 gt version cvr 2012 ge and {
			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace
			[_pti0 _pti1] ci6makeimagedict ci6image
		}{
			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace
			[0 255] ci6makeimagedict ci6image
		} ifelse
	}{
		_pticomps 1 eq {
			{
				dup
				{
					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put
				} ci6stringapply
			} ci6concatprocs ci6image
		}{
			{
				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse
				_ptibuf {
					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc
					_pticomps 2 add -2 roll
					_pticomps 1 sub -1 0 {
						1 index add 2 index exch
						5 -1 roll
						255 mul cvi put
					} for
					pop pop
				} ci6stringapply
			} ci6concatprocs false _pticomps
			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse
		} ifelse
	} ifelse
} def
/ci6graytintimage {
	/_gtigray 5 -1 roll store
	{1 _gtigray sub mul 1 exch sub} 4 1 roll
	/DeviceGray ci6proctintimage
} def
/ci6cmyktintimage {
	/_cticmyk 5 -1 roll store
	{_cticmyk {1 index mul exch} forall pop} 4 1 roll
	/DeviceCMYK ci6proctintimage
} def
/ci6rgbtintimage {
	/_rtirgb 5 -1 roll store
	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll
	/DeviceRGB ci6proctintimage
} def
/ci6tintimage {
	ci6testplate -1 eq {
		ci6colorexpand
		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll
		dup /DeviceGray eq {
			pop ci6graytintimage
		}{
			dup /DeviceRGB eq {
				pop ci6rgbtintimage
			}{
				pop ci6cmyktintimage
			} ifelse
		} ifelse
	}{
		dup ci6marksplate {
			plateindex 5 lt {
				ci6colortocmyk plateindex get
				dup 0 eq ci6curoverprint and {
					7 {pop} repeat
				}{
					1 exch sub
					exch {1 0}{0 1} ifelse () ci6graytintimage
				} ifelse
			}{
				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage
			} ifelse
		}{
			ci6curoverprint {
				8 {pop} repeat
			}{
				pop pop pop
				{pop 1} 0 1 () /DeviceGray ci6proctintimage
			} ifelse
		} ifelse
	} ifelse
} def
/XINullImage {
} def
/XIImageMask {
	XIImageWidth XIImageHeight false
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	imagemask
} def
/XIImageTint {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	XIType 3 eq XIColorValues XIColorSpace ci6tintimage
} def
/XIImage {
	XIImageWidth XIImageHeight XIBitsPerPixel
	[XIImageWidth 0 0 XIImageHeight neg 0 0]
	/XIDataProc load
	false XIChannelCount XIPlateList ci6drawimage
} def
/XG {
	pop pop
} def
/XF {
	13 {pop} repeat
} def
/Xh {
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		/XIImageMatrix exch def
		0 0 moveto
		XIImageMatrix concat
		XIImageWidth XIImageHeight scale
		
		/_lp /null ddef
		_fc
		/_lp /imagemask ddef
 end
} def
/XH {
	Adobe_ColorImage_AI6_Vars begin
		grestore
 end
} def
/XIEnable {
	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put
} def
/XC {
	Adobe_ColorImage_AI6_Vars begin
		ci6colormake
		/XIColorSpace exch def
		/XIColorValues exch def
 end
} def
/XIPlates {
	Adobe_ColorImage_AI6_Vars begin
		/XIPlateList exch def
 end
} def
/XI
{
	Adobe_ColorImage_AI6_Vars begin
		gsave
		/XIType exch def
		cvi dup
		256 idiv /XICompression exch store
		256 mod /XIEncoding exch store
		pop pop
		/XIChannelCount exch def
		/XIBitsPerPixel exch def
		/XIImageHeight exch def
		/XIImageWidth exch def
		pop pop pop pop
		/XIImageMatrix exch def
		XIBitsPerPixel 1 eq {
			XIImageWidth 8 div ceiling cvi
		}{
			XIImageWidth XIChannelCount mul
		} ifelse
		/XIRowBytes exch def
		XIEnable {
			/XIBuffer3 XIImageWidth string def
			XICompression 0 eq {
				/XIBuffer1 XIRowBytes string def
				XIEncoding 0 eq {
					{currentfile XIBuffer1 readhexstring pop}
				}{
					{currentfile XIBuffer1 readstring pop}
				} ifelse
			}{
				/XIBuffer1 256 string def
				/XIBuffer2 XIRowBytes string def
				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}
				/ASCII85Decode filter /DCTDecode filter
				/XIFile exch def
				{XIFile XIBuffer2 readstring pop}
			} ifelse
			/XIDataProc exch def
			
			XIType 1 ne {
				0 setgray
			} if
			XIType 1 eq {
				XIImageMask
			}{
				XIType 2 eq XIType 3 eq or {
					XIImageTint
				}{
					XIImage
				} ifelse
			} ifelse
		}{
			XINullImage
		} ifelse
		/XIPlateList false def
		grestore
 end
} def
end
%%EndProcSet
%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0
%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)
%%Version: 1.3 0
%%CreationDate: (3/7/1994) ()
%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_Illustrator_AI5_vars 112 dict dup begin
put
/_?cmyk false def
/_eo false def
/_lp /none def
/_pf
{
} def
/_ps
{
} def
/_psf
{
} def
/_pss
{
} def
/_pjsf
{
} def
/_pjss
{
} def
/_pola 0 def
/_doClip 0 def
/cf currentflat def
/_lineorientation 0 def
/_charorientation 0 def
/_yokoorientation 0 def
/_tm matrix def
/_renderStart
[
/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0
] def
/_renderEnd
[
null null null null /i1 /i1 /i1 /i1
] def
/_render -1 def
/_shift [0 0] def
/_ax 0 def
/_ay 0 def
/_cx 0 def
/_cy 0 def
/_leading
[
0 0
] def
/_ctm matrix def
/_mtx matrix def
/_sp 16#020 def
/_hyphen (-) def
/_fontSize 0 def
/_fontAscent 0 def
/_fontDescent 0 def
/_fontHeight 0 def
/_fontRotateAdjust 0 def
/Ss 256 string def
Ss 0 (fonts/) putinterval
/_cnt 0 def
/_scale [1 1] def
/_nativeEncoding 0 def
/_useNativeEncoding 0 def
/_tempEncode 0 def
/_pntr 0 def
/_tDict 2 dict def
/_hfname 100 string def
/_hffound false def
/Tx
{
} def
/Tj
{
} def
/CRender
{
} def
/_AI3_savepage
{
} def
/_gf null def
/_cf 4 array def
/_rgbf 3 array def
/_if null def
/_of false def
/_fc
{
} def
/_gs null def
/_cs 4 array def
/_rgbs 3 array def
/_is null def
/_os false def
/_sc
{
} def
/_pd 1 dict def
/_ed 15 dict def
/_pm matrix def
/_fm null def
/_fd null def
/_fdd null def
/_sm null def
/_sd null def
/_sdd null def
/_i null def
/_lobyte 0 def
/_hibyte 0 def
/_cproc null def
/_cscript 0 def
/_hvax 0 def
/_hvay 0 def
/_hvwb 0 def
/_hvcx 0 def
/_hvcy 0 def
/_bitfont null def
/_bitlobyte 0 def
/_bithibyte 0 def
/_bitkey null def
/_bitdata null def
/_bitindex 0 def
/discardSave null def
/buffer 256 string def
/beginString null def
/endString null def
/endStringLength null def
/layerCnt 1 def
/layerCount 1 def
/perCent (%) 0 get def
/perCentSeen? false def
/newBuff null def
/newBuffButFirst null def
/newBuffLast null def
/clipForward? false def
end
userdict /Adobe_Illustrator_AI5 known not {
	userdict /Adobe_Illustrator_AI5 100 dict put
} if
userdict /Adobe_Illustrator_AI5 get begin
/initialize
{
	Adobe_Illustrator_AI5 dup begin
	Adobe_Illustrator_AI5_vars begin
	/_aicmykps where {pop /_?cmyk _aicmykps def}if
	discardDict
	{
		bind pop pop
	} forall
	dup /nc get begin
	{
		dup xcheck 1 index type /operatortype ne and
		{
			bind
		} if
		pop pop
	} forall
 end
	newpath
} def
/terminate
{
 end
 end
} def
/_
null def
/ddef
{
	Adobe_Illustrator_AI5_vars 3 1 roll put
} def
/xput
{
	dup load dup length exch maxlength eq
	{
		dup dup load dup
		length 2 mul dict copy def
	} if
	load begin
	def
 end
} def
/npop
{
	{
		pop
	} repeat
} def
/hswj
{
	dup stringwidth 3 2 roll
	{
		_hvwb eq { exch _hvcx add exch _hvcy add } if
		exch _hvax add exch _hvay add
	} cforall
} def
/vswj
{
	0 0 3 -1 roll
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			dup cstring stringwidth 5 2 roll
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			4 -1 roll sub exch
			3 -1 roll sub exch
		}
		{
			_hvwb eq { exch _hvcy sub exch _hvcx sub } if
			exch _hvay sub exch _hvax sub
			_fontHeight sub
		} ifelse
	} cforall
} def
/swj
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hswj } { vswj } ifelse
} def
/sw
{
	0 0 0 6 3 roll swj
} def
/vjss
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			gsave
			false charpath currentpoint
			5 index setmatrix stroke
			grestore
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			gsave
			2 index false charpath
			6 index setmatrix stroke
			grestore
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjss
{
	4 1 roll
	{
		dup cstring
		gsave
		false charpath currentpoint
		5 index setmatrix stroke
		grestore
		moveto
		_sp eq
		{
			5 index 5 index rmoveto
		} if
		2 copy rmoveto
	} cforall
	6 npop
} def
/jss
{
	_lineorientation 0 eq { hjss } { vjss } ifelse
} def
/ss
{
	0 0 0 7 3 roll jss
} def
/vjsp
{
	4 1 roll
	{
		dup cstring
		dup length 1 eq
		_charorientation 1 eq
		and
		{
			-90 rotate
			currentpoint
			_fontRotateAdjust add
			moveto
			false charpath
            currentpoint
			_fontRotateAdjust sub
			moveto
			_sp eq
			{
				5 index 5 index rmoveto
			} if
			2 copy rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			5 index sub
			3 index _sp eq
			{
				9 index sub
			} if
	
			currentpoint
			exch 4 index stringwidth pop 2 div sub
			exch _fontAscent sub
			moveto
	
			2 index false charpath
	
			moveto pop pop
		} ifelse
	} cforall
	6 npop
} def
/hjsp
{
    4 1 roll
    {
        dup cstring
        false charpath
        _sp eq
        {
            5 index 5 index rmoveto
        } if
        2 copy rmoveto
    } cforall
    6 npop
} def
/jsp
{
	matrix currentmatrix
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/sp
{
    matrix currentmatrix
    0 0 0 7 3 roll
    _lineorientation 0 eq {hjsp} {vjsp} ifelse
} def
/pl
{
	transform
	0.25 sub round 0.25 add exch
	0.25 sub round 0.25 add exch
	itransform
} def
/setstrokeadjust where
{
	pop true setstrokeadjust
	/c
	{
		curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll curveto
	} def
	/V
	/v load def
	/y
	{
		2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		lineto
	} def
	/L
	/l load def
	/m
	{
		moveto
	} def
}
{
	/c
	{
		pl curveto
	} def
	/C
	/c load def
	/v
	{
		currentpoint 6 2 roll pl curveto
	} def
	/V
	/v load def
	/y
	{
		pl 2 copy curveto
	} def
	/Y
	/y load def
	/l
	{
		pl lineto
	} def
	/L
	/l load def
	/m
	{
		pl moveto
	} def
} ifelse
/d
{
	setdash
} def
/cf
{
} def
/i
{
	dup 0 eq
	{
		pop cf
	} if
	setflat
} def
/j
{
	setlinejoin
} def
/J
{
	setlinecap
} def
/M
{
	setmiterlimit
} def
/w
{
	setlinewidth
} def
/XR
{
	0 ne
	/_eo exch ddef
} def
/H
{
} def
/h
{
	closepath
} def
/N
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			_eo {eoclip} {clip} ifelse /_doClip 0 ddef
		} if
		newpath
	}
	{
		/CRender
		{
			N
		} ddef
	} ifelse
} def
/n
{
	N
} def
/F
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc
			/_doClip 0 ddef
		}
		{
			_pf
		} ifelse
	}
	{
		/CRender
		{
			F
		} ddef
	} ifelse
} def
/f
{
	closepath
	F
} def
/S
{
	_pola 0 eq
	{
		_doClip 1 eq
		{
			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			_ps
		} ifelse
	}
	{
		/CRender
		{
			S
		} ddef
	} ifelse
} def
/s
{
	closepath
	S
} def
/B
{
	_pola 0 eq
	{
		_doClip 1 eq
		gsave F grestore
		{
			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc
			/_doClip 0 ddef
		}
		{
			S
		} ifelse
	}
	{
		/CRender
		{
			B
		} ddef
	} ifelse
} def
/b
{
	closepath
	B
} def
/W
{
	/_doClip 1 ddef
} def
/*
{
	count 0 ne
	{
		dup type /stringtype eq
		{
			pop
		} if
	} if
	newpath
} def
/u
{
} def
/U
{
} def
/q
{
	_pola 0 eq
	{
		gsave
	} if
} def
/Q
{
	_pola 0 eq
	{
		grestore
	} if
} def
/*u
{
	_pola 1 add /_pola exch ddef
} def
/*U
{
	_pola 1 sub /_pola exch ddef
	_pola 0 eq
	{
		CRender
	} if
} def
/D
{
	pop
} def
/*w
{
} def
/*W
{
} def
/`
{
	/_i save ddef
	clipForward?
	{
		nulldevice
	} if
	6 1 roll 4 npop
	concat pop
	userdict begin
	/showpage
	{
	} def
	0 setgray
	0 setlinecap
	1 setlinewidth
	0 setlinejoin
	10 setmiterlimit
	[] 0 setdash
	/setstrokeadjust where {pop false setstrokeadjust} if
	newpath
	0 setgray
	false setoverprint
} def
/~
{
 end
	_i restore
} def
/_rgbtocmyk
{
	3
	{
		1 exch sub 3 1 roll
	} repeat
	3 copy 1 4 1 roll
	3
	{
		3 index 2 copy gt
		{
			exch
		} if
		pop 4 1 roll
	} repeat
	pop pop pop
	4 1 roll
	3
	{
		3 index sub
		3 1 roll
	} repeat
	4 -1 roll
} def
/setrgbfill
{
	_rgbf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_rgbf aload pop setrgbcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/setrgbstroke
{
	_rgbs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_rgbs aload pop setrgbcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/O
{
	0 ne
	/_of exch ddef
	/_lp /none ddef
} def
/R
{
	0 ne
	/_os exch ddef
	/_lp /none ddef
} def
/g
{
	/_gf exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/G
{
	/_gs exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/k
{
	_cf astore pop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_cf aload pop setcmykcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/K
{
	_cs astore pop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_cs aload pop setcmykcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xa
{
	_?cmyk {
		3 npop k
	}{
		setrgbfill 4 npop
	} ifelse
} def
/XA
{
	_?cmyk {
		3 npop K
	}{
		setrgbstroke 4 npop
	} ifelse
} def
/Xs
{
	/_gf exch ddef
	5 npop
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_gf setAIseparationgray
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XS
{
	/_gs exch ddef
	5 npop
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_gs setAIseparationgray
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/Xx
{
	exch
	/_gf exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/XX
{
	exch
	/_gs exch ddef
	0 eq {
		findcmykcustomcolor
	}{
		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse
		{
			4 1 roll 3 npop
			findcmykcustomcolor
		}{
			8 -4 roll 4 npop
			findrgbcustomcolor
		} ifelse
	} ifelse
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/x
{
	/_gf exch ddef
	findcmykcustomcolor
	/_if exch ddef
	/_fc
	{
		_lp /fill ne
		{
			_of setoverprint
			_if _gf 1 exch sub setcustomcolor
			/_lp /fill ddef
		} if
	} ddef
	/_pf
	{
		_fc
		_eo {eofill} {fill} ifelse
	} ddef
	/_psf
	{
		_fc
		hvashow
	} ddef
	/_pjsf
	{
		_fc
		hvawidthshow
	} ddef
	/_lp /none ddef
} def
/X
{
	/_gs exch ddef
	findcmykcustomcolor
	/_is exch ddef
	/_sc
	{
		_lp /stroke ne
		{
			_os setoverprint
			_is _gs 1 exch sub setcustomcolor
			/_lp /stroke ddef
		} if
	} ddef
	/_ps
	{
		_sc
		stroke
	} ddef
	/_pss
	{
		_sc
		ss
	} ddef
	/_pjss
	{
		_sc
		jss
	} ddef
	/_lp /none ddef
} def
/XK
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		K
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		XA
	} ifelse
} def
/Xk
{
	3 -1 roll pop
	0 eq
	{
		1 exch sub
		3 {dup 3 1 roll mul 5 1 roll} repeat
		mul 4 1 roll
		k
	}
	{
		1 exch sub 4 1 roll
		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat
		4 -1 roll pop
		Xa
	} ifelse
} def
/A
{
	pop
} def
/annotatepage
{
userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse
} def
/XT {
	pop pop
} def
/Xt {
	pop
} def
/discard
{
	save /discardSave exch store
	discardDict begin
	/endString exch store
	gt38?
	{
		2 add
	} if
	load
	stopped
	pop
 end
	discardSave restore
} bind def
userdict /discardDict 7 dict dup begin
put
/pre38Initialize
{
	/endStringLength endString length store
	/newBuff buffer 0 endStringLength getinterval store
	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store
	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store
} def
/shiftBuffer
{
	newBuff 0 newBuffButFirst putinterval
	newBuffLast 0
	currentfile read not
	{
	stop
	} if
	put
} def
0
{
	pre38Initialize
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff endString eq
			{
				cleartomark stop
			} if
			shiftBuffer
		} loop
	}
	{
	stop
	} ifelse
} def
1
{
	pre38Initialize
	/beginString exch store
	mark
	currentfile newBuff readstring exch pop
	{
		{
			newBuff beginString eq
			{
				/layerCount dup load 1 add store
			}
			{
				newBuff endString eq
				{
					/layerCount dup load 1 sub store
					layerCount 0 eq
					{
						cleartomark stop
					} if
				} if
			} ifelse
			shiftBuffer
		} loop
	} if
} def
2
{
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			endString eq {
				cleartomark stop
			} if
		}ifelse
	} loop
} def
3
{
	/beginString exch store
	/layerCnt 1 store
	mark
	{
		currentfile buffer {readline} stopped {
			% assume error was due to overfilling the buffer
		}{
			not
			{
				stop
			} if
			dup beginString eq
			{
				pop /layerCnt dup load 1 add store
			}
			{
				endString eq
				{
					layerCnt 1 eq
					{
						cleartomark stop
					}
					{
						/layerCnt dup load 1 sub store
					} ifelse
				} if
			} ifelse
		}ifelse
	} loop
} def
end
userdict /clipRenderOff 15 dict dup begin
put
{
	/n /N /s /S /f /F /b /B
}
{
	{
		_doClip 1 eq
		{
			/_doClip 0 ddef _eo {eoclip} {clip} ifelse
		} if
		newpath
	} def
} forall
/Tr /pop load def
/Bb {} def
/BB /pop load def
/Bg {12 npop} def
/Bm {6 npop} def
/Bc /Bm load def
/Bh {4 npop} def
end
/Lb
{
	6 npop
	7 2 roll
	5 npop
	0 eq
	{
		0 eq
		{
			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard
		}
		{
			
			/clipForward? true def
			
			/Tx /pop load def
			/Tj /pop load def
			
			currentdict end clipRenderOff begin begin
		} ifelse
	}
	{
		0 eq
		{
			save /discardSave exch store
		} if
	} ifelse
} bind def
/LB
{
	discardSave dup null ne
	{
		restore
	}
	{
		pop
		clipForward?
		{
			currentdict
		 end
		 end
		 begin
					
			/clipForward? false ddef
		} if
	} ifelse
} bind def
/Pb
{
	pop pop
	0 (%AI5_EndPalette) discard
} bind def
/Np
{
	0 (%AI5_End_NonPrinting--) discard
} bind def
/Ln /pop load def
/Ap
/pop load def
/Ar
{
	72 exch div
	0 dtransform dup mul exch dup mul add sqrt
	dup 1 lt
	{
		pop 1
	} if
	setflat
} def
/Mb
{
	q
} def
/Md
{
} def
/MB
{
	Q
} def
/nc 4 dict def
nc begin
/setgray
{
	pop
} bind def
/setcmykcolor
{
	4 npop
} bind def
/setrgbcolor
{
	3 npop
} bind def
/setcustomcolor
{
	2 npop
} bind def
currentdict readonly pop
end
/XP
{
	4 npop
} bind def
/XD
{
	pop
} bind def
end
setpacking
%%EndResource
%%BeginResource: procset Adobe_cshow 2.0 8
%%Title: (Writing System Operators)
%%Version: 2.0 8
%%CreationDate: (1/23/89) ()
%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)
currentpacking true setpacking
userdict /Adobe_cshow 14 dict dup begin put
/initialize
{
	Adobe_cshow begin
	Adobe_cshow
	{
		dup xcheck
		{
			bind
		} if
		pop pop
	} forall
 end
	Adobe_cshow begin
} def
/terminate
{
currentdict Adobe_cshow eq
	{
 end
	} if
} def
/cforall
{
	/_lobyte 0 ddef
	/_hibyte 0 ddef
	/_cproc exch ddef
	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef
	{
		/_lobyte exch ddef
		_hibyte 0 eq
		_cscript 1 eq
		_lobyte 129 ge _lobyte 159 le and
		_lobyte 224 ge _lobyte 252 le and or and
		_cscript 2 eq
		_lobyte 161 ge _lobyte 254 le and and
		_cscript 3 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript 25 eq
		_lobyte 161 ge _lobyte 254 le and and
    	_cscript -1 eq
		or or or or and
		{
			/_hibyte _lobyte ddef
		}
		{
			_hibyte 256 mul _lobyte add
			_cproc
			/_hibyte 0 ddef
		} ifelse
	} forall
} def
/cstring
{
	dup 256 lt
	{
		(s) dup 0 4 3 roll put
	}
	{
		dup 256 idiv exch 256 mod
		(hl) dup dup 0 6 5 roll put 1 4 3 roll put
	} ifelse
} def
/clength
{
	0 exch
	{ 256 lt { 1 } { 2 } ifelse add } cforall
} def
/hawidthshow
{
	{
		dup cstring
		show
		_hvax _hvay rmoveto
		_hvwb eq { _hvcx _hvcy rmoveto } if
	} cforall
} def
/vawidthshow
{
	{
		dup 255 le
		_charorientation 1 eq
		and
		{
			-90 rotate
			0 _fontRotateAdjust rmoveto
			cstring
			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow
			0 _fontRotateAdjust neg rmoveto
			90 rotate
		}
		{
			currentpoint
			_fontHeight sub
			exch _hvay sub exch _hvax sub
			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if
			3 2 roll
			cstring
			dup stringwidth pop 2 div neg _fontAscent neg rmoveto
			show
			moveto
		} ifelse
	} cforall
} def
/hvawidthshow
{
	6 1 roll
	/_hvay exch ddef
	/_hvax exch ddef
	/_hvwb exch ddef
	/_hvcy exch ddef
	/_hvcx exch ddef
	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse
} def
/hvwidthshow
{
	0 0 3 -1 roll hvawidthshow
} def
/hvashow
{
	0 0 0 6 -3 roll hvawidthshow
} def
/hvshow
{
	0 0 0 0 0 6 -1 roll hvawidthshow
} def
currentdict readonly pop end
setpacking
%%EndResource
%%BeginResource: procset Adobe_shading_AI8 1.0 0
%%Title: (Adobe Illustrator 8 Shading Procset)
%%Version: 1.0 0
%%CreationDate: (12/17/97) ()
%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)
userdict /defaultpacking currentpacking put true setpacking
userdict /Adobe_shading_AI8 10 dict dup begin put
/initialize {
	Adobe_shading_AI8 begin
	Adobe_shading_AI8 bdprocs
	Mesh /initialize get exec
} def
/terminate {
	currentdict Adobe_shading_AI8 eq {
	 end
	} if
} def
/bdprocs {
	{
		dup xcheck 1 index type /arraytype eq and {
			bind
		} if
		pop pop
	} forall
} def
/X! {pop} def
/X# {pop pop} def
/Mesh 40 dict def
Mesh begin
/initialize {
	Mesh bdprocs
	Mesh begin
		/emulate? /AI8MeshEmulation where {
			pop AI8MeshEmulation
		}{
			systemdict /shfill known not
		} ifelse def
 end
} def
/bd {
	shadingdict begin
} def
/paint {
	emulate? {
	 end
	}{
		/_lp /none ddef _fc /_lp /none ddef
		
		/AIColorSpace AIColorSpace tocolorspace store
		/ColorSpace AIColorSpace topsspace store
		
		version_ge_3010.106 not systemdict /setsmoothness known and {
			0.0001 setsmoothness
		} if
		
		composite? {
			/DataSource getdatasrc def
			Matrix concat
			currentdict end
			shfill
		}{
			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {
			 end
			}{
				/ColorSpace /DeviceGray store
				/Decode [0 1 0 1 0 1] store
				/DataSource getplatesrc def
				Matrix concat
				currentdict end
				shfill
			} ifelse
		} ifelse
	} ifelse
} def
/shadingdict 12 dict def
shadingdict begin
	/ShadingType 6 def
	/BitsPerCoordinate 16 def
	/BitsPerComponent 8 def
	/BitsPerFlag 8 def
end
/datafile null def
/databuf 256 string def
/dataptr 0 def
/srcspace null def
/srcchannels 0 def
/dstchannels 0 def
/dstplate 0 def
/srctodstcolor null def
/getplatesrc {
	/srcspace AIColorSpace store
	/srcchannels AIColorSpace getnchannels store
	/dstchannels 1 store
	/dstplate getplateindex store
	/srctodstcolor srcspace makesmarks {
		dstplate 4 eq {
			{1 exch sub}
		}{
			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}
		} ifelse
	}{
		{srcchannels {pop} repeat 1}
	} ifelse store
	/datafile getdatasrc store
	/rdpatch168 load DataLength () /SubFileDecode filter
} def
/getdatasrc {
	/rdcmntline load /ASCII85Decode filter
} def
/rdpatch168 {
	/dataptr 0 store
	49 rdcount
	4 {
		dup {pop srcchannels getint8} if
		dup {pop srctodstcolor dstchannels putint8 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdpatch3216 {
	/dataptr 0 store
	97 rdcount
	4 {
		dup {pop srcchannels getint16} if
		dup {pop srctodstcolor dstchannels putint16 true} if
	} repeat
	{databuf 0 dataptr getinterval}{()} ifelse
} def
/rdcount {
	dup 0 gt {
		datafile databuf dataptr 4 -1 roll getinterval readstring
		exch length dataptr add /dataptr exch store
	}{
		true
	} ifelse
} def
/getint8 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 255 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint8 {
	dup dataptr add /dataptr exch store
	dataptr exch
	{
		1 sub exch
		255 mul cvi
		databuf 2 index
		3 -1 roll put
	} repeat
	pop
} def 
/getint16 {
	mark true 3 -1 roll
	{
		dup {pop datafile read} if
		dup {pop 256 mul datafile read} if
		dup {pop add 65535 div true} if
	} repeat
	{
		counttomark 1 add -1 roll pop true
	}{
		cleartomark false
	} ifelse
} def
/putint16 {
	dup 2 mul dataptr add /dataptr exch store
	dataptr exch
	{
		2 sub exch
		65535 mul cvi dup
		256 idiv databuf 3 index 3 -1 roll put
		256 mod databuf 2 index 1 add 3 -1 roll put
	} repeat
	pop
} def 
/srcbuf 256 string def
/rdcmntline {
	currentfile srcbuf readline pop
	(%) anchorsearch {pop} if
} def
/getplateindex {
	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall
} def
/aicsarray 4 array def
/aicsaltvals 4 array def
/aicsaltcolr aicsaltvals def
/tocolorspace {
	dup type /arraytype eq {
		mark exch aload pop
		aicsarray 0 3 -1 roll put
		aicsarray 1 3 -1 roll put
		dup aicsarray 2 3 -1 roll put
		gettintxform aicsarray 3 3 -1 roll put
		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store
		aicsaltcolr astore pop pop
		aicsarray
	} if
} def
/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def
/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def
/gettintxform {
	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load
} def
/getnchannels {
	dup type /arraytype eq {0 get} if
	colorspacedict exch get begin Channels end
} def
/makesmarks {
	composite? {
		pop true
	}{
		dup dup type /arraytype eq {0 get} if
		colorspacedict exch get begin MarksPlate end
	} ifelse
} def
/markingplate {
	composite? {
		pop true
	}{
		dup type /arraytype eq {
			dup length getplateindex gt {getplateindex get}{pop false} ifelse
		} if
	} ifelse
} def
/tocmyk {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToCMYK end
} def
/topsspace {
	dup dup type /arraytype eq {0 get} if
	colorspacedict exch get begin ToPSSpace end
} def
/colorspacedict 5 dict dup begin
	/DeviceGray 4 dict dup begin
		/Channels 1 def
		/MarksPlate {pop black?} def
		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def
		/ToPSSpace {} def
 end def
	/DeviceRGB 4 dict dup begin
		/Channels 3 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop _rgbtocmyk} def
		/ToPSSpace {} def
 end def
	/DeviceCMYK 4 dict dup begin
		/Channels 4 def
		/MarksPlate {pop isCMYKSep?} def
		/ToCMYK {pop} def
		/ToPSSpace {} def
 end def
	/Separation 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			/findcmykcustomcolor where {
				pop dup 1 exch ToCMYK 5 -1 roll 1 get
				findcmykcustomcolor 1 setcustomcolor
				systemdict /currentgray get exec
				1 ne
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {} def
 end def
	/Process 4 dict dup begin
		/Channels 1 def
		/MarksPlate {
			isCMYKSep? {
				1 exch ToCMYK 4 array astore getplateindex get 0 ne 
			}{
				pop false
			} ifelse
		} def
		/ToCMYK {
			dup 2 get mark exch 4 2 roll
			3 get exec
			counttomark -1 roll tocmyk
			5 -1 roll pop
		} def
		/ToPSSpace {
			4 array copy dup 0 /Separation put
		} def
 end def
end def
/isoverprint {
	/currentoverprint where {pop currentoverprint}{_of} ifelse
} def
/version_ge_3010.106 {
   version {cvr} stopped {
      pop
      false
   }{
      3010.106 ge
   } ifelse
} def
end
end
defaultpacking setpacking
%%EndResource
%%EndProlog
%%BeginSetup
userdict /_useSmoothShade false put
userdict /_aicmykps false put
userdict /_forceToCMYK false put
Adobe_level2_AI5 /initialize get exec
Adobe_cshow /initialize get exec
Adobe_ColorImage_AI6 /initialize get exec
Adobe_shading_AI8 /initialize get exec
Adobe_Illustrator_AI5 /initialize get exec
%AI5_Begin_NonPrinting
Np
%AI8_PluginGroupInfo
(Adobe Vectorized Object) (Image Tracing) (Vectorize.aip)
%AI8_PluginGroupInfo
(Adobe Flare Plugin) (Flare) (flare.aip)
%AI8_PluginGroupInfo
(Adobe Deform Plugin) (Adobe Envelope Plugin) (Envelope and Warp.aip)
%AI8_PluginGroupInfo
(Adobe Planar Group) (Adobe Live Paint Plugin) (Live Paint.aip)
%AI8_PluginGroupInfo
(Adobe Perspective Plugin Group) (Adobe Perspective Plugin Group) (Perspective.aip)
%AI8_PluginGroupInfo
(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends.aip)
%AI8_PluginGroupInfo
(Adobe Symbolism) (Adobe Symbolism) (Symbolism.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (ArtOnPath.aip)
%AI8_PluginGroupInfo
(Adobe Calligraphic Brush Tool) (Adobe Calligraphic Brush Plugin) (Calligraphic Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool.aip)
%AI8_PluginGroupInfo
(Adobe Pattern Editor Plugin Group) (Adobe Pattern Editor Plugin Group) (Swatch Libraries.aip)
%AI8_PluginGroupInfo
(Pathfinder Suite) (Adobe Compound Shape) (PathFinder Suite.aip)
%AI5_End_NonPrinting--
%AI5_BeginPalette
0 0 Pb
0.912474 0.787625 0.619837 0.97467 ([Registration]) 0 Xs
([Registration])
Pc
PB
%AI5_EndPalette
%%EndSetup
%AI5_BeginLayer
1 1 1 1 0 0 1 0 79 128 255 0 50 Lb
(Layer 1) Ln
0 A
0 O
0 0 0 0 1 1 1 Xa
0 J 0 j 1 w 10 M []0 d1 XR
0 1133 m
1133.8584 1133 l
1133.8584 -0.858398 l
0 -0.858398 l
0 1133 l
0 1133 l
f
*u
1 D
0.912474 0.787625 0.619837 0.97467 0 0 0 Xa
183.3921 1042.8691 m
156.0601 1042.8691 l
151.6455 993.9629 l
187.8066 993.9629 l
183.3921 1042.8691 l
183.3921 1042.8691 l
f
0 D
269.4688 899.167 m
269.4131 894.2466 266.0596 892.4033 261.2783 892.4033 c
191.042 892.4033 l
191.042 863.5313 l
148.4102 863.5313 l
148.4102 892.4033 l
78.1733 892.4033 l
73.186 892.4033 69.7529 894.4102 69.9951 899.8223 c
69.9951 910.6489 l
69.9971 910.6489 l
69.9507 911.5576 70.0215 912.5767 70.2261 913.7173 c
95.2319 1053.0449 l
96.5024 1060.123 100.5586 1062.3467 106.5674 1062.3467 c
232.8843 1062.3467 l
238.8931 1062.3467 242.9497 1060.123 244.2197 1053.0449 c
269.2256 913.7173 l
269.4307 912.5767 269.5015 911.5576 269.4551 910.6489 c
269.4697 910.6489 l
269.4697 899.167 l
269.4688 899.167 l
269.4688 899.167 l
f
1 D
105.2646 1052.5996 m
80.248 914.0273 l
259.2041 914.0273 l
234.1875 1052.5996 l
105.2646 1052.5996 l
105.2646 1052.5996 l
f
0 D
198.666 984.1025 m
236.5122 984.1025 l
247.4912 923.7578 l
204.1128 923.7578 l
198.666 984.1025 l
198.666 984.1025 l
f
193.3608 1042.8691 m
225.8208 1042.8691 l
234.7188 993.9629 l
197.7759 993.9629 l
193.3608 1042.8691 l
193.3608 1042.8691 l
f
1 D
150.7554 984.1025 m
145.3086 923.7578 l
194.1436 923.7578 l
188.6968 984.1025 l
150.7554 984.1025 l
150.7554 984.1025 l
f
140.7861 984.1025 m
102.9399 984.1025 l
91.9609 923.7578 l
135.3394 923.7578 l
140.7861 984.1025 l
140.7861 984.1025 l
f
146.0908 1042.8691 m
113.6313 1042.8691 l
104.7334 993.9629 l
141.6763 993.9629 l
146.0908 1042.8691 l
146.0908 1042.8691 l
f
*U
*u
0 D
0 XR
466.7427 767.6626 m
467.7446 765.2085 468.6816 762.6665 469.5557 760.0469 c
472.2607 760.5996 474.9326 761.0596 477.5586 761.4185 c
521.6216 767.4448 537.1855 740.4844 509.9351 705.3389 c
508.311 703.2446 506.5771 701.1621 504.7461 699.0957 c
506.5776 697.0293 508.3115 694.9448 509.936 692.8496 c
537.186 657.7036 521.6196 630.7441 477.5576 636.7715 c
474.9316 637.1304 472.2603 637.5908 469.5552 638.1436 c
468.6816 635.5239 467.7441 632.9805 466.7422 630.5259 c
449.9297 589.3535 418.7988 589.355 401.9878 630.5273 c
400.9858 632.981 400.0488 635.5239 399.1748 638.1431 c
396.4692 637.5903 393.7969 637.1299 391.1709 636.7705 c
347.1079 630.7437 331.5444 657.7061 358.7949 692.8506 c
360.4189 694.9453 362.1528 697.0288 363.9839 699.0947 c
362.1523 701.1616 360.4185 703.2451 358.7939 705.3398 c
331.5425 740.4858 347.1113 767.4458 391.1724 761.4185 c
393.7983 761.0591 396.4692 760.5996 399.1743 760.0469 c
400.0483 762.667 400.9858 765.21 401.9878 767.6641 c
418.7998 808.8374 449.9316 808.8345 466.7427 767.6626 c
466.7427 767.6626 l
f
434.3647 719.1523 m
445.4409 719.1523 454.4224 710.1709 454.4224 699.0947 c
454.4224 688.019 445.4409 679.0371 434.3647 679.0371 c
423.2891 679.0371 414.3071 688.019 414.3071 699.0947 c
414.3071 710.1709 423.2891 719.1523 434.3647 719.1523 c
434.3647 719.1523 l
f
1 D
472.7246 749.1294 m
474.7329 741.1108 476.2197 732.5859 477.1846 723.8184 c
484.2954 718.5986 490.9346 713.0488 496.875 707.3003 c
498.3228 708.96 499.7046 710.6284 501.0039 712.3042 c
522.0166 739.4023 513.0996 754.8486 479.1255 750.2021 c
477.0239 749.9146 474.8872 749.5532 472.7246 749.1294 c
472.7246 749.1294 l
f
396.0054 649.0615 m
393.9966 657.0801 392.5098 665.6055 391.5449 674.3735 c
384.4346 679.5928 377.7954 685.1426 371.855 690.8911 c
370.4067 689.2314 369.0254 687.562 367.7261 685.8862 c
346.7134 658.7876 355.6294 643.3403 389.604 647.9878 c
391.7056 648.2754 393.8433 648.6372 396.0054 649.0615 c
396.0054 649.0615 l
f
371.854 707.2959 m
377.7954 713.0459 384.4336 718.5977 391.5454 723.8184 c
392.5107 732.5859 393.9976 741.1099 396.0063 749.1284 c
393.8447 749.5527 391.7075 749.9141 389.6064 750.2012 c
355.6318 754.8491 346.7124 739.4043 367.7251 712.3052 c
369.0254 710.6279 370.4043 708.9575 371.854 707.2959 c
371.854 707.2959 l
f
404.1313 732.4038 m
409.4893 735.7988 415.0186 738.9912 420.6377 741.9336 c
416.0601 743.6719 411.5015 745.1934 407.0132 746.4707 c
405.8755 741.9453 404.915 737.2373 404.1313 732.4038 c
404.1313 732.4038 l
f
434.3652 748.541 m
442.4424 752.0898 450.5693 755.0625 458.5195 757.3325 c
457.8057 759.418 457.0474 761.4463 456.2451 763.4106 c
443.2832 795.1572 425.4478 795.1592 412.4854 763.4121 c
411.6836 761.4482 410.9287 759.417 410.2144 757.332 c
418.1636 755.0625 426.29 752.0889 434.3652 748.541 c
434.3652 748.541 l
f
496.876 690.895 m
490.9346 685.1445 484.2959 679.5933 477.1841 674.3726 c
476.2183 665.6055 474.7314 657.0806 472.7227 649.0625 c
474.8853 648.6382 477.0225 648.2759 479.124 647.9883 c
513.0981 643.3398 522.0166 658.7852 501.0054 685.8848 c
499.7046 687.5615 498.3257 689.2334 496.876 690.895 c
496.876 690.895 l
f
464.6006 665.7881 m
459.2427 662.3926 453.7144 659.2007 448.0957 656.2583 c
452.6733 654.5205 457.2295 652.9976 461.7178 651.7202 c
462.8555 656.2456 463.8164 660.9546 464.6006 665.7881 c
464.6006 665.7881 l
f
434.3672 649.6514 m
426.29 646.1021 418.1631 643.1284 410.2124 640.8584 c
410.9263 638.7729 411.6831 636.7437 412.4849 634.7793 c
425.4463 603.0327 443.2817 603.0317 456.2446 634.7778 c
457.0464 636.7422 457.8022 638.7744 458.5161 640.8599 c
450.5679 643.1289 442.4424 646.104 434.3672 649.6514 c
434.3672 649.6514 l
f
407.0132 651.7197 m
411.502 652.9971 416.0605 654.5195 420.6396 656.2578 c
415.0195 659.2002 409.4893 662.3921 404.1304 665.7881 c
404.9141 660.9541 405.875 656.2456 407.0132 651.7197 c
407.0132 651.7197 l
f
434.3677 662.0845 m
445.4561 667.2822 456.3745 673.5859 466.4194 680.5903 c
467.4624 692.792 467.4614 705.3989 466.4185 717.6011 c
456.373 724.6055 445.4546 730.9106 434.3657 736.1079 c
423.2769 730.9106 412.3589 724.6064 402.3135 717.6021 c
401.27 705.3999 401.2695 692.7915 402.3125 680.5894 c
412.3584 673.585 423.2783 667.2813 434.3677 662.0845 c
434.3677 662.0845 l
f
478.3262 689.564 m
482.1211 692.6602 485.7183 695.8472 489.0688 699.0962 c
485.7183 702.3442 482.1221 705.5298 478.3276 708.625 c
478.5889 702.2866 478.5879 695.9023 478.3262 689.564 c
478.3262 689.564 l
f
461.7188 746.4712 m
457.2305 745.1943 452.6714 743.6719 448.0933 741.9336 c
453.7134 738.9907 459.2422 735.7983 464.6006 732.4033 c
463.8169 737.2368 462.8564 741.9453 461.7188 746.4712 c
461.7188 746.4712 l
f
390.4033 708.6265 m
386.6089 705.5303 383.0117 702.3438 379.6611 699.0947 c
383.0117 695.8467 386.6084 692.6602 390.4023 689.5649 c
390.1411 695.9033 390.1416 702.2881 390.4033 708.6265 c
390.4033 708.6265 l
f
*U
*u
0 D
1 XR
434.3647 1016.1172 m
463.7305 1016.1172 487.5435 992.3042 487.5435 962.9385 c
487.5435 933.5742 463.7305 909.7603 434.3647 909.7603 c
405.0005 909.7603 381.1865 933.5742 381.1865 962.9385 c
381.1865 992.3042 405.0005 1016.1172 434.3647 1016.1172 c
434.3647 1016.1172 l
f
434.3647 1000.54 m
446.3413 1000.54 457.0103 994.938 463.8965 986.2119 c
458.0781 989.9048 451.1787 992.0444 443.7788 992.0444 c
423.0151 992.0444 406.1772 975.2065 406.1772 954.4434 c
406.1772 945.6558 409.1948 937.5732 414.2476 931.1709 c
403.7402 937.8398 396.7637 949.5752 396.7637 962.9385 c
396.7637 983.7021 413.6016 1000.54 434.3647 1000.54 c
434.3647 1000.54 l
f
397.71 1040.96 m
406.3794 1025.9453 l
411.1758 1017.6372 398.5894 1010.3706 393.793 1018.6782 c
385.1235 1033.6929 l
380.3276 1042.001 392.9146 1049.2671 397.71 1040.96 c
397.71 1040.96 l
f
363.6104 1012.1797 m
378.626 1003.5107 l
386.9336 998.7144 379.6665 986.1279 371.3589 990.9248 c
356.3438 999.5938 l
348.0361 1004.3896 355.3027 1016.9761 363.6104 1012.1797 c
363.6104 1012.1797 l
f
348.4692 970.2061 m
365.8071 970.2061 l
375.3994 970.2061 375.3994 955.6724 365.8066 955.6724 c
348.4692 955.6709 l
338.877 955.6724 338.877 970.2061 348.4692 970.2061 c
348.4692 970.2061 l
f
356.3438 926.2837 m
371.3579 934.9531 l
379.6665 939.7495 386.9331 927.1631 378.6255 922.3672 c
363.6104 913.6973 l
355.3027 908.9014 348.0361 921.4883 356.3438 926.2837 c
356.3438 926.2837 l
f
385.1235 892.1841 m
393.7925 907.1997 l
398.5889 915.5068 411.1753 908.2402 406.3789 899.9326 c
397.71 884.9175 l
392.9141 876.6104 380.3276 883.8765 385.1235 892.1841 c
385.1235 892.1841 l
f
427.0977 877.043 m
427.0977 894.3809 l
427.0977 903.9731 441.6313 903.9731 441.6313 894.3804 c
441.6323 877.043 l
441.6313 867.4507 427.0977 867.4507 427.0977 877.043 c
427.0977 877.043 l
f
471.0195 884.9175 m
462.3501 899.9316 l
457.5537 908.2402 470.1406 915.5068 474.9365 907.1992 c
483.606 892.1841 l
488.4019 883.8765 475.8154 876.6104 471.0195 884.9175 c
471.0195 884.9175 l
f
505.1191 913.6973 m
490.104 922.3662 l
481.7964 927.1631 489.0635 939.749 497.3706 934.9526 c
512.3862 926.2837 l
520.6934 921.4878 513.4272 908.9014 505.1191 913.6973 c
505.1191 913.6973 l
f
520.2603 955.6709 m
502.9224 955.6709 l
493.3306 955.6709 493.3306 970.2051 502.9229 970.2051 c
520.2603 970.2061 l
529.8525 970.2051 529.8525 955.6709 520.2603 955.6709 c
520.2603 955.6709 l
f
512.3862 999.5938 m
497.3716 990.9238 l
489.0635 986.1279 481.7969 998.7144 490.1045 1003.5103 c
505.1191 1012.1797 l
513.4272 1016.9756 520.6934 1004.3892 512.3862 999.5938 c
512.3862 999.5938 l
f
483.606 1033.6929 m
474.937 1018.6777 l
470.1406 1010.3701 457.5542 1017.6372 462.3506 1025.9443 c
471.0195 1040.96 l
475.8159 1049.2671 488.4023 1042.001 483.606 1033.6929 c
483.606 1033.6929 l
f
441.6323 1048.834 m
441.6323 1031.4961 l
441.6323 1021.9043 427.0986 1021.9043 427.0986 1031.4961 c
427.0977 1048.834 l
427.0986 1058.4268 441.6323 1058.4268 441.6323 1048.834 c
441.6323 1048.834 l
f
*U
*u
993.7412 630.2568 m
984.8018 626.4736 974.9727 624.3809 964.6553 624.3809 c
954.3379 624.3809 944.5088 626.4736 935.5684 630.2568 c
950.8027 671.0527 l
954.9785 668.9849 959.6807 667.8218 964.6553 667.8218 c
969.6289 667.8218 974.332 668.9849 978.5078 671.0518 c
993.7412 630.2568 l
993.7412 630.2568 l
f
964.6553 795.6738 m
1017.9854 795.6738 1061.2344 752.4253 1061.2344 699.0947 c
1061.2344 645.7666 1017.9854 602.5161 964.6553 602.5161 c
911.3271 602.5161 868.0762 645.7666 868.0762 699.0947 c
868.0762 752.4253 911.3271 795.6738 964.6553 795.6738 c
964.6553 795.6738 l
f
964.6553 780.9243 m
1009.8408 780.9243 1046.4844 744.2808 1046.4844 699.0947 c
1046.4844 653.9111 1009.8408 617.2656 964.6553 617.2656 c
919.4707 617.2656 882.8262 653.9111 882.8262 699.0947 c
882.8262 744.2808 919.4707 780.9243 964.6553 780.9243 c
964.6553 780.9243 l
f
964.6553 723.1812 m
977.9551 723.1812 988.7412 712.3955 988.7412 699.0947 c
988.7412 685.7949 977.9551 675.0088 964.6553 675.0088 c
951.3545 675.0088 940.5693 685.7949 940.5693 699.0947 c
940.5693 712.3955 951.3545 723.1812 964.6553 723.1812 c
964.6553 723.1812 l
f
933.4492 701.1191 m
890.4971 708.3247 l
891.6904 717.958 894.793 727.5171 899.9512 736.4521 c
905.1104 745.3867 911.8369 752.853 919.584 758.7046 c
947.2988 725.1099 l
939.4365 719.8516 934.0898 711.125 933.4492 701.1191 c
933.4492 701.1191 l
f
982.0127 725.1099 m
1009.7275 758.7041 l
1017.4746 752.853 1024.2012 745.3867 1029.3594 736.4526 c
1034.5186 727.5171 1037.6211 717.958 1038.8154 708.3237 c
995.8613 701.1187 l
995.2217 711.124 989.876 719.8521 982.0127 725.1099 c
982.0127 725.1099 l
f
*U
*u
636.8066 1056.6167 m
701.5801 1056.6167 l
712.1523 1056.6167 720.8027 1047.9624 720.8027 1037.394 c
720.8027 1023.2891 l
729.3848 1023.2676 l
737.9346 1023.2642 744.9063 1016.3018 744.9082 1007.7417 c
744.9082 924.4658 l
744.9082 922.9199 746.2881 921.542 747.834 921.542 c
757.3252 921.542 l
758.8936 921.5425 760.249 922.9102 760.249 924.4688 c
760.2246 966.4668 l
760.2334 966.4668 l
760.2344 1020.3604 l
760.2344 1022.3833 761.0068 1024.4063 762.5498 1025.9497 c
788.2412 1051.6411 l
799.4199 1040.4619 l
776.0449 1017.0869 l
776.0449 1004.4541 l
780.6133 1004.4541 l
785.0127 1004.4541 788.6133 1000.8428 788.6133 996.4546 c
788.6133 962.0796 l
788.6133 957.6914 785.002 954.0801 780.6133 954.0801 c
772.8691 954.0801 l
772.8486 924.4688 l
772.8467 915.9082 765.876 908.9463 757.3252 908.9424 c
747.834 908.9424 l
739.2988 908.9443 732.3115 915.9307 732.3086 924.4658 c
732.3086 1007.7417 l
732.3086 1009.2998 730.9531 1010.6675 729.3848 1010.668 c
720.8027 1010.647 l
720.8027 899.5186 l
729.5713 899.5186 l
733.8018 899.5186 737.2637 896.0527 737.2637 891.8262 c
737.2637 869.2607 l
601.123 869.2607 l
601.123 891.8262 l
601.123 896.0566 604.584 899.5186 608.8154 899.5186 c
617.584 899.5186 l
617.584 1037.394 l
617.584 1047.9663 626.2344 1056.6167 636.8066 1056.6167 c
636.8066 1056.6167 l
f
633.1221 979.0259 m
645.6846 979.0259 l
645.6846 899.5186 l
633.1221 899.5186 l
633.1221 979.0259 l
633.1221 979.0259 l
f
637.6709 1041.5469 m
700.7158 1041.5469 l
703.2178 1041.5469 705.2646 1039.498 705.2646 1036.998 c
705.2646 997.0376 l
705.2646 994.5381 703.2158 992.4893 700.7158 992.4893 c
637.6709 992.4893 l
635.1709 992.4893 633.1221 994.5361 633.1221 997.0376 c
633.1221 1036.998 l
633.1221 1039.5 635.1689 1041.5469 637.6709 1041.5469 c
637.6709 1041.5469 l
f
*U
*u
878.3174 1026.0947 m
1050.9922 1026.0947 l
1056.5039 1026.0947 1061.0137 1021.5845 1061.0137 1016.0737 c
1061.0137 880.1792 l
1061.0137 874.6685 1056.5029 870.1582 1050.9922 870.1582 c
878.3174 870.1582 l
872.8076 870.1582 868.2969 874.6675 868.2969 880.1792 c
868.2969 1016.0737 l
868.2969 1021.5854 872.8066 1026.0947 878.3174 1026.0947 c
878.3174 1026.0947 l
f
1046.8398 944.3037 m
1046.8398 889.4121 l
1046.8398 886.6206 1044.5508 884.3315 1041.7598 884.3315 c
887.5508 884.3315 l
884.7588 884.3315 882.4697 886.6177 882.4697 889.4121 c
882.4697 944.3037 l
1046.8398 944.3037 l
1046.8398 944.3037 l
f
896.5547 989.5107 m
911.6094 989.5107 l
911.6094 1004.5669 l
911.6094 1005.4727 912.3506 1006.2129 913.2559 1006.2129 c
921.8066 1006.2129 l
922.7119 1006.2129 923.4531 1005.4712 923.4531 1004.5669 c
923.4531 989.5107 l
938.5088 989.5107 l
939.4141 989.5107 940.1543 988.7686 940.1543 987.8643 c
940.1543 979.314 l
940.1543 978.4102 939.4121 977.668 938.5088 977.668 c
923.4531 977.668 l
923.4531 962.6128 l
923.4531 961.7085 922.7109 960.9663 921.8066 960.9663 c
913.2559 960.9663 l
912.3516 960.9663 911.6094 961.707 911.6094 962.6128 c
911.6094 977.668 l
896.5547 977.668 l
895.6504 977.668 894.9082 978.4082 894.9082 979.314 c
894.9082 987.8643 l
894.9082 988.7705 895.6484 989.5107 896.5547 989.5107 c
896.5547 989.5107 l
f
990.8018 989.5107 m
1032.7559 989.5107 l
1033.6621 989.5107 1034.4023 988.7676 1034.4023 987.8643 c
1034.4023 979.314 l
1034.4023 978.4111 1033.6592 977.668 1032.7559 977.668 c
990.8018 977.668 l
989.8994 977.668 989.1553 978.4082 989.1553 979.314 c
989.1553 987.8643 l
989.1553 988.7705 989.8965 989.5107 990.8018 989.5107 c
990.8018 989.5107 l
f
1036.874 1032.3369 m
997.3965 1032.3369 l
997.3965 1048.7354 l
997.3965 1052.5767 1000.5391 1055.7197 1004.3809 1055.7197 c
1029.8896 1055.7197 l
1033.7305 1055.7197 1036.874 1052.5757 1036.874 1048.7354 c
1036.874 1032.3369 l
1036.874 1032.3369 l
f
931.9131 1032.3369 m
892.4365 1032.3369 l
892.4365 1048.7354 l
892.4365 1052.5767 895.5791 1055.7197 899.4209 1055.7197 c
924.9287 1055.7197 l
928.7705 1055.7197 931.9131 1052.5767 931.9131 1048.7354 c
931.9131 1032.3369 l
931.9131 1032.3369 l
f
*U
*u
169.7266 530.7656 m
223.0566 530.7656 266.3052 487.5166 266.3052 434.1865 c
266.3052 380.8584 223.0566 337.6084 169.7266 337.6084 c
116.3979 337.6084 73.1475 380.8584 73.1475 434.1865 c
73.1475 487.5166 116.3979 530.7656 169.7266 530.7656 c
169.7266 530.7656 l
f
215.8613 449.2666 m
160.8398 361.3154 l
158.2944 361.3154 l
173.3633 424.3662 l
130.9492 424.3672 l
148.2051 496.5674 l
182.6865 496.5674 l
171.3818 449.2666 l
215.8613 449.2666 l
215.8613 449.2666 l
f
169.7266 516.0156 m
214.9121 516.0156 251.5557 479.3721 251.5557 434.1865 c
251.5557 389.0029 214.9121 352.3574 169.7266 352.3574 c
124.5425 352.3574 87.897 389.0029 87.897 434.1865 c
87.897 479.3721 124.5425 516.0156 169.7266 516.0156 c
169.7266 516.0156 l
f
*U
*u
1 D
134.3359 696.3311 m
112.7603 620.3374 l
99.4673 620.3374 l
97.4463 620.3374 95.7935 618.6841 95.7935 616.6636 c
95.7935 602.5205 l
95.7935 600.5005 97.4468 598.8472 99.4673 598.8472 c
239.9863 598.8472 l
242.0063 598.8472 243.6597 600.5005 243.6597 602.5205 c
243.6597 616.6636 l
243.6597 618.6841 242.0068 620.3374 239.9863 620.3374 c
226.6924 620.3374 l
205.1167 696.3311 l
213.5918 696.3311 l
215.9165 696.3311 217.8184 698.2329 217.8184 700.5581 c
217.8184 714.6196 l
217.8184 716.9448 215.9155 718.8467 213.5918 718.8467 c
185.2114 718.8467 l
185.2114 722.541 l
185.2114 724.3721 183.7124 725.8706 181.8823 725.8706 c
157.5708 725.8706 l
155.7407 725.8706 154.2417 724.3711 154.2417 722.541 c
154.2417 718.8467 l
125.8613 718.8467 l
123.5376 718.8467 121.6348 716.9434 121.6348 714.6196 c
121.6348 700.5581 l
121.6348 698.2334 123.5366 696.3311 125.8613 696.3311 c
134.3359 696.3311 l
134.3359 696.3311 l
f
0 D
150.1797 620.3374 m
169.7266 631.6226 l
189.2734 620.3374 l
150.1797 620.3374 l
150.1797 620.3374 l
f
165.8032 731.2446 m
154.8037 733.1108 146.4238 742.6865 146.4238 754.2168 c
146.4238 774.5391 161.3682 791.1069 178.2061 798.6606 c
168.5566 775.0566 193.0293 773.6182 193.0293 754.2168 c
193.0293 746.0791 188.8535 738.9146 182.5303 734.7471 c
185.3965 738.3618 186.314 743.3638 184.5044 747.9653 c
180.4263 758.3281 167.2788 755.3311 167.2427 768.5894 c
158.6855 759.8369 152.0093 738.5313 165.8032 731.2446 c
165.8032 731.2446 l
f
136.8926 621.1499 m
144.0713 646.4351 l
162.3794 635.8647 l
136.8926 621.1499 l
136.8926 621.1499 l
f
148.9775 663.7163 m
152.752 677.0117 l
162.3794 671.4536 l
148.9775 663.7163 l
148.9775 663.7163 l
f
154.8218 684.3008 m
158.2373 696.3311 l
181.2158 696.3311 l
184.6313 684.3008 l
169.7266 675.6958 l
154.8218 684.3008 l
154.8218 684.3008 l
f
186.7007 677.0117 m
190.4756 663.7168 l
177.0742 671.4536 l
186.7007 677.0117 l
186.7007 677.0117 l
f
195.3818 646.4351 m
202.5605 621.1504 l
177.0742 635.8647 l
195.3818 646.4351 l
195.3818 646.4351 l
f
1 D
169.7266 667.2119 m
146.2529 653.6592 l
169.7266 640.1069 l
193.2002 653.6592 l
169.7266 667.2119 l
169.7266 667.2119 l
f
*U
*u
0 D
0 XR
600.8418 777.6387 m
608.5166 777.6387 611.6943 779.646 614.7461 781.5747 c
627.5986 789.7056 641.5332 788.9229 654.4883 781.4385 c
663.0547 776.4897 671.2002 776.4897 679.7676 781.4385 c
693.3359 789.2778 707.207 789.2778 720.7754 781.4385 c
729.3428 776.4897 737.4883 776.4897 746.0547 781.4385 c
759.5742 789.2505 773.4473 789.3096 786.9609 781.4629 c
790.2461 779.5513 793.5391 777.6387 799.7012 777.6387 c
799.7012 761.9126 l
789.3779 761.9126 784.2305 764.9014 779.0977 767.8828 c
770.5723 772.8354 762.4443 772.7881 753.918 767.8623 c
740.3516 760.0254 726.4775 760.0254 712.9121 767.8623 c
704.3447 772.812 696.1982 772.812 687.6309 767.8623 c
674.0664 760.0254 660.1914 760.0254 646.625 767.8623 c
638.8691 772.3442 630.8672 773.2158 623.0996 768.3066 c
618.1445 765.1738 612.9883 761.9126 600.8418 761.9126 c
600.8418 777.6387 l
600.8418 777.6387 l
f
600.8418 626.5547 m
608.5166 626.5547 611.6943 628.564 614.7451 630.4927 c
627.5986 638.6201 641.5313 637.8423 654.4883 630.3564 c
663.0547 625.4067 671.2012 625.4067 679.7676 630.3564 c
693.335 638.1943 707.208 638.1943 720.7754 630.3564 c
729.3418 625.4067 737.4883 625.4067 746.0547 630.3564 c
759.5732 638.1665 773.4463 638.2256 786.9609 630.376 c
790.2461 628.4678 793.54 626.5547 799.7012 626.5547 c
799.7012 610.8276 l
789.3789 610.8276 784.2314 613.8179 779.0977 616.7993 c
770.5732 621.751 762.4443 621.7056 753.918 616.7793 c
740.3516 608.9409 726.4785 608.9414 712.9111 616.7793 c
704.3447 621.729 696.1982 621.729 687.6318 616.7793 c
674.0645 608.9414 660.1914 608.9409 646.625 616.7793 c
638.8701 621.2598 630.8662 622.1338 623.0996 617.2231 c
618.1455 614.0903 612.9854 610.8276 600.8418 610.8276 c
600.8418 626.5547 l
600.8418 626.5547 l
f
600.8418 656.7754 m
608.5166 656.7754 611.6943 658.7847 614.7461 660.7148 c
627.5986 668.8423 641.5332 668.0645 654.4883 660.5752 c
663.0547 655.6274 671.2002 655.6274 679.7676 660.5752 c
693.3359 668.4141 707.207 668.4141 720.7754 660.5752 c
729.3428 655.6274 737.4883 655.6274 746.0547 660.5752 c
759.5742 668.3877 773.4473 668.4463 786.9609 660.5962 c
790.2461 658.688 793.5391 656.7754 799.7012 656.7754 c
799.7012 641.0479 l
789.3779 641.0479 784.2305 644.0386 779.0977 647.0205 c
770.5723 651.9707 762.4443 651.9263 753.918 646.999 c
740.3516 639.1602 726.4775 639.1602 712.9121 646.999 c
704.3447 651.9502 696.1982 651.9502 687.6309 646.999 c
674.0664 639.1602 660.1914 639.1602 646.625 646.999 c
638.8691 651.4805 630.8672 652.354 623.0996 647.4448 c
618.1445 644.3101 612.9883 641.0479 600.8418 641.0479 c
600.8418 656.7754 l
600.8418 656.7754 l
f
600.8418 686.9897 m
608.5166 686.9897 611.6943 688.999 614.7461 690.9287 c
627.5986 699.0562 641.5332 698.2778 654.4883 690.7915 c
663.0547 685.8438 671.2002 685.8438 679.7676 690.7915 c
693.3359 698.6289 707.207 698.6289 720.7754 690.7915 c
729.3428 685.8438 737.4883 685.8438 746.0547 690.7915 c
759.5742 698.6025 773.4473 698.6641 786.9609 690.8105 c
790.2461 688.9043 793.5391 686.9897 799.7012 686.9897 c
799.7012 671.2627 l
789.3779 671.2627 784.2305 674.2549 779.0977 677.2363 c
770.5723 682.187 762.4443 682.1416 753.918 677.2168 c
740.3516 669.3799 726.4775 669.3799 712.9121 677.2168 c
704.3447 682.1646 696.1982 682.1646 687.6309 677.2168 c
674.0664 669.3799 660.1914 669.3799 646.625 677.2168 c
638.8691 681.6958 630.8672 682.5708 623.0996 677.6592 c
618.1445 674.5259 612.9883 671.2627 600.8418 671.2627 c
600.8418 686.9897 l
600.8418 686.9897 l
f
600.8418 717.2061 m
608.5166 717.2061 611.6943 719.2158 614.7461 721.145 c
627.5986 729.271 641.5332 728.4941 654.4883 721.0088 c
663.0547 716.0576 671.2002 716.0576 679.7676 721.0088 c
693.3359 728.8452 707.207 728.8452 720.7754 721.0088 c
729.3428 716.0576 737.4883 716.0576 746.0547 721.0088 c
759.5742 728.8174 773.4473 728.8794 786.9609 721.0273 c
790.2461 719.1201 793.5391 717.2061 799.7012 717.2061 c
799.7012 701.481 l
789.3779 701.481 784.2305 704.4688 779.0977 707.4517 c
770.5723 712.4023 762.4443 712.3574 753.918 707.4312 c
740.3516 699.5942 726.4775 699.5942 712.9121 707.4312 c
704.3447 712.3799 696.1982 712.3799 687.6309 707.4312 c
674.0664 699.5942 660.1914 699.5942 646.625 707.4312 c
638.8691 711.9131 630.8672 712.7861 623.0996 707.875 c
618.1445 704.7427 612.9883 701.481 600.8418 701.481 c
600.8418 717.2061 l
600.8418 717.2061 l
f
600.8418 747.4224 m
608.5166 747.4224 611.6943 749.4302 614.7461 751.3608 c
627.5986 759.4873 641.5332 758.709 654.4883 751.2246 c
663.0547 746.2749 671.2002 746.2749 679.7676 751.2246 c
693.3359 759.0635 707.207 759.0635 720.7754 751.2246 c
729.3428 746.2749 737.4883 746.2749 746.0547 751.2246 c
759.5742 759.0332 773.4473 759.0942 786.9609 751.2446 c
790.2461 749.3364 793.5391 747.4224 799.7012 747.4224 c
799.7012 731.6953 l
789.3779 731.6953 784.2305 734.686 779.0977 737.667 c
770.5723 742.6182 762.4443 742.5732 753.918 737.6484 c
740.3516 729.8086 726.4775 729.811 712.9121 737.6484 c
704.3447 742.5957 696.1982 742.5957 687.6309 737.6484 c
674.0664 729.811 660.1914 729.8086 646.625 737.6484 c
638.8691 742.127 630.8672 743.002 623.0996 738.0898 c
618.1445 734.958 612.9883 731.6953 600.8418 731.6953 c
600.8418 747.4224 l
600.8418 747.4224 l
f
*U
*u
1 XR
458.8774 484.4756 m
505.9224 484.4756 l
507.437 475.4492 l
457.3628 475.4492 l
458.8774 484.4756 l
458.8774 484.4756 l
f
508.3564 469.9736 m
522.4785 385.8271 l
442.3213 385.8271 l
456.4438 469.9736 l
508.3564 469.9736 l
508.3564 469.9736 l
f
532.3838 380.3516 m
532.3838 348.2041 l
336.3457 348.2041 l
336.3457 380.3516 l
347.6631 380.3516 l
347.6631 426.2666 l
383.9868 426.2666 l
383.9868 503.7422 l
398.2241 503.7422 l
398.2241 426.2666 l
410.4536 426.2666 l
410.4536 503.7422 l
424.6909 503.7422 l
424.6909 426.2666 l
434.3647 426.2666 l
434.3647 380.3516 l
532.3838 380.3516 l
532.3838 380.3516 l
f
383.9868 509.2178 m
383.9868 520.1699 l
398.2241 520.1699 l
398.2241 509.2178 l
383.9868 509.2178 l
383.9868 509.2178 l
f
410.4536 509.2178 m
410.4536 520.1699 l
424.6909 520.1699 l
424.6909 509.2178 l
410.4536 509.2178 l
410.4536 509.2178 l
f
362.2656 412.1113 m
383.0737 412.1113 l
383.0737 391.3027 l
362.2656 391.3027 l
362.2656 412.1113 l
362.2656 412.1113 l
f
*U
*u
700.2715 531.5947 m
733.957 531.5947 761.2744 504.2773 761.2744 470.5908 c
761.2744 432.6699 730.7666 429.248 730.7666 390.8037 c
712.8604 390.8037 l
712.9131 406.8848 719.2783 444.4121 722.5488 458.1865 c
726.7764 458.7764 730.0322 462.2012 730.0322 466.7979 c
730.0322 471.3936 725.7139 475.4941 721.3359 475.4941 c
716.958 475.4941 714.0459 472.8555 712.9893 469.2432 c
687.5557 469.2432 l
686.499 472.8555 683.585 475.4941 679.207 475.4941 c
674.8301 475.4941 670.5107 471.3936 670.5107 466.7979 c
670.5107 462.2012 673.7666 458.7764 677.9941 458.1865 c
681.2646 444.4121 687.6299 406.8848 687.6826 390.8037 c
669.7754 390.8037 l
669.7754 429.248 639.2676 432.6699 639.2676 470.5908 c
639.2676 504.2773 666.5859 531.5947 700.2715 531.5947 c
700.2715 531.5947 l
f
706.1553 390.8037 m
694.3877 390.8037 l
694.3301 407.3926 687.8799 445.5508 684.4688 459.875 c
685.8379 460.917 686.8896 462.3564 687.4512 464.0195 c
713.0938 464.0195 l
713.6553 462.3564 714.7051 460.917 716.0742 459.875 c
712.6631 445.5508 706.2129 407.3926 706.1553 390.8037 c
706.1553 390.8037 l
f
692.8906 343.6699 m
707.6523 343.6699 l
707.6523 339.3711 l
707.6523 337.0068 705.7178 335.0723 703.3535 335.0723 c
697.1895 335.0723 l
694.8252 335.0723 692.8906 337.0068 692.8906 339.3711 c
692.8906 343.6699 l
692.8906 343.6699 l
f
675.1123 385.4678 m
725.4307 385.4678 l
725.4307 376.8711 l
675.1123 376.8711 l
675.1123 385.4678 l
675.1123 385.4678 l
f
675.1123 371.5352 m
725.4307 371.5352 l
725.4307 362.9385 l
675.1123 362.9385 l
675.1123 371.5352 l
675.1123 371.5352 l
f
675.1123 357.6025 m
725.4307 357.6025 l
725.4307 353.3037 l
725.4307 350.9404 723.1982 349.0049 720.4707 349.0049 c
680.0723 349.0049 l
677.3447 349.0049 675.1123 350.9395 675.1123 353.3037 c
675.1123 357.6025 l
675.1123 357.6025 l
f
*U
*u
925.2197 356.8848 m
955.7549 356.8848 l
955.7549 416.0576 l
958.8057 414.9434 962.1016 414.335 965.5381 414.335 c
968.9746 414.335 972.2705 414.9434 975.3213 416.0576 c
975.3213 356.8848 l
1005.8555 356.8848 l
1005.8555 334.1787 l
925.2197 334.1787 l
925.2197 356.8848 l
925.2197 356.8848 l
f
898.5576 433.1826 m
894.7588 456.1377 905.2119 480.0742 926.5498 492.3936 c
931.3291 495.1533 936.3398 497.1436 941.4395 498.4111 c
941.126 495.4619 940.9609 492.4336 940.9609 489.3438 c
940.9609 488.5576 940.9717 487.7725 940.9932 486.9941 c
935.7754 485.8154 930.6445 483.8457 925.7695 481.0313 c
908.1064 470.834 898.3242 452.2256 898.5576 433.1826 c
898.5576 433.1826 l
f
990.9551 506.0156 m
1012.7354 497.8281 1028.2383 476.8076 1028.2383 452.168 c
1028.2383 446.6494 1027.457 441.3154 1026.0049 436.2646 c
1023.6074 438.0107 1021.0664 439.668 1018.3906 441.2129 c
1017.71 441.6055 1017.0254 441.9893 1016.3408 442.3594 c
1017.9287 447.4678 1018.7881 452.8965 1018.7881 458.5254 c
1018.7881 478.9199 1007.5645 496.6963 990.9551 506.0156 c
990.9551 506.0156 l
f
881.9775 432.8135 m
876.8984 463.5146 890.8789 495.5273 919.416 512.0039 c
927.7109 516.793 936.5293 519.8535 945.4531 521.3125 c
943.5225 516.4395 942.0674 511.0469 941.1924 505.2949 c
933.3682 503.8115 925.6563 501.0146 918.3701 496.8076 c
894.748 483.1699 881.667 458.2803 881.9775 432.8135 c
881.9775 432.8135 l
f
998.4902 520.458 m
1027.6182 509.5088 1048.3525 481.3955 1048.3525 448.4424 c
1048.3525 438.8623 1046.5938 429.6963 1043.3945 421.2393 c
1040.1426 425.3467 1036.1992 429.3047 1031.6543 432.9365 c
1034.2813 440.4551 1035.7139 448.5332 1035.7139 456.9443 c
1035.7139 484.2207 1020.7031 507.9941 998.4902 520.458 c
998.4902 520.458 l
f
965.5381 462.707 m
976.499 462.707 985.3887 453.8154 985.3887 442.8535 c
985.3887 431.8926 976.499 423.002 965.5381 423.002 c
954.5762 423.002 945.6875 431.8926 945.6875 442.8535 c
945.6875 453.8154 954.5762 462.707 965.5381 462.707 c
965.5381 462.707 l
f
965.5381 453.207 m
971.2539 453.207 975.8896 448.5703 975.8896 442.8535 c
975.8896 437.1377 971.2539 432.501 965.5381 432.501 c
959.8213 432.501 955.1855 437.1377 955.1855 442.8535 c
955.1855 448.5703 959.8213 453.207 965.5381 453.207 c
965.5381 453.207 l
f
951.5049 418.0225 m
946.5146 412.7803 940.3818 407.9199 933.3105 403.8369 c
915.6309 393.6299 896.666 390.9238 883.4043 395.4346 c
886.1279 409.1738 897.9541 424.2451 915.6338 434.4521 c
922.707 438.5352 929.9844 441.417 937.0215 443.1172 c
937.0205 443.0293 937.0186 442.9414 937.0186 442.8535 c
937.0186 432.207 942.8564 422.9219 951.5049 418.0225 c
951.5049 418.0225 l
f
951.0498 467.4209 m
949.0049 474.3643 947.8613 482.1084 947.8613 490.2734 c
947.8613 510.6875 955.001 528.4639 965.5381 537.6934 c
976.0742 528.4639 983.2148 510.6875 983.2148 490.2734 c
983.2148 482.1074 982.0703 474.3643 980.0244 467.4209 c
975.7783 469.9307 970.8271 471.374 965.5381 471.374 c
960.249 471.374 955.2959 469.9307 951.0498 467.4209 c
951.0498 467.4209 l
f
994.0537 443.1172 m
1001.0908 441.417 1008.3691 438.5352 1015.4414 434.4521 c
1033.1221 424.2451 1044.9473 409.1738 1047.6709 395.4346 c
1034.4102 390.9238 1015.4453 393.6299 997.7656 403.8369 c
990.6943 407.9199 984.5586 412.7803 979.5693 418.0225 c
988.2178 422.9219 994.0566 432.207 994.0566 442.8535 c
994.0566 442.9414 994.0547 443.0293 994.0537 443.1172 c
994.0537 443.1172 l
f
*U
*u
95.1899 259.9834 m
244.2617 259.9834 l
253.5059 259.9834 261.0703 252.4189 261.0703 243.1758 c
261.0703 94.1035 l
261.0703 84.8613 253.5059 77.2959 244.2617 77.2959 c
95.1899 77.2959 l
85.9473 77.2959 78.3828 84.8613 78.3828 94.1035 c
78.3828 243.1758 l
78.3828 252.4189 85.9473 259.9834 95.1899 259.9834 c
95.1899 259.9834 l
f
148.2783 175.7305 m
152.1929 175.7305 155.3682 172.5547 155.3682 168.6396 c
155.3682 164.7256 152.1929 161.5498 148.2783 161.5498 c
144.3638 161.5498 141.1885 164.7256 141.1885 168.6396 c
141.1885 172.5547 144.3638 175.7305 148.2783 175.7305 c
148.2783 175.7305 l
f
191.1748 175.7305 m
195.0898 175.7305 198.2651 172.5547 198.2651 168.6396 c
198.2651 164.7256 195.0898 161.5498 191.1748 161.5498 c
187.2603 161.5498 184.085 164.7256 184.085 168.6396 c
184.085 172.5547 187.2603 175.7305 191.1748 175.7305 c
191.1748 175.7305 l
f
104.5073 236.9063 m
234.9458 236.9063 l
236.6216 236.9063 237.9927 235.5352 237.9927 233.8594 c
237.9927 103.4209 l
237.9927 101.7451 236.6216 100.374 234.9458 100.374 c
104.5073 100.374 l
102.8315 100.374 101.4604 101.7451 101.4604 103.4209 c
101.4604 233.8594 l
101.4604 235.5352 102.8315 236.9063 104.5073 236.9063 c
104.5073 236.9063 l
f
169.7266 212.1191 m
193.7354 212.1191 213.2061 192.6494 213.2061 168.6396 c
213.2061 144.6309 193.7354 125.1602 169.7266 125.1602 c
145.7178 125.1602 126.2471 144.6309 126.2471 168.6396 c
126.2471 192.6494 145.7178 212.1191 169.7266 212.1191 c
169.7266 212.1191 l
f
100.1396 246.2822 m
239.314 246.2822 l
243.7441 246.2822 247.3687 242.6572 247.3687 238.2275 c
247.3687 99.0527 l
247.3687 94.623 243.7441 90.998 239.314 90.998 c
100.1396 90.998 l
95.709 90.998 92.0845 94.623 92.0845 99.0527 c
92.0845 238.2275 l
92.0845 242.6572 95.709 246.2822 100.1396 246.2822 c
100.1396 246.2822 l
f
*U
*u
397.334 121.1426 m
471.396 121.1426 l
473.2983 121.1426 474.8545 119.583 474.8545 117.6836 c
474.8545 98.3252 l
474.8545 96.4268 473.2949 94.8662 471.396 94.8662 c
397.334 94.8662 l
395.4346 94.8662 393.875 96.4229 393.875 98.3252 c
393.875 117.6836 l
393.875 119.5859 395.4316 121.1426 397.334 121.1426 c
397.334 121.1426 l
f
397.334 192.2041 m
471.396 192.2041 l
473.2983 192.2041 474.8545 190.6445 474.8545 188.7451 c
474.8545 169.3877 l
474.8545 167.4883 473.2949 165.9287 471.396 165.9287 c
397.334 165.9287 l
395.4346 165.9287 393.875 167.4854 393.875 169.3877 c
393.875 188.7451 l
393.875 190.6475 395.4316 192.2041 397.334 192.2041 c
397.334 192.2041 l
f
397.334 156.6729 m
471.396 156.6729 l
473.2983 156.6729 474.8545 155.1133 474.8545 153.2148 c
474.8545 133.8564 l
474.8545 131.957 473.2949 130.3975 471.396 130.3975 c
397.334 130.3975 l
395.4346 130.3975 393.875 131.9541 393.875 133.8564 c
393.875 153.2148 l
393.875 155.1162 395.4316 156.6729 397.334 156.6729 c
397.334 156.6729 l
f
386.7568 250.3115 m
415.1172 250.3115 l
415.1172 262.877 l
415.1172 266.0303 417.6978 268.6113 420.8516 268.6113 c
447.8784 268.6113 l
451.0322 268.6113 453.6128 266.0293 453.6128 262.877 c
453.6128 250.3115 l
481.9712 250.3115 l
492.4648 250.3115 501.0518 241.7188 501.0518 231.2305 c
501.0518 87.748 l
501.0518 77.2607 492.4604 68.6689 481.9712 68.6689 c
386.7568 68.6689 l
376.2695 68.6689 367.6777 77.2568 367.6777 87.748 c
367.6777 231.2305 l
367.6777 241.7246 376.2646 250.3115 386.7568 250.3115 c
386.7568 250.3115 l
f
392.3755 234.7578 m
476.354 234.7578 l
481.3833 234.7578 485.498 230.6377 485.498 225.6133 c
485.498 93.3672 l
485.498 88.3428 481.3784 84.2236 476.354 84.2236 c
392.3755 84.2236 l
387.3511 84.2236 383.2314 88.3379 383.2314 93.3672 c
383.2314 225.6133 l
383.2314 230.6426 387.3462 234.7578 392.3755 234.7578 c
392.3755 234.7578 l
f
*U
*u
681.2344 238.5615 m
681.2344 236.5459 681.2637 234.5361 681.3213 232.5293 c
680.9775 232.4893 680.6357 232.4482 680.2949 232.4063 c
661.7451 230.1133 647.2529 223.6006 647.2529 212.3945 c
647.2529 189.0068 643.9014 166.7852 639.8584 144.457 c
619.8418 145.3105 601.7061 149.8516 601.7061 158.084 c
601.7061 158.376 601.7383 158.665 601.7969 158.9512 c
606.5557 185.6465 612.4766 210.9668 612.4766 238.5615 c
612.4766 252.5508 681.2344 252.5508 681.2344 238.5615 c
681.2344 238.5615 l
f
646.6592 243.7305 m
677.25 243.7305 677.25 232.5439 646.6592 232.5439 c
616.0684 232.5439 616.0684 243.7305 646.6592 243.7305 c
646.6592 243.7305 l
f
753.8828 243.7305 m
784.4746 243.7305 784.4746 232.5439 753.8828 232.5439 c
723.292 232.5439 723.292 243.7305 753.8828 243.7305 c
753.8828 243.7305 l
f
700.2715 217.8281 m
743.5195 217.8281 743.5205 199.9854 700.2715 199.9854 c
657.0234 199.9854 657.0244 217.8281 700.2715 217.8281 c
700.2715 217.8281 l
f
745.0752 212.3945 m
745.0752 177.082 752.1436 142.7412 758.9941 108.6455 c
759.0684 108.2725 759.1113 107.8945 759.1113 107.5146 c
759.1113 83.5713 641.4307 83.5713 641.4307 107.5146 c
641.4307 107.8945 641.4736 108.2725 641.5488 108.6455 c
646.6533 137.2773 652.7832 164.6943 654.793 193.5508 c
661.1211 187.7949 677.1523 183.7051 695.9287 183.7051 c
716.7227 183.7051 734.1504 188.7227 738.7598 195.46 c
729.8936 190.998 716.001 188.1211 700.3809 188.1211 c
679.7949 188.1211 662.2061 193.1162 655.1777 200.1582 c
655.3662 204.2031 655.4668 208.2793 655.4668 212.3945 c
655.4668 230.627 745.0752 230.6279 745.0752 212.3945 c
745.0752 212.3945 l
f
1 D
719.3086 238.5615 m
719.3086 236.5459 719.2793 234.5361 719.2217 232.5293 c
719.5645 232.4893 719.9072 232.4482 720.248 232.4063 c
738.7979 230.1133 753.2891 223.6006 753.2891 212.3945 c
753.2891 189.0068 756.6416 166.7852 760.6846 144.457 c
780.7012 145.3105 798.8369 149.8516 798.8369 158.084 c
798.8369 158.376 798.8047 158.665 798.7461 158.9512 c
793.9873 185.6465 788.0654 210.9668 788.0654 238.5615 c
788.0654 252.5508 719.3086 252.5508 719.3086 238.5615 c
719.3086 238.5615 l
f
*U
*u
0 D
897.2441 258.2275 m
1033.501 258.2275 l
1035.4697 258.2275 1037.0801 256.6162 1037.0801 254.6475 c
1037.0801 242.9072 l
1037.0801 240.9385 1035.4697 239.3271 1033.501 239.3271 c
1026.542 239.3271 l
1026.542 178.2422 l
1033.501 178.2422 l
1035.4697 178.2422 1037.0801 176.6318 1037.0801 174.6631 c
1037.0801 162.9219 l
1037.0801 160.9531 1035.4697 159.3428 1033.501 159.3428 c
1026.542 159.3428 l
1026.542 98.2568 l
1033.501 98.2568 l
1035.4697 98.2568 1037.0801 96.6465 1037.0801 94.6777 c
1037.0801 82.9375 l
1037.0801 80.9678 1035.4697 79.3574 1033.501 79.3574 c
897.2441 79.3574 l
895.2754 79.3574 893.665 80.9678 893.665 82.9375 c
893.665 94.6777 l
893.665 96.6465 895.2754 98.2568 897.2441 98.2568 c
904.2031 98.2568 l
904.2031 159.3428 l
897.2441 159.3428 l
895.2754 159.3428 893.665 160.9531 893.665 162.9219 c
893.665 174.6631 l
893.665 176.6318 895.2754 178.2422 897.2441 178.2422 c
904.2031 178.2422 l
904.2031 239.3271 l
897.2441 239.3271 l
895.2754 239.3271 893.665 240.9385 893.665 242.9072 c
893.665 254.6475 l
893.665 256.6162 895.2754 258.2275 897.2441 258.2275 c
897.2441 258.2275 l
f
1 D
944.791 239.3271 m
919.9678 239.3271 l
919.9678 178.2422 l
944.791 178.2422 l
944.791 239.3271 l
944.791 239.3271 l
f
944.791 159.3428 m
919.9678 159.3428 l
919.9678 98.2568 l
944.791 98.2568 l
944.791 159.3428 l
944.791 159.3428 l
f
*U
LB
%AI5_EndLayer--
%%PageTrailer
gsave annotatepage grestore showpage
%%Trailer
Adobe_Illustrator_AI5 /terminate get exec
Adobe_shading_AI8 /terminate get exec
Adobe_ColorImage_AI6 /terminate get exec
Adobe_cshow /terminate get exec
Adobe_level2_AI5 /terminate get exec
%%EOF
